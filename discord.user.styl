/* ==UserStyle==
@name         Dark-Discord
@namespace    gitlab.com/vednoc/dark-discord
@description  Dark and light, very customizable theme for Discord.
@author       vednoc <vednoc@pm.me> (https://github.com/vednoc)
@homepageURL  https://gitlab.com/vednoc/dark-discord
@supportURL   https://gitlab.com/vednoc/dark-discord/issues
@updateURL    https://gitlab.com/vednoc/dark-discord/raw/master/discord.user.styl
@version      0.53.0
@license      MIT
@preprocessor stylus

@var checkbox cg_debug     'Color generator debug' 0
@var select   cg_theme     'Base color-scheme toggle' {
    'Custom colors   *': 'custom',
    'Dark blue (old)  ': 'old',
    'Dark gray (new)  ': 'new',
}
@var color    cg_bg        'Base background color' #1f232a
@var color    cg_fg        'Base foreground color' #eeeeee
@var color    cg_ac        'Base accent color    ' #7289da

@var range    _bg_a        'Adjust background color tones' [0, -25, 25, 0.1, '%']
@var range    _fg_a        'Adjust foreground color tones' [0, -25, 25, 0.1, '%']
@var range    _ac_a        'Adjust accent color tones    ' [0,   0, 25,   1, '%']
@var range    _sc_a        'Adjust syntax color tones    ' [0,   0, 25,   1, '%']

@var range    e_size       'Emotes: Reduce emote size' [32, 24, 64, 8, 'px']
@var checkbox e_reaction   'Emotes: Larger reaction emotes' 1

@var checkbox chat_short   'Shorter chat mode' 0
@var text     chat_short_w 'Shorter chat width' 800px

@var checkbox sb_short     'Smaller sidebar mode' 1
@var text     sb_short_w   'Smaller sidebar mode breakpoint' 940px
@var text     sb_short_d   'Smaller sidebar mode hover delay' 1000ms

@var checkbox g_minimize   'Minimize guild area width' 1
@var text     g_minimize_w 'Minimize guild area breakpoint' 700px

@var checkbox g_icons      'Small guild icons' 0
@var text     g_icons_s    'Small guild icon size' 32px

@var select   compact      'Compact mode' {
    'Hide guilds   ': 'guilds',
    'Hide sidebar  ': 'sidebar',
    'Hide both    *': 'both',
}
@var text     compact_w    'Compact mode breakpoint' 540px

@var checkbox acm          'Enable avatar context menu in profiles' 1
@var checkbox code_ln      'Enable code line numbers' 1

@var text     f_ui         'UI font' ''font_name''
@var text     f_code       'Monospace font' ''font_name''

@var text     b_radius     'Border radius for menus' 4px

@var color    _red         'Base red color              ' #f07178
@var color    _orange      'Base orange color           ' #f78c6c
@var color    _yellow      'Base yellow color           ' #ffcb6b
@var color    _green       'Base green color            ' #aede62
@var color    _cyan        'Base cyan color             ' #89ddff
@var color    _blue        'Base blue color             ' #82aaff
@var color    _magenta     'Base magenta color          ' #9a91ea
@var color    _violet      'Base violet color           ' #c792ea
@var color    _gray        'Gray color                  ' #bbbbbb
@var color    _white       'White color                 ' #ffffff
@var color    _sh          'Shadow color                ' #00000025
==/UserStyle== */

// Class mixin.
/// Use it instead of: [class *= 'foo_bar']
w(arguments, inline = 0)
    a = arguments
    u = unquote
    list = ''

    if      (a[0] == 1) { x = '&' }
    else if (a[0] == 2) { x = '+' }
    else if (a[0] == 3) { x = '/' }
    else if (a[0] == 4) { x = '>' }
    else if (a[0] == 5) { x = '../ ' }
    else                { x = '' }

    if      (inline == 1) { _i = ''   }
    else if (inline == 2) { _i = ' '  }
    else if (inline == 3) { _i = '+'  }
    else                  { _i = ', ' }

    for item, index in a[1 .. length(a)]
        if index
            list += s('%s%s[class*="%s"]', u(_i), u(x), u(item))
        else
            list += s('%s[class*="%s"]', u(x), u(item))
    {list}
        {block}

// Color mixin.
/// All colors: `c: fg bd bg`
/// Only border-color: `c: 0 bd`
c(x, y = 0, z = 0, xi = 1, yi = 1, zi = 1) {
    if x != 0 && x != '_' {            color: xi is 0 ? x : x i }
    if y != 0 && y != '_' {     border-color: yi is 0 ? y : y i }
    if z != 0 && z != '_' { background-color: zi is 0 ? z : z i }
}

// SVG colors.
v(x, y = 0, xi = 1, yi = 1) {
    i = !important;
    if x != 0 && x != '_' {   fill: xi is 0? x : x i }
    if y != 0 && y != '_' { stroke: yi is 0? y : y i }
}

// Pseudo-element builder.
P(a, _z = 0, _c = '', _p = absolute) {
    z-index:  _z;
    content:  _c;
    position: _p;
    if a[0] is a 'call' or a[0] is a 'unit' {    top: a[0] }
    if a[1] is a 'call' or a[1] is a 'unit' {  right: a[1] }
    if a[2] is a 'call' or a[2] is a 'unit' { bottom: a[2] }
    if a[3] is a 'call' or a[3] is a 'unit' {   left: a[3] }
}

// Bare RGB mixin.
/// Converts HEX to bare rrr-ggg-bbb format.
to_rgb(input) {
    unquote(slice(s('%s', rgba(input, 0)), 5, -3))
}

// Border radius mixin.
r() { border-radius: arguments }

// Box-shadow mixin.
b() { box-shadow: arguments }

/// Remove old browser prefixes.
vendors = official

/// Feat -> Base color-scheme toggle. #32
if (cg_theme == 'custom') {
    BG = cg_bg
    FG = cg_fg
    AC = cg_ac
} else if (cg_theme == 'old') {
    BG = #1f232a
    FG = #eeeeee
    AC = #7289da
} else if (cg_theme == 'new') {
    BG = #292929
    FG = #e6e6e6
    AC = #d47d3f
}

/// Helpers.
t  = transparent
i  = !important
BA = _bg_a
FA = _fg_a
AA = _ac_a
SA = _sc_a

// Color generator.
/// NOTE: Fix the scope to avoid conflicts.
/{
    g = global

    /// Generator rules.
    if (dark(BG)) {
        a1 = (AA + 15); a2 = (AA + 30); a3 = (AA + 45); a4 = (AA + 65); a5 = (AA + 75)
        s1 = (SA + 15); s2 = (SA + 30); s3 = (SA + 45); s4 = (SA + 65); s5 = (SA + 75)
        b1 = (BA + 10); b2 = (BA - 05); b3 = (BA - 10); b4 = (BA - 15); b5 = (BA - 20)
        f1 = (FA - 10); f2 = (FA + 10); f3 = (FA + 20); f4 = (FA + 30); f5 = (FA + 40)
    } else {
        a1 = (AA + 15); a2 = (AA + 30); a3 = (AA + 45); a4 = (AA + 65); a5 = (AA + 75)
        s1 = (SA + 15); s2 = (SA + 30); s3 = (SA + 45); s4 = (SA + 65); s5 = (SA + 75)
        b1 = (BA - 10); b2 = (BA + 08); b3 = (BA + 16); b4 = (BA + 24); b5 = (BA + 32)
        f1 = (FA - 05); f2 = (FA - 10); f3 = (FA - 15); f4 = (FA - 20); f5 = (FA - 30)
    }

    /// Generate tones for base colors.
    C = {
        bg: {
            '0': darken(BG, b1),
            '1': darken(BG, 0%),
            '2': darken(BG, b2),
            '3': darken(BG, b3),
            '4': darken(BG, b4),
            '5': darken(BG, b5),
        },
        fg: {
            '0': darken(FG, f1),
            '1': darken(FG, 0%),
            '2': darken(FG, f2),
            '3': darken(FG, f3),
            '4': darken(FG, f4),
            '5': darken(FG, f5),
        },
        ac: {
            '0': mix(darken(BG,  0%), AC, 0%),
            '1': mix(darken(BG, 40%), AC, a1),
            '2': mix(darken(BG, 40%), AC, a2),
            '3': mix(darken(BG, 40%), AC, a3),
            '4': mix(darken(BG, 65%), AC, a4),
            '5': mix(darken(BG, 50%), AC, a5),
        },
        b1: {
            '0': spin(_red,  0deg - 0%)
            '1': spin(_red, 15deg - s1)
            '2': spin(_red, 30deg - s2)
            '3': mix(darken(BG, 20%), _red, s3)
            '4': mix(darken(BG, 40%), _red, s4)
            '5': mix(darken(BG, 40%), _red, s5)
        },
        b2: {
            '0': spin(_orange,  0deg - 0%)
            '1': spin(_orange, 15deg - s1)
            '2': spin(_orange, 30deg - s2)
            '3': mix(darken(BG, 20%), _orange, s3)
            '4': mix(darken(BG, 40%), _orange, s4)
            '5': mix(darken(BG, 40%), _orange, s5)
        },
        b3: {
            '0': spin(_yellow,  0deg - 0%)
            '1': spin(_yellow, 15deg - s1)
            '2': spin(_yellow, 30deg - s2)
            '3': mix(darken(BG, 20%), _yellow, s3)
            '4': mix(darken(BG, 40%), _yellow, s4)
            '5': mix(darken(BG, 40%), _yellow, s5)
        },
        b4: {
            '0': spin(_green,  0deg - 0%)
            '1': spin(_green, 15deg - s1)
            '2': spin(_green, 30deg - s2)
            '3': mix(darken(BG, 20%), _green, s3)
            '4': mix(darken(BG, 40%), _green, s4)
            '5': mix(darken(BG, 40%), _green, s5)
        },
        b5: {
            '0': spin(_cyan,  0deg - 0%)
            '1': spin(_cyan, 15deg - s1)
            '2': spin(_cyan, 30deg - s2)
            '3': mix(darken(BG, 20%), _cyan, s3)
            '4': mix(darken(BG, 40%), _cyan, s4)
            '5': mix(darken(BG, 40%), _cyan, s5)
        },
        b6: {
            '0': spin(_blue,  0deg - 0%)
            '1': spin(_blue, 15deg - s1)
            '2': spin(_blue, 30deg - s2)
            '3': mix(darken(BG, 20%), _blue, s3)
            '4': mix(darken(BG, 40%), _blue, s4)
            '5': mix(darken(BG, 40%), _blue, s5)
        },
        b7: {
            '0': spin(_magenta,  0deg - 0%)
            '1': spin(_magenta, 15deg - s1)
            '2': spin(_magenta, 30deg - s2)
            '3': mix(darken(BG, 20%), _magenta, s3)
            '4': mix(darken(BG, 40%), _magenta, s4)
            '5': mix(darken(BG, 40%), _magenta, s5)
        },
        b8: {
            '0': spin(_violet,  0deg - 0%)
            '1': spin(_violet, 15deg - s1)
            '2': spin(_violet, 30deg - s2)
            '3': mix(darken(BG, 20%), _violet, s3)
            '4': mix(darken(BG, 40%), _violet, s4)
            '5': mix(darken(BG, 40%), _violet, s5)
        }
    }

    /// Generate Stylus-lang variables.
    define('bg-' + key, val, g) for key, val in C.bg
    define('fg-' + key, val, g) for key, val in C.fg
    define('ac-' + key, val, g) for key, val in C.ac
    define('b1-' + key, val, g) for key, val in C.b1
    define('b2-' + key, val, g) for key, val in C.b2
    define('b3-' + key, val, g) for key, val in C.b3
    define('b4-' + key, val, g) for key, val in C.b4
    define('b5-' + key, val, g) for key, val in C.b5
    define('b6-' + key, val, g) for key, val in C.b6
    define('b7-' + key, val, g) for key, val in C.b7
    define('b8-' + key, val, g) for key, val in C.b8

    /// Generate Stylus-lang helpers for CSS variables.
    define('bg' + key, s('var(--bg-%s)', unquote(key)), g) for key, val in C.bg
    define('fg' + key, s('var(--fg-%s)', unquote(key)), g) for key, val in C.fg
    define('ac' + key, s('var(--ac-%s)', unquote(key)), g) for key, val in C.ac
    define('b1' + key, s('var(--b1-%s)', unquote(key)), g) for key, val in C.b1
    define('b2' + key, s('var(--b2-%s)', unquote(key)), g) for key, val in C.b2
    define('b3' + key, s('var(--b3-%s)', unquote(key)), g) for key, val in C.b3
    define('b4' + key, s('var(--b4-%s)', unquote(key)), g) for key, val in C.b4
    define('b5' + key, s('var(--b5-%s)', unquote(key)), g) for key, val in C.b5
    define('b6' + key, s('var(--b6-%s)', unquote(key)), g) for key, val in C.b6
    define('b7' + key, s('var(--b7-%s)', unquote(key)), g) for key, val in C.b7
    define('b8' + key, s('var(--b8-%s)', unquote(key)), g) for key, val in C.b8
}


@-moz-document regexp('https?://discord(app)?.com/(app|channels|library|store|gui.*|log.*)(/.*)?') {
    /// Show debug.
    if (cg_debug) {
        :root {
            &::before {
                content: \
                '  ⭐ BG: ' + luminosity(BG) + \
                '  ⭐ FG: ' + luminosity(FG) + \
                '  🌟 bg1: ' + bg-1 + \
                '  🌟 fg1: ' + fg-1 + \
                '  🌟 ac1: ' + ac-1
                text-align: center;
                position: absolute;
                top: 0; left: 0; right: 0;
                line-height: 2em;
                height: 2em;
                c: fg1
            }
            body > div[id] {
                margin-top: calc(2em + 0px);
                max-height: calc(100vh - 2em);
                b: 0 -1px bg5
            }
        }
    }

    // Use stylus-lang variables with CSS variables.
    shadow  = var(--shadow);
    sh      = var(--shadow);
    bsh     = var(--bshadow);
    white   = var(--white);
    outer   = 0 0 0 1px bg5
    inner   = inset outer;
    rc      = var(--radius)

    :root, .theme-dark {
        /// Userstyle info.
        --note: 'Dark-Discord v0.53.0'

        /// Discord's native variables.
        --header-primary:               fg1 //#ffffff
        --header-secondary:             fg4 //#b9bbbe
        --text-normal:                  fg1 //#dcddde
        --text-muted:                   fg5 //#72767d
        --text-link:                    ac0 //#00b0f4
        --channels-default:             fg4 //#8e9297
        --interactive-normal:           fg2 //#b9bbbe
        --interactive-hover:            fg1 //#dcddde
        --interactive-active:           fg0 //#ffffff
        --interactive-muted:            fg5 //#4f545c
        --background-primary:           bg1 //#36393f
        --background-secondary:         bg2 //#2f3136
        --background-secondary-alt:     bg3 //#292b2f
        --background-tertiary:          bg4 //#202225
        --background-accent:            bg5 //#4f545c
        --background-mobile-primary:    bg1 //#36393f
        --background-mobile-secondary:  bg2 //#2f3136
        --background-floating:          bg0 //#18191c
        --background-modifier-hover:    bg3 //rgba(79,84,92,0.16)
        --background-modifier-active:   bg4 //rgba(79,84,92,0.24)
        --background-modifier-selected: bg5 //rgba(79,84,92,0.32)
        --background-modifier-accent:   bg3 //hsla(0,0%,100%,0.06)
        --background-mentioned:         ac5 //rgba(250,166,26,0.05)
        --background-mentioned-hover:   ac4 //rgba(250,166,26,0.08)
        --background-message-hover:     bg0 //rgba(4,4,5,0.07)

        /// Scrollbars.
        --scrollbar-thin-thumb:                 bg5 //#202225
        --scrollbar-thin-track:                 transparent
        --scrollbar-auto-thumb:                 bg5 //#202225
        --scrollbar-auto-track:                 bg1 //#2e3338
        --scrollbar-auto-scrollbar-color-thumb: bg5 //#202225
        --scrollbar-auto-scrollbar-color-track: bg1 //#2f3136

        /// Shadows.
        --elevation-stroke:             inner //0 0 0 1px rgba(4,4,5,0.15)
        --elevation-low:                0 1px bg5 // ...0 2px 0 rgba(4,4,5,0.05)
        // --elevation-medium:             0 4px 4px rgba(0,0,0,0.16)
        --elevation-high:               0 8px 16px 2px sh //0 8px 16px rgba(0,0,0,0.24)

        /// Various backgrounds.
        --channeltextarea-background:   bg3 //#40444b
        --activity-card-background:     bg0 //#202225
        --textbox-markdown-syntax:      fg4 //#8e9297
        --deprecated-card-bg:           bg3 //#20222599
        --deprecated-card-editable-bg:  bg2 //#2022254d
        --deprecated-store-bg:          bg1 //#36393f

        /// Settings -> My account -> Edit settings.
        --deprecated-text-input-bg:              bg3 //#0000001a
        --deprecated-text-input-border:          bg4 //#0000004d
        --deprecated-text-input-border-hover:    bg5 //#040405
        --deprecated-text-input-border-disabled: bg0 //#202225
        --deprecated-text-input-prefix:          ac1 //#dcddde

        /// Modals -> Quickswitcher -> Fix input colors.
        --deprecated-quickswitcher-input-background:  bg4 //#72767d
        --deprecated-quickswitcher-input-placeholder: fg2 //#ffffff4d

        /// Reduce emoji size.
        --e-size: e_size

        /// Generate color variables.
        for _v in (bg fg ac b1 b2 b3 b4 b5 b6 b7 b8) {
            for _i in 0..5 {
                key = s('--%s-%s', _v, _i)
                /// Escape `\` for `*-0` vars.
                val = _v + \- + _i

                /// Generate CSS variables.
                { key }: val i
                { key + '-rgb' }: to_rgb(val)
            }
        }

        /// Various theme variables.
        --shadow  : _sh;
        --bshadow : 0 8px 16px var(--shadow)
        --white   : _white;
        --t       : transparent !important;
        --radius  : b_radius;
        --f-mono  : f_code, Consolas, Liberation Mono, Menlo, Courier, monospace
        --f-ui    : f_ui, Whitney, Helvetica Neue, Helvetica, Arial, sans-serif
    }

    // Base styles.
    body {
        c: 0 0 bg0

        /// Global -> Browser defaults.
        ::selection { c: bg5 0 fg1 }
        ::-moz-selection { c: bg5 0 fg1 }

        /// Global -> Text placeholders.
        +w(0 'emptyPlaceholder') {
            &, ../ ::placeholder { c: fg3 }
        }

        /// Chat -> Placeholders in member list.
        +w(0 'placeholder-') {
            &:nth-child(odd) > div { c: 0 0 bg4 }
            &:nth-child(even) > div { c: 0 0 bg5 }
        }

        /// Feat -> Custom UI font.
        &, button, input, select, textarea, ::placeholder {
            font-family: var(--f-ui) i;
        }

        /// Shortcuts.
        +w(0 'keybindShortcut') {
            span {
                c: fg1 bg4 bg2
                b: inset 0 -4px 0 bg5 i
                svg g { v: fg4 }
            }
        }

        /// App -> Core.
        +w(0 'appMount-') {
            c: 0 0 t

            /// -> Skeleton/Crashed page.
            +w(4 'errorPage-') { c: 0 0 bg1 }

            /// -> 'No channel' page.
            +w(0 'noChannel-') {
                c: 0 0 bg1
                h4 { c: fg1 }
                h4 + div { c: fg4 }
            }

            /// -> Notice alert.
            +w(0 'notice-') {
                r: 0px
                +w(1 'Brand-') { c: 0 0 ac3 }
                +w(1 'Default-') { c: 0 0 b23 }
                +w(1 'height36-') { c: 0 0 bg3 }
            }
        }

        /// User -> Status icon.
        /// TODO: Remove (obsolete?) RGB version in next version.
        [mask *= 'offline'], [fill *= '116\, 127\, 141'], /[fill *= '#747f8d'] { v: fg5 }
        [mask *= 'online'], [fill *= '67\, 181\, 129'], /[fill *= '#43b581'] { v: b40 }
        [mask *= 'idle'], [fill *= '250\, 166\, 26'], /[fill *= '#faa61a'] { v: b20 }
        [mask *= 'dnd'], [fill *= '240\, 71\, 71'], /[fill *= '#f04747'] { v: b10 }

        /// Sidebar -> User status.
        +w(3 'status-') {
            &[style *= '116\, 127\, 141'] { c: 0 0 fg5 }
            &[style *= '67\, 181\, 129'] { c: 0 0 b40 }
            &[style *= '250\, 166\, 26'] { c: 0 0 b20 }
            &[style *= '240\, 71\, 71'] { c: 0 0 b10 }
        }

        /// Badges.
        +w(0 'numberBadge-') {
            /// Global -> 'NEW' alerts.
            /.badge-_BgAUQ,
            /// Inbox -> Unreads.
            /.wrapper-232cHJ,
            /// Unread messages.
            &[style *= 'nd-color: rgb(240\, 71\, 71)'],
            /// Quickswitcher -> Unread messages.
            /[class *= 'quickswitcher-'] [class *= 'badge'],
            /// Guilds -> New messages.
            /[class *= 'mention-'][class *= 'bar'],
            /// Chat -> Pinned messages.
            /[class *= 'iconBadge-'] {
                c: white 0 ac0
            }
        }

        /// Buttons.
        [role = 'button'] {
            &[style *= 'b(67\, 181\, 129'] { c: white 0 b42 }
        }

        /// Feat -> Line numbers for code blocks.
        if (code_ln) {
            pre code {
                c: fg1
                position: relative;
                padding-left: 3em i;
                /// -> Generate a range of numbers.
                n = '';
                for num in 1..128 {
                    n += s('%s ', num);
                    if (num == 128) {
                        n += s('%s', num)
                    }
                }
                /// -> Use a psuedo-element as line numbers.
                &::before {
                    width: 2ch;
                    overflow-y: hidden;
                    P(0.5em 0 0.5em 0px, 0, n);
                    padding: 0 0.5em 0 1.5em;
                    white-space: pre-line;
                    text-align: right;
                    c: fg5
                }
            }
        }

        /// Global -> Tooltips.
        +w(3 'tooltipBlack-') {
            border: 1px solid bg5
            c: fg1 0 bg3
            b: 0 4px 8px shadow i

            +w(0 'Pointer-') { border-top-color: bg5 i }
        }

        /// Fix 'Server Boosting' and similar tooltips.
        +w(3 'subscribeTooltipWrapper-') {
            c: 0 0 ac3
            &::after { border-bottom-color: ac3 i }
        }

        /// Guilds -> Voice -> Activity popout.
        +w(0 'container-3JTnYm') {
            border: 1px solid bg5 i
            r: rc
        }

        /// Chat -> Mentions.
        +w(0 'mention interactive', 1) {
            c: ac0 0 bg3 1 0 0
            transition: 0.2s ease-in-out

            /// Hover/active states.
            &:hover, &.popout-open { c: white 0 ac1 }
            /{ +w(0 'mentioned-' 'mention', 2) { &:not(#z) { c: ac0 0 t }}}

            /// Search -> Highlighted matches.
            /.highlight { c: 0 0 ac4 }
        }

        /// Global -> Bot tags.
        +w(3 'botTagInvert-') { c: white 0 ac0 }
    }

    // Global -> Switches/Checkboxes.
    +w(0 'switch-') {
        &:not([class *= 'themeClear-']) {
            c: 0 0 bg4
            &::after { c: 0 0 fg1 }

            /// Enabled.
            +w(1 'Checked-') {
                c: 0 0 ac1
                &::after { c: 0 0 white }
            }
        }

        +w(3 'checkbox-') {
            /// Squared.
            +w(1 'box-') {
                c: 0 bg5

                /// In bars or standalone.
                +w(1 'checked-') { c: ac1 white white }
                &[style *= 'd-color: rgb(114\, 137\, 218)'] { c: white ac1 ac1 }
            }

            /// Rounded.
            +w(1 'round-') {
                &[style *= '67\, 181\, 129'] { c: 0 b41 b41 }
            }
        }
    }

    // App -> Login page.
    +w(0 'authBox-') {
        border: 1px solid bg5 i
        b: var(--elevation-high) i
        r: rc i
        c: fg5
    }

    // Guilds.
    +w(0 'wrapper-' 'guilds-', 1) {
        /// Use theme colors.
        +w(0 'scroller-') {
            c: 0 0 bg3
            b: inset -1px 0 bg5 i
        }

        /// Home item.
        +w(0 'listItem-' 'wrapper', 2) {
            +w(0 'childWrapper-') { c: fg3 }
            +w(1 'selected-') {
                +w(0 'childWrapper-') { c: white 0 ac2 }
            }
        }

        /// Feat -> Minimize guild area width.
        if (g_minimize) {
            @media screen and (max-width: g_minimize_w) {
                transition: 0.3s cubic-bezier(0, 0, 0.2, 1)
                max-width: 10px

                /// Expand hover region.
                overflow: unset i
                > * { z-index: 9 i }
                &::after {
                    P(0 -15px 0 0, 8)
                    // opacity: 0.5
                    // c: 0 0 ac1
                }

                /// Expand guilds area on hover.
                &:hover {
                    max-width: (g_icons_s + 20px)
                    transition-delay: 0.6s

                    +w(2 'base-') {
                        left: (g_icons_s + 20px) i
                        transition-delay: 0.6s
                    }
                }

                /// Expand main area.
                +w(2 'base-') {
                    transition: 0.3s cubic-bezier(0, 0, 0.2, 1)
                    left: 10px i
                }
            }
        }

        /// Feat -> Smaller guild icons.
        if (g_icons) {
            $size = g_icons_s
            width: ($size + 20px)

            /// Mentions bar.
            +w(0 'nreadMentions' 'bar', 1) { width: $size }

            /// Dividers.
            +w(0 'Separator-') { width: $size }

            /// DM icons.
            div[style *= 'height: 56px'] {
                margin-bottom: 8px
                height: $size i
            }

            /// Icons.
            +w(0 'listItem-') {
                padding-left: 10px
                justify-content: flex-start

                /// Unread indicators.
                +w(4 'pill-'){
                    height: $size

                    /// Guild placeholder icon.
                    + [draggable = 'false'] svg {
                        width: $size i
                        height: $size i
                        div { c: 0 0 bg5 }
                    }
                }

                /// 1: Home icon.
                /// 2: Guild icons.
                +w(0 'listItemWrapper-' 'blobContainer-') {
                    +w(4 'wrapper-') { width: $size; height: $size }
                    +w(0 'svg-') { width: $size; height: $size }
                    +w(0 'Badge-') {
                        r: 50% i
                        b: 0 0 0 3px bg3
                    }
                }

                /// Folder icons.
                > [draggable] {
                    +w(4 'wrapper-') { &, ../ { width: $size; height: $size}}
                    +w(0 'svg-') { width: $size; height: $size }
                    +w(0 'Badge-') {
                        r: 50% i
                        b: 0 0 0 3px bg3
                    }
                }

                /// Expanded folders.
                +w(3 'expandedFolderBackground-') {
                    width: $size
                    left: 10px i
                    r: 16px i

                    /// Add borders to expanded folders.
                    &:not([class *= 'collapsed']) { b: 0 0 0 2px bg4 }

                    /// Reset list height.
                    ~ [style *= 'height'] {
                        height: unset i
                        padding-bottom: 1px
                    }
                }
            }

            /// Fix main area.
            +w(2 'base-') { left: ($size + 20px) }
        }

        /// Feat -> Compact mode.
        if (compact == 'guilds' || compact == 'both') {
            @media screen and (max-width: compact_w) {
                display: none i
                +w(2 'base-') { left: 0px i }
            }
        }
    }

    // Sidebar.
    /// NOTE: Excludes user settings.
    :not([class *= 'Region']) > {
        +w(0 'sidebar-') {
            border-right: 1px solid bg5 i

            /// -> User status.
            +w(0 'panels-') {
                border-top: 1px solid bg5 i
                /// Popouts -> Status menu.
                +w(3 'menu-') { border: 1px solid bg5 i }
            }

            /// -> Friends.
            +w(2 'container-') {
                c: 0 0 bg1
                /// -> Header.
                +w(4 'container-') { c: 0 0 bg2 }
                /// -> Now playing.
                +w(0 'nowPlaying') { b: inset 1px 0 bg5 i }
            }

            /// -> Guild notifications.
            +w(0 'bar-') {
                c: fg1 0 bg3
                b: inner, bsh i;
                +w(1 'mention-') {
                    c: white 0 ac1
                    b: bsh i;
                }
            }

            /// Feat -> Small sidebar mode.
            if (sb_short) {
                @media screen and (max-width: sb_short_w) {
                    transition: 0.3s cubic-bezier(0, 0, 0.2, 1)
                    max-width: 64px

                    /// Center user icon.
                    +w(0 'panels-' 'container-', 2) {
                        padding: 0 16px i
                    }

                    /// Expand on hover.
                    &:hover {
                        max-width: 240px
                        transition-delay: sb_short_d i
                    }

                    /// Remove extra stuff for channels.
                    +w(0 'wrapper-' 'content-', 2) {
                        margin: 0
                        r: 0px
                        min-width: (sb_short_w + 4px)
                        +w(0 'icon-' 'iconItem-', 0) { display: none i }
                    }

                    /// More compact bars.
                    +w(0 'unread-' 'bar-', 1) {
                        margin: -8px -9px 0
                        padding: 8px
                        r: 0px
                        span { font-size: 10px i }
                    }
                }
            }

            /// Feat -> Compact mode.
            if (compact == 'sidebar' || compact == 'both') {
                @media screen and (max-width: compact_w) {
                    display: none i
                }
            }

            /// App -> Server discovery.
            +w(2 'pageWrapper-') {
                c: 0 0 bg1
            }
        }
    }

    // Global -> Context menus.
    +w(0 'contextMenu-') {
        border: 1px solid bg5 i
    }

    // Settings.
    +w(0 'SidebarView-') {
        +w(0 'sidebarRegion-') {
            /// -> Add userstyle version.
            nav > div:first-child::before {
                padding: 16px 0;
                margin-bottom: 16px;
                content: '🌚 ' var(--note);
                text-transform: initial;
                font-weight: 500;
                font-size: 16px;
                display: block;
                b: 0 1px bg5
                c: fg1
            }
        }

        /// 'ESC' button.
        +w(0 'closeButton-') {
            c: 0 bg5
            &:hover { c: 0 0 bg3 }
            svg path { v: fg2 }
            +w(2 'keybind-') { c: fg2 }
        }

        /// My account.
        +w(0 'viewBody-') { c: fg1 }

        /// -> Add border to content area.
        +w(0 'contentRegion-') {
            border-left: 1px solid bg5 i
        }

        /// 'Subscriptions' colors.
        [style ^= 'color: rgb(114\, 137\, 218);'] {
            c: ac1
            &:hover { c: 0 0 ac4 }

            ../ [style *= '-color: rgb(114\, 137\, 218)'] {
                c: white ac1 ac1
            }
        }

        /// 'Log Out' colors.
        [style ^= 'color: rgb(240\, 71\, 71);'] {
            c: b10
            &:hover { c: 0 0 b15 }
        }
    }

    // Startup.
    +w(0 'ready-' 'text-', '+') {
        /// Tip color.
        +w(0 'tipTitle-') { c: ac1 }

        /// Add theme version to loading screen.
        +w(4 'contentBase-') {
            padding-top: 2rem i
            font-style: italic i
            c: fg3

            /// Theme version.
            &:before {
                content: var(--note) i
                text-transform: initial
            }
        }
    }

    // Friends -> Active now.
    +w(0 'nowPlaying' 'outer-', 2) {
        /// Normal state.
        +w(1 'wrapper-') {
            c: 0 0 bg3

            /// Rich presence.
            +w(0 'inset-') { c: 0 0 bg4 }
        }

        /// Various states.
        +w(1 ' active-') {
            &, ../:hover { c: 0 0 bg5 }
            +w(0 ' active-' 'inset-') { c: 0 0 bg4 }
        }

        /// Popouts.
        +w(3 'popout-38lTFE') {
            c: 0 0 bg0
            b: inner, bsh i

            +w(0 'separator-') { c: 0 0 bg4 }

            +w(0 'enabled-' 'ListItem', 0) {
                &:hover { c: 0 0 bg2 }
            }
        }
    }

    // Modals.
    +w(0 'modal-') {
        /// Backdrop.
        +w(3 'backdrop') {
            c: 0 0 bg1
            opacity: 0.8 i;
        }

        /// Global -> User info.
        +w(4 'inner-' 'root-', 1) {
            border: 1px solid bg5
            r: rc
            b: var(--elevation-high) i

            /// Header.
            +w(4 'topSection') {
                z-index: 1 i
                position: relative
                border-bottom: 1px solid bg5 i
                c: 0 0 bg3

                /// Account info.
                +w(0 'username-') { c: fg1 }
                +w(0 'discriminator-') { c: fg2 }

                /// Status colors.
                +w(4 'headerFill-') { c: 0 0 bg4 }
            }

            /// Buttons.
            +w(0 'button') {
                transition: 0.2s ease
                &:not([class *= 'ActionsProfile-']) { c: white ac1 ac1 }
                &:hover { opacity: 0.8 i }
                > div { c: white }
            }

            /// Slider bar.
            +w(0 'timeBarProfile-' 'bar-', 2) { c: 0 0 #fff2 }

            /// States.
            +w(4 'Xbox') {
                c: 0 0 b75
                +w(0 'headerFill-') { c: 0 0 b74 }
                +w(0 'colorBrand-') { c: 0 0 b70 }
            }
            +w(4 'Playing') {
                c: 0 0 b55
                +w(0 'headerFill-') { c: 0 0 b54 }
                +w(0 'colorBrand-') { c: 0 0 b50 }
            }
            +w(4 'Spotify') {
                c: 0 0 b45
                +w(0 'headerFill-') { c: 0 0 b44 }
                +w(0 'colorGreen-') { c: 0 0 b41 }
            }
            +w(4 'Streaming') {
                c: 0 0 b65
                +w(0 'headerFill-') { c: 0 0 b64 }
                +w(0 'colorBrand-') { c: 0 0 b60 }
            }

            /// Tabs.
            +w(0 'tabBarContainer-') {
                c: 0 bg5 bg2
                [style *= ': rgb(255'] { c: 0 ac1 }
                [style *= '255\, 0.1'] { c: 0 bg5 }
                [style *= '255\, 0.4'] { c: fg4 }

                /// Items.
                +w(0 'item-') {
                    c: fg4
                    &:hover { c: 0 bg4 }
                    +w(1 'selected-') { c: fg1 ac1 }
                    &[style *= '-color: rgb(255'] { c: fg1 ac1 }
                }
            }
        }

        /// Global -> Upload.
        +w(3 'uploadModal-') {
            border: 1px solid bg5 i
            b: var(--elevation-high) i;
            c: 0 0 bg1
            r: rc
            /// -> Preview.
            +w(0 'icon-') {
                +w(1 'image-', 0) {
                    c: 0 0 bg3
                    b: inner, bsh i;
                }
                +w(1 'unknown-' 'code-' 'video-' 'document-', 0) {
                    filter: invert(0.8) hue-rotate(180deg)
                }
            }
            /// -> Textarea.
            +w(0 'textAreaUpload-' 'scrollableContainer-', 0) {
                border: 1px solid bg5 i
                r: rc
            }
            /// -> Footer.
            +w(0 'footer-') {
                border-top: 1px solid bg5 i
                c: 0 0 bg2
                b: none i;
                r: 0px 0px rc rc
            }
        }
        /// Global -> Quickswitcher.
        +w(3 'quickswitcher-') {
            &:not([class *= 'channel']) {
                border: 1px solid bg5
                b: var(--elevation-high) i;
                r: rc
            }
            /// -> Protip.
            +w(0 'protip-') {
                > h3 { c: b40 }
                > div {
                    transition: opacity 0.2s ease i
                    ../:hover > div { opacity: 1 i }
                }
            }
        }
        /// Global -> Keyboard combos.
        +w(3 'keyboardShortcutsModal') {
            c: 0 0 bg1
            b: inner i
            h1 {
                c: fg1
                + div { c: fg3 bg5 }
            }
            +w(0 'Description') { c: fg3 }
            +w(0 'ddrArrows-') { filter: invert(0.8) hue-rotate(180deg) }
        }

        /// Guilds -> Folder settings / Channel info / Gift a Nitro.
        +w(3 'root-1gCeng') {
            border: 1px solid bg5 i
            b: var(--elevation-high) i
            c: 0 0 bg1

            /// 'Delete message'.
            +w(0 'colorStandard-') {
                +w(2 'message-') {
                    c: 0 0 bg2
                    b: inner
                    r: rc

                    /// Fix mentions.
                    .mention { c: ac0 0 bg3 }
                }
            }

            /// Footer.
            +w(0 'footer-') {
                b: inset 0 1px 0 bg5
                c: 0 0 bg2
            }
        }

        /// Inbox -> Fix borders.
        +w(3 'recentMentionsPopout-') {
            border: 1px solid bg5 i
            b: var(--elevation-high) i

            /// Header.
            +w(4 'header-') {
                c: 0 0 bg3
                b: inset 0 -1px bg5 i
            }
        }

        /// Change avatar -> Zoom in/out slider.
        +w(3 'slider-') {
            +w(0 'bar-') { c: 0 0 bg4 }
            +w(0 'Fill-') { c: 0 0 ac1 }
            +w(0 'grabber-') { c: 0 fg1 fg1 }
            +w(0 'markDash-') { c: 0 0 bg4 }
            +w(0 'markValue-') { c: fg3 }
            +w(0 'defaultValue-' 'Value-', 2) { c: ac1 }
        }
    }

    // Buttons.
    +w(0 'button-') {
        +w(1 'lookLink-') {
            c: fg3;
            transition: 0.2s ease;
            &:hover {
                c: fg0
                --g: 0deg, t, t 1px, currentColor 0, currentColor 2px, t 0
                +w(4 'contents-') { background: linear-gradient(var(--g)) i }
            }
            +w(1 'colorBrand-') { c: ac1 }
        }

        +w(1 'lookFilled-') {
            transition: 0.2s ease;
            &:hover { opacity: 0.8 }
            +w(1 'colorBrand-') { c: white 0 ac1 }
            +w(1 'colorGreen-') { c: white 0 b42 }
            +w(1 'colorPrimary-') { c: fg1 0 bg4 }
            +w(0 'contents-') { text-shadow: 1px 1px 0 #0005 }
        }

        +w(1 'lookOutlined-') {
            +w(1 'colorRed-') { c: b10 b10 }
            +w(1 'colorBrand-') { c: ac1 ac1 }
        }

        +w(1 'lookBlank-') {
            /// Chat -> Emoji picker tab.
            +w(1 'colorBrand-') { c: fg5 }
            +w(1 'colorBrand-' 'Active-', 1) { c: fg1 0 bg1 }
        }
    }

    // Popouts -> User popout.
    +w(0 'userPopout-') {
        border: 1px solid bg5 i
        b: var(--elevation-high) i
        c: 0 0 bg1

        /// Header.
        +w(4 'header') {
            border-bottom: 1px solid bg5 i
            c: 0 0 bg2

            /// Username.
            +w(0 'headerTag-') {
                c: fg2
                +w(0 'username-') { c: fg0 }
            }

            /// Activity.
            +w(0 'activity-') { * { c: fg1 }}

            /// Status colors.
            +w(1 'Xbox') {
                c: 0 0 b75
                +w(4 'activity-') { c: 0 0 b74 }
            }
            +w(1 'Playing') {
                c: 0 0 b55
                +w(4 'activity-') { c: 0 0 b54 }
            }
            +w(1 'Spotify') {
                c: 0 0 b35
                +w(4 'activity-') { c: 0 0 b34 }
            }
            +w(1 'Streaming') {
                c: 0 0 b65
                +w(4 'activity-') { c: 0 0 b64 }
            }
        }

        /// Body.
        +w(0 'body-') {
            c: fg1 0 t
            +w(0 'bodyTitle-') { c: fg3 }
        }

        /// Footer.
        +w(0 'footer-') {
            c: 0 bg5 t
            input { c: fg1 bg5 bg2 }

            +w(0 'protip-') {
                c: fg
                [style] { c: b40 }
            }
        }
    }

    // Popouts -> Search menu.
    #search-results {
        /// Exclude results.
        &:not([role = 'list']) {
            c: 0 0 bg0
            b: inner, bsh i
        }

        /// Header.
        +w(4 'queryContainer-') {
            c: fg1 bg2 t
            strong { c: ac }
        }

        /// Items.
        +w(0 'header-' 'answer-', 0) { c: fg4 }
        +w(0 'anchor-' 'displayUsername-', 0) { c: fg5 }
        +w(0 'filter-' 'nonText-' 'displayedNick-', 0) { c: fg1 }
        +w(0 'anchorUnderline') { c: ac0 }
        +w(0 'option-') { c: fg3 }
        +w(0 'selected-') { c: 0 0 bg3 }
        +w(0 'option-') { &::after { background: none i }}

        /// Search field.
        +w(3 'searchFilter-') { c: fg0 0 bg1 }
        +w(3 'searchAnswer-') { c: fg0 0 bg1 }

        /// Results.
        +w(0 'channelSeparator-') { c: 0 0 bg2 }
        +w(0 'embedAuthorName-') { c: fg1 }
        +w(0 'embedTitle-') { c: ac1 }
        code.inline { c: fg1 }
    }

    // Popouts -> Attach menu.
    +w(0 'attachPopout-') {
        border: 1px solid bg5

        /// Spotify invite.
        +w(3 'modal-yWgWj-') {
            border: 1px solid bg5 i
            c: 0 0 bg1
            b: var(--elevation-high) i

            /// Footer.
            +w(0 'footer-') {
                border-top: 1px solid bg5
                c: 0 0 bg2
            }

            /// Invite.
            +w(0 'header-') { c: fg4 }
            +w(0 'subHeader-') { c: fg5 }
            +w(0 'name-' 'textLink-' 'Status-') { c: fg1 }
            +w(0 'preview-') { c: 0 bg5 bg3 }

            /// Show emote picker. @upstream
            +w(4 'content-') {
                padding-right: 16px i
                overflow: visible i
            }
        }
    }

    // Chat -> Base.
    +w(0 'chat-') {
        /// -> Header.
        +w(4 'title-') {
            c: 0 0 bg2
            /// -> Gradient.
            +w(3 'children-') {
                &::after { background: linear-gradient(90deg, t 0, bg2) i }
            }
        }

        /// -> Chat area.
        +w(0 'content-') {
            c: 0 0 t

            /// -> 'New messagges' bar.
            +w(0 'isUnread-' 'divider-', 1) {
                c: 0 ac1
                svg path { v: ac1 ac1 }
                +w(0 'content-') { c: ac1 }
                +w(0 'unreadPill-') { c: white 0 ac1 }
            }

            /// -> Dividers.
            +w(0 'divider-' 'content-', 2) {
                c: 0 0 var(--background-primary)
            }

            /// -> 'Has more' bar.
            +w(0 'hasMore-') {
                c: ac1 bg5 bg2
                transition: 0.2s ease;
                &:hover { opacity: 0.6 }
            }
            /// -> Welcome -> Border color.
            +w(0 'base-19D3Qq') { c: 0 bg5 }
            /// -> Guild invites.
            +w(0 'userSelectNone-') {
                +w(1 'cursorDefault-') {
                    margin-top: 1rem;
                    r: rc
                    c: 0 0 bg2
                    b: inner
                }
            }
            /// -> Embedded links/media.
            +w(0 'embedWrapper-') {
                &:not([class *= 'imageZoom-']) {
                    r: rc

                    /// Exclude embeds with custom border colors.
                    &:not([style *= 'border-color']) { c: 0 bg5 }

                    /// Remove double borders from some elements.
                    &:not([class *= 'Audio']) { b: inner }
                }
            }
            /// -> Mentioned.
            +w(0 'mentioned-') {
                r: (chat_short) ? 4px i : 0px i

                /// Bar color.
                &::before {
                    c: 0 0 ac1

                    /// Tweaks for short chat mode.
                    if (chat_short) {
                        width: 4px;
                        r: 4px 0px 0px 4px
                    }
                }
            }
            /// -> Spoilers.
            +w(0 'spoilerText-') {
                r: 8px
                c: 0 0 bg3
                &[data-slate-object] { c: 0 0 bg5 }
                +w(1 'hidden-') { &:hover { c: 0 0 bg4 }}
            }

            /// -> Attachments.
            +w(0 'attachment-') {
                b: none i

                /// Invert document/text/code/zip icons.
                if (dark(BG)) {
                    /[src *= '/assets/985ea67d2edab4424'],
                    /[src *= '/assets/9f358f46647358641'],
                    /[src *= '/assets/481aa700fab464f23'],
                    /[src *= '/assets/73d212e3701483c36'] {
                        filter: invert(0.8) hue-rotate(180deg)
                    }
                }
            }

            /// -> Reactions.
            +w(0 'reactionMe-') {
                c: 0 0 ac3
                +w(0 'Count-') {
                    font-weight: bold
                    c: ac0
                }
            }
        }

        /// -> 'Jump to present' bar.
        +w(0 'jumpToPresentBar-') {
            > button {
                c: fg3
                transition: 0.2s ease;
                ../:hover button { c: fg1 }
            }
        }

        /// Textarea.
        +w(0 'channelTextArea-') {
            r: rc i

            /// Input borders.
            > div {
                r: inherit
                b: inner
            }

            /// Fix emoji button padding.
            +w(0 'emojiButton-') { padding-right: 10px i }

            /// Edit message footer.
            +w(2 'operations-') {
                c: fg3
                a { c: ac2 }
            }
        }

        +w(0 'cooldownWrapper-') { c: fg3 }
        +w(0 'newMessagesBar-') {
            c: 0 0 bg5
            b: bsh i;
            > button { c: fg1 }
        }

        /// Message context menu.
        +w(0 'buttonContainer-' 'buttons-' 'wrapper-', 2) {
            c: 0 0 bg2
            b: outer, bsh i

            /// Menu items.
            +w(3 'item-') {
                +w(1 'colorDefault-') {
                    +w(1 'focused-') { c: ac0 0 ac5 }
                }
                /// 'Delete Message' link.
                +w(1 'colorDanger-') {
                    &, [class *= 'hint'] { c: b10 }
                    +w(1 'focused-') { c: b10 0 b15 }
                }
            }
        }

        /// -> Guild members.
        +w(3 'members-') {
            b: inset 1px 0 bg5 i
            +w(0 'clickable-') {
                &:hover [class *= 'layout-'] { c: 0 0 bg3 }
            }
            +w(0 'selected-') { c: 0 0 bg4 }
        }
        /// -> Search results.
        +w(0 'ResultsWrap-') { b: inset 1px 0 bg5 i }
        /// -> Hovered message.
        +w(0 'message-') {
            r: rc
        }

        /// Chat -> Bot tag colors.
        +w(3 'botTagRegular-') { c: white 0 ac1 }
    }

    // Chat -> Markup.
    +w(0 'markup-') {
        /// -> Reset code font and border color.
        code {
            c: 0 bg5
            &.inline {
                padding: 0.125em 0.2em;
                b: inner, bsh i;
            }
        }

        /// Syntax highlighting.
        /.hljs {
            r: rc i
            &-comment, &-quote { c: fg3 }
            &-built_in, &-deletion { c: b10 }
            &-addition, &-keyword, &-selector-tag { c: b40 }
            &-name, &-section, &-title, &-selector-class, &-selector-id { c: b60 }
            &-doctag, &-literal, &-meta &-meta-string, &-number, &-regexp, &-string { c: b50 }
            &-attr, &-attribute, &-type, &-class &-title, &-template-variable, &-variable { c: b20 }
        }

        /// Feat -> Code font.
        +w(0 'Code-' 'codeBlockText-' 'codeLine-', 3) {
            ../ code, /& { font-family: var(--f-mono) i }
        }
    }

    // Chat -> Autocomplete. @obsolete
    +w(0 'autocomplete-' 'autocomplete', 1) {
        c: 0 0 bg2
        +w(0 'Title-') {
            c: fg5
            > strong { c: ac1 }
        }
        +w(0 'content-') { c: fg1 }
        +w(0 'description') { c: fg4 }
        +w(0 'divider-') { c: 0 0 bg5 }
        +w(0 'Selected-') { c: 0 0 bg4 }
    }

    // Feat -> Shorter messages.
    if (chat_short) {
        chat_width = chat_short_w;
        +w(0 'messagesWrapper-') {
            /// -> Messages.
            +w(0 'scroller-') {
                padding-left: 12px
                > div {
                    width: 100%;
                    max-width: chat_width;
                    margin-left: auto;
                    margin-right: auto;
                    box-sizing: border-box;
                }
            }
            /// -> Bars.
            +w(4 'barBase-') {
                margin-left: auto;
                margin-right: auto;
                max-width: chat_width;
            }
            /// -> Textarea.
            + form > div {
                +w(1 'channelTextArea-') {
                    /// Textarea in DMs/Guilds/Annoncements.
                    &, ../[aria-expanded], ../[class *= 'wrapper-'] {
                        max-width: chat_width;
                        margin-right: auto;
                        margin-left: auto;
                    }
                }
                +w(1 'typing-') {
                    max-width: chat_width;
                    margin-right: auto;
                    margin-left: auto;
                }
            }
        }
    }

    // Emojis.
    .emoji {
        /// Feat -> Reduce emote size.
        &.jumboable {
            width: var(--e-size)
            min-height: @width
            height: @width
        }

        /// Feat -> Larger reaction emotes.
        if (e_reaction) {
            /[class *= 'reactions-'] {
                margin-top: 0.25rem
                .emoji {
                    height: 1.5rem;
                    width: @height;
                }

                /// Whitespace for emote menu.
                +w(0 'reactionBtn-' 'focusable-', 1) { margin-left: 0.25rem }
            }
        }

        /// Drawers -> Emoji picker.
        +w(3 'drawerSizingWrapper-') {
            /// -> Wrapper.
            +w(4 'contentWrapper') {
                border: 1px solid bg5
                b: var(--elevation-high) i;
                r: rc
            }
            /// -> Rounded corners.
            +w(0 'categoryList-') {
                r: 0px 0px 0px rc
            }
        }

        /// -> Fix hardcoded preload images.
        +w(3 'imageLoading-') {
            background-image: none i;
            c: t 0 bg3
            r: 38%
        }
    }

    /// Feat -> Enable avatar context menu in profiles.
    if (acm) {
        +w(0 'avatar-') {
            img { text-indent: unset }
            * { pointer-events: unset }
        }
    }

    /// @upstream
    @supports(scrollbar-width: thin) {
        /// Fix audio/video volume bar position.
        +w(0 'audioVolumeWrapper-') { transform: translate(26px, -4px) i }
        +w(0 'videoVolumeWrapper') { transform: translate(-2px, -12px) i }

        /// Search -> Fix media width.
        +w(0 'embedMedia-') { [data-fullscreen] { width: 100% i }}
    }
}
