/* ==UserStyle==
@name         Dark Discord
@namespace    gitlab.com/vednoc/dark-discord
@version      0.28.6
@description  Customizable dark theme for Discord.
@author       vednoc
@homepageURL  https://gitlab.com/vednoc/dark-discord
@supportURL   https://gitlab.com/vednoc/dark-discord/issues
@updateURL    https://gitlab.com/vednoc/dark-discord/raw/master/discord.user.styl
@preprocessor stylus

@var checkbox fix_fonts "Fix chat font size" 1
@var checkbox fix_pixels "[Experimental] Fix text sub-pixel rendering" 1

@var checkbox ic_invert "Icon inversion" 0
@var checkbox remove_notifications "Notification-free mode" 0
@var checkbox min_guilds "Minimize width of guilds area" 0
@var checkbox mid_guilds "Small guild icons" 0
@var text guild_size "Small guild icons size" 32px
@var checkbox msg_padding "Chat: Decrease padding for cozy messages" 0
@var checkbox compact_cozy "Compact mode for cozy messages" 0
@var checkbox compact_lines "Compact mode visual lines" 0
@var checkbox msg_dividers "Chat: Enable message dividers" 1
@var checkbox disable_acm "Disable avatar context menu" 0
@var checkbox unified_header "WIP: Make the header transparent" 0
@var checkbox disable_images "WIP: Disable images and show their links" 0
@var checkbox scrollbars_enabled "Always show scrollbar tracks" 0
@var checkbox scrollbars_chromium "Disable scrollbars in Chromium" 0
@var checkbox scrollbars_firefox "Disable scrollbars in Firefox" 0
@var checkbox msg_options "Highlight msg by hovering over options" 0
@var checkbox code_ln "Enable code line numbers" 1
@var text ui_font "Custom UI font" "'font_name'"
@var text code_font "Custom mono font" "'font_name'"
@var text input_height "Input bar maximum height" 140px
@var text b_radius "Custom border radius" 4px

@var color dark    "Color: Primary bg   " #292929
@var color darken  "Color: Highlight bg " #333333
@var color darker  "Color: Secondary bg " #424242
@var color light   "Color: Primary fg   " #e6e6e6
@var color lighter "Color: Secondary fg " #bababa
@var color accent  "Color: Accent       " #bf692b
@var color yellow  "Color: Yellow       " #f0c674
@var color orange  "Color: Orange       " #d98245
@var color red     "Color: Red          " #a54242
@var color magenta "Color: Magenta      " #b294bb
@var color violet  "Color: Violet       " #85678f
@var color blue    "Color: Blue         " #54738c
@var color cyan    "Color: Cyan         " #5e8d87
@var color green   "Color: Green        " #7b823a
@var color white   "Color: White        " #ffffff
@var color shadow  "Color: Shadow       " #00000025

==/UserStyle== */

@-moz-document domain("discordapp.com") {
  :root {
    --note    : "Dark-Discord v0.28.6";
    --dark    : dark;
    --darken  : darken;
    --darker  : darker;
    --light   : light;
    --lighter : lighter;
    --accent  : accent;
    --shadow  : shadow;
    --bshadow : 0 2px 4px var(--shadow);
    --yellow  : yellow;
    --orange  : orange;
    --red     : red;
    --magenta : magenta;
    --violet  : violet;
    --blue    : blue;
    --cyan    : cyan;
    --green   : green;
    --white   : white;
    --t       : transparent !important;
    --radius  : b_radius;
    --textarea: input_height;
    --codearea: code_font, Consolas, Liberation Mono, Menlo, Courier, monospace;
    --icinvert: ic_invert;
  }

  // * Use stylus-lang variables with CSS variables.
  $dark    = var(--dark);
  $darken  = var(--darken);
  $darker  = var(--darker);
  $light   = var(--light);
  $lighter = var(--lighter);
  $accent  = var(--accent);
  $shadow  = var(--shadow);
  $bshadow = var(--bshadow);
  $yellow  = var(--yellow);
  $orange  = var(--orange);
  $red     = var(--red);
  $magenta = var(--magenta);
  $violet  = var(--violet);
  $blue    = var(--blue);
  $cyan    = var(--cyan);
  $green   = var(--green);
  $white   = var(--white);
  $t       = var(--t);
  $radius  = var(--radius);
  i        = !important;

  // Color mixin.
  /// All colors: `c: fg bd bg;`
  /// Only border-color: `c: 0 bd;`
  c(x, y = 0, z = 0, xi = 1, yi = 1, zi = 1) {
    i = !important;
    if x is a 'call' or x is a 'rgba' {            color: xi is 0? x : x i }
    if y is a 'call' or y is a 'rgba' {     border-color: yi is 0? y : y i }
    if z is a 'call' or z is a 'rgba' { background-color: zi is 0? z : z i }
  }
  // SVG colors.
  v(x, y = 0, xi = 1, yi = 1) {
    i = !important;
    if x is a 'call' or x is a 'rgba' {   fill: xi is 0? x : x i }
    if y is a 'call' or y is a 'rgba' { stroke: yi is 0? y : y i }
  }

  // * Border radius mixin.
  radius() { border-radius: arguments; }

  // * Compact_lines helper mixins.
  line(x, y) {
    content: "";
    position: absolute;
    if x != false { border-left: 2px solid $darker; }
    if y != false { border-bottom: 2px solid $darker; }
  }
  size(w, h) {
    if w != 'boolean' { width: w; }
    if h != 'boolean' { height: h; }
  }
  nav(a, b, c, d) {
    if a != 'boolean' || a != 'null' { top: a; }
    if b != 'boolean' || b != 'null' { right: b; }
    if c != 'boolean' || c != 'null' { bottom: c; }
    if d != 'boolean' || d != 'null' { left: d; }
  }
  size(w, h) {
    if w is a 'unit' { width:  w }
    if h is a 'unit' { height: h }
  }
  pos(a, b, c, d) {
    if a is a 'unit' { top:    a }
    if b is a 'unit' { right:  b }
    if c is a 'unit' { bottom: c }
    if d is a 'unit' { left:   d }
  }

  body {
    c: 0 0 $dark;
    /// Feat -> Custom UI font.
    &, button, input, select, textarea, ::placeholder {
      font-family: ui_font, Whitney, Helvetica Neue,
        Helvetica, Arial, sans-serif;
    }
    /// App -> Core.
    [class *= 'appMount-'] {
      c: 0 0 $t;
      /// Skeleton/crashed page.
      > [class *= 'themeDark-'] {
        c: 0 0 $dark;
        [class *= 'text-'] > h4 { c: $light }
        [class *= 'note-'] { c: $lighter }
      }
    }
  }

  // App -> Login.
  [class *= 'authBox-'] {
    border: 1px solid;
    radius: $radius;
    c: $lighter $darker $dark;
    box-shadow: 0 2px 10px 2px $shadow;
    [class *= 'title-'] {
      c: $light;
      &[class *= 'h5-'] { c: $lighter }
    }
    [class*="subTitle-"] { c: $lighter }
  }
  // Voice chat controls.
  [class*="buttonIcon-"] path { v: $lighter }
  // * Icons -> Misc.
  [class*="mobileIndicator-"],
  [class*="addButtonIcon-"] polygon,
  [class *= 'OpenIcon-'] path[fill],
  [class *= 'ActionsIcon-'] path[fill],
  svg path[class*="attachButtonPlus-"] {
    v: $lighter;
  }
  // * Icons -> User controls.
  [class*="Icon-"] {
    &[name="Gear"] path[fill] { v: $lighter }
    &[name*="Headset"], &[name*="Microphone"] {
      path[fill]:not([class*="red-"]) { v: $lighter }
      path[fill][class*="red-"] { v: $red }
    }
  }
  // * Icons -> Global.
  [class*="icon"] {
    // Base colors.
    path[fill="currentColor"],
    g[fill="currentColor"] > path,
    path[fill^="#FFF"] {
      v: $lighter;
    }
    // Selected/active icons.
    &[class*="selected-"] path[fill] { v: $accent }
    // Muted channel.
    path[fill][class*="strikethrough-"] { v: $red }
    // Guild/DM owner.
    &[class*="ownerIcon-"] path { v: $orange }
    // Partnered guilds.
    svg[class*="flowerStar-"] {
      v: 0 $dark;
      path[fill] { v: $accent }
      + [class*="childContainer-"] path[fill] { v: $white }
    }
    // Nitro-Booster!
    &[class*="premiumIcon-"] path { v: $violet }
    /// Server options.
    [name *= 'Subscriber'] path { v: $violet }
    [name *= '_UserAdd'] path { v: $accent }
  }
  svg[class*="button"] path[stroke="#FFF"] { v: 0 $lighter }
  // Server owner icon.
  [class*="ownerHelpIcon-"] path { v: $orange }
  // Overflow icon in server members.
  [class*="overflowIconFg-"] { v: $lighter }
  // * Icons -> Non-svg mic/headphone/cogwheel reset.
  [class*="accountDetails-"] + div {
    > div, > button {
      radius: $radius;
      transition: 0.15s ease;
      &:hover { c: 0 0 $darker }
    }
    // Image invert.
    [style*="/assets/"] {
      filter: hue-rotate(
        calc(var(--icinvert) * 180deg)
      ) invert(var(--icinvert)) !important;
      &:hover { c: 0 0 $t }
    }
  }

  // Settings -> Userstyle version.
  [class *= 'userSettingsAccount'] > h2::before {
    display: block;
    content: var(--note);
    text-transform: initial;
    padding: 0.5rem 0 2rem;
    font-size: 1.2rem;
  }

  // * Global -> Browser defaults.
  ::placeholder, [class*="emptyPlaceholder"] { c: $lighter }
  ::selection { c: $dark 0 $lighter }
  ::-moz-selection { c: $dark 0 $lighter }

  /// Global -> Tooltips.
  [class *= 'tooltip-'] {
    border: 1px solid $lighter;
    c: $light 0 $dark;
    box-shadow: 0 2px 8px $shadow !important;
    [class *= 'Pointer-'] { border-top-color: $lighter !important }
  }

  // Global -> Bot tags.
  [class*="botTag-"]:not(#z) { c: $white 0 $accent }

  // * Global -> Checkboxes.
  [class*="checkbox-"]:not([class*="wrapper" i]) {
    c: 0 $darker $dark;
    &[class*="checked-"] {
      c: 0 0 $darker;
      svg polyline { v: 0 $accent }
    }
    &[class*="round-"] {
      c: 0 $darker $dark;
      &[class*="checked-"] {
        c: 0 $green;
        svg polyline { v: 0 $green }
      }
    }
  }

  // * Global -> Switches.
  [class*="switch-"] {
    c: 0 0 $darker;
    box-shadow: 0 0 0 2px inset $darker !important;
    &::before { c: 0 0 $accent }
    &::after {
      c: 0 0 $light;
      box-shadow: 0 2px 4px $shadow !important;
    }
    &[class*="valueChecked"] {
      c: 0 0 $accent;
      box-shadow: 0 0 0 2px inset $accent !important;
    }
  }

  // * Global -> Inputs.
  [class*="inputWrapper-"] {
    input, [class*="multiInput-"] {
      radius: $radius;
      c: $light $darker $dark
      &:focus, &[class*="focused-"] { c: 0 $accent }
    }
    // Separator.
    [class*="multiInput"]::before {
      opacity: 1;
      c: 0 $darker;
    }
  }

  // Global -> Color picker.
  [class*="colorPickerCustom-"] { c: 0 $t $dark }

  // * Global -> Notices.
  [class*="notice-"] {
    &[class*="noticeDefault-"] {
      c: $white 0 $orange;
      [class*="button"] {
        radius: $radius;
        c: $white $white 0;
        &:hover { c: $orange 0 $white }
      }
    }
  }

  // Global -> GDPR complience.
  [class *= 'gdprWrapper-'] {
    radius: $radius;
    c: $lighter $darker $darken;
    [class *= 'header-'] { c: $light }
    [class *= 'lookInverted-'] { c: $white 0 $accent }
    [class *= 'anchor-'], [class *= 'lookLink-'] { c: $lighter }
  }

  // * No channel. (=
  [class*="noChannel-"] { c: 0 0 $dark }

  // * Modal backdrop.
  [class^="backdrop"] {
    opacity: 0.80 !important;
    c: 0 0 $dark;
  }

  // Feat -> Chromium scrollbars.
  if ( scrollbars_chromium != 1 ) {
    [class^="chat"], [class*="friends"] {
      ::-webkit-scrollbar {
        &-track { c: 0 0 $dark }
        &-track-piece { c: 0 $dark $shadow }
        &-thumb { c: 0 $dark $darker }
      }
    }
    [class*="emojiPicker-"] {
      ::-webkit-scrollbar {
        &-track { c: 0 0 $dark }
        &-track-piece { c: 0 0 0 }
        &-thumb { c: 0 $darker $accent }
      }
    }
  }

  // Feat -> Firefox scrollbar polyfill.
  if ( scrollbars_firefox != 1 ) {
    // ? ChannelInfo/SearchResults/Activity/Store/Modals/Friends/Notifications
    // ? ActivityFeed/QuickSwitcher/Channels/Autocomplete/Context/Chat.
    [class*="modal-"][class*="modal-"][class*="size-"],
    [class*="searchResultsWrap-"] > div:last-child,
    [class*="feed-"] +, [class*="Store-"] +,
    [class*="contentRegionScroller-"] +,
    [class*="modal-"][class*="size"],
    [class*="friendsTableBody-"] +,
    [class*="messagesPopout-"] +,
    [class*="activityFeed-"],
    [class*="quickswitcher-"],
    [class*="scrollerFade-"] >,
    [class*="autocomplete-"],
    [class*="contextMenu-"],
    [class*="messages-"] + {
      [class^="scrollbar-"] {
        c: 0 $t $dark;
        [class^="track"] { c: 0 $dark $darker }
        [class^="thumb"] { c: 0 $dark $accent }
        [class^="pad"] { c: 0 0 $dark }
      }
    }
    // ? Pinned/Notifications.
    [class*="sizeMedium-"] {
      [class*="scrollbar-"] {
        c: 0 $t $darker;
        [class^="track"] { c: 0 $darker $dark }
        [class^="thumb"] { c: 0 $darker $accent }
        [class^="pad"] { c: 0 0 $darker }
      }
    }
    // ? Various hacks.
    [class*="scrollbar-"] {
      // ? Custom setting -> Always show scrollbar tracks.
      if ( scrollbars_enabled == 1 ) {
        > [class*="track-"] { opacity: 1 !important; }
      }
      // ? Hide 0px height thumb scrollbar thumb.
      > div[style*="height: 0px;"] { border-width: 0px !important; }
    }
  }

  // HACK: Firefox inputbar height.
  @supports (-moz-user-select: none) {
    [class *= 'channelTextArea-'] textarea[class *= 'textArea-'] {
      margin: 0;
      padding: 16px;
      &[rows = '1']:not([style *= 'height:']) {
        padding: 10px 16px 0;
        margin: 1px 0 -3px;
      }
    }
  }

  // * Modals.
  [class*="modal-"] {
    &[class*="size"] {
      radius: $radius;
      c: 0 0 $dark;
      box-shadow: 0 0 0 1px $darker, 0 4px 8px 0 $shadow;
      [class*="item-"] {
        radius: $radius;
        &[style*="114\, 137\, 218"] { c: 0 $accent $accent }
      }
      [class*="reactors-"], [class*="sidebar-"] { c: 0 0 $t }
      // Confirm message deletion.
      [class*="content-"] > [class*="message-"] {
        radius: $radius;
        border: 1px solid;
        c: 0 $darker $dark;
        box-shadow: 0 2px 4px 0 $shadow;
        [class*="markup-"] { c: $light }
        [class*="timestamp"] { c: $lighter }
      }
    }
    // Default-ish colors.
    [class*="primary-"] { c: $light }
    [class*="titleDefault-"], [class*="h5-"] { c: $light }
    [class*="description-"], [class*="guildName-"] { c: $lighter }
    /// Spotify invitation.
    [class *= 'invite-'][class *= 'preview-'] {
      c: 0 $darker $darken;
      [class *= 'partyStatus-'] {
        c: $lighter;
        [class *= 'textLink-'] { c: $light }
      }
    }
    /// Footer.
    [class *= 'footer-'] {
      c: 0 0 $t;
      radius: 0 0 $radius $radius;
      box-shadow: inset 0 1px $darker;
    }
    // Highlighted friends.
    [class*="friend-"] { c: $light }
    [class*="friendSelected-"] { c: 0 0 $dark }
    .search-bar {
      c: 0 0 $t;
      &-inner { c: 0 $shadow $dark }
      &-tag { c: $lighter 0 $darker }
      input { c: $light }
    }
    // Text color.
    [class*="defaultColor"] { c: $light }
    [class*="Header"], [class*="header-"] { c: $lighter }
    // ? Region select.
    [class*="regionSelectModal-"] {
      radius: $radius;
      c: 0 0 $dark;
      box-shadow: 0 0 0 1px inset $darker, 0 2px 4px 0 $shadow;
      [class*="Option-"] {
        radius: $radius;
        c: 0 $darker $dark;
        &:hover {
          c: 0 $accent;
          box-shadow: 0 2px 4px 0 $shadow;
        }
        [class*="Flag-"] {
          c: 0 0 $t;
          transition: 0.3s ease;
          box-shadow: 0 2px 4px 0 $shadow;
          ../:hover [class*="Flag-"] { transform: translateY(-4px) !important }
        }
        [class*="Name-"] { c: $lighter }
      }
      [class*="Footer-"] { c: $lighter }
    }
    // Image preview.
    [class*="imageWrapper"] + [class*="anchor-"] {
      opacity: 1;
      c: $accent;
    }
  }

  // * Upload modal.
  [class*="uploadModal-"] {
    border: 1px solid $darker;
    c: 0 0 $dark;
    [class*="inner-"] {
      c: $lighter $darker;
      // Different file-types.
      [class*="file-"] [class*="icon-"] {
        &[class*="image-"] {
          c: 0 $darker $dark;
          box-shadow: 0 2px 8px 0 $shadow !important;
        }
        &[class*="unknown-"], &[class*="code-"],
        &[class*="document-"], &[class*="video-"] {
          filter: invert(0.8) hue-rotate(180deg);
        }
        // File title.
        + [class*="description"] { c: $light }
      }
    }
    // ? Controls.
    [class*="footer-"] {
      radius: 0 0 10px 10px;
      c: 0 0 $darken;
      box-shadow: inset 0 1px 0 0 $darker;
      [class*="label"] * { c: $lighter }
    }
  }

  // * Channel info modal.
  [class*="inner-"] > [class*="modal-"][class*="size-"] {
    c: $light 0 $dark;
    box-shadow: 0 2px 4px -1px $shadow, 0 0 0 1px $darker;
    // Close icon.
    [class*="close-"] { color: $lighter, 0, 0; }
    // Text color.
    [class*="content-"] > [class*="primary-"] { color: $lighter, 0, 0; }
  }

  // Modals -> Folder settings.
  [class*="small-"][role="dialog"] {
    c: 0 0 $dark;
    box-shadow: inset 0 0 0 1px $darker, 0 2px 8px $shadow;
    h5 { c: $lighter }
    [class*="close-"] { c: $lighter }
    [class*="defaultColor-"] { c: $light }
    [class*="colorPickerSwatch-"] { c: 0 $shadow }
    [class*="footer-"] {
      c: 0 0 $t;
      box-shadow: inset 0 1px $darker;
    }
  }

  // Modals -> User profile.
  [class^='modal-'] > div > [class *= 'root'] {
    border: 1px solid $darker;
    radius: $radius;
    c: 0 0 $dark;
    box-shadow: $bshadow;
    /// Header.
    [class *= 'header-'] > [class *= 'headerInfo-'] {
      [class *= 'username-'] { c: $light }
      [class *= 'discriminator-'] { c: $lighter }
    }
    /// Activity.
    [class *= 'topSection'] {
      border-bottom: 1px solid $darker;
      c: 0 0 $t;
      [class ^= 'header'] {
        c: 0 0 $darken;
        /// Custom status.
        + div[class = ''] { c: 0 0 $darken }
      }
      [class *= 'activityProfile-'] {
        border-top: 1px solid $darker;
        c: 0 0 $t;
        /// Text.
        [class *= 'Text-'], [class *= 'content'] { c: $lighter }
        [class *= 'details-'], [class *= 'weight-'] { c: $lighter }
        [class *= 'text-'], [class *= 'activityName-'] { c: $light }
        /// Progress bar.
        [class *= 'bar-'] {
          c: 0 0 $darker;
          [class *= 'barInner-'] { c: 0 0 $accent }
        }
        /// Buttons.
        [class *= 'lookOutlined-'] {
          c: $lighter $darker $darker;
          &:hover { opacity: 0.8 }
        }
      }
      /// Indicator.
      &::before {
        content: '';
        position: absolute;
        top: 0; right: 0; left: 0;
        radius: $radius $radius 0 0;
        border-top: $radius solid $t;
      }
    }
    /// Various activities.
    [class *= 'Xbox-']::before { c: 0 $violet }
    [class *= 'Playing-']::before { c: 0 $blue }
    [class *= 'Spotify-']::before { c: 0 $green }
    [class *= 'Streaming-']::before { c: 0 $violet }
    /// Tabs.
    [class *= 'tabBarContainer-'] {
      c: 0 $darker $darken;
      [class *= 'item-'] {
        margin-bottom: -1px;
        border-bottom-width: 1px;
        transition: 0.15s ease;
        c: $lighter $t 0;
        &:hover { c: $light }
        &[class *= 'selected-'], &[style ^= 'border-color: rgb'] {
         c: $light $accent;
        }
      }
    }
    /// Body.
    > [class *= 'body-'] {
      c: 0 0 $t;
      /// Text.
      [class *= 'Info-'] { c: $lighter }
      [class *= 'note-'] > textarea {
        c: $light;
        &:focus { c: 0 0 $darken }
      }
      /// Mutual servers/friends.
      [class *= 'listRow-'] {
        c: $lighter;
        &:hover { c: $light 0 $darken }
        [class *= 'guildNick-'] { c: $lighter }
      }
      /// Scrollbar polyfil tweaks.
      [class *= 'firefoxFixScrollFlex-'] {
        padding-right: 0px;
        [class *= 'InfoSection-'], [class *= 'listRow-'] { margin-right: 12px }
      }
    }
    /// Connected accounts.
    [class *= 'userInfoSection'] {
      c: 0 $darker;
      [class *= 'Accounts'] > [class *= 'Account'] {
        radius: $radius;
        c: 0 $darker $darken;
        [class *= 'AccountName-'] { c: $light }
      }
    }
  }

  // Global -> User status menu popout.
  [id ^= 'popout_'] {
    [class *= 'menu-'] {
      border: 1px solid $darker;
      radius: $radius;
      c: 0 0 $dark;
      box-shadow: 0 2px 4px $shadow;
      [class *= 'separator-'] { c: 0 $darker }
      [class *= 'itemBase-'] {
        c: $lighter;
        transition: 0.15s ease;
        &:hover { c: 0 0 $darken }
        &[class *= 'Active'] { c: 0 0 $darken }
        &[class *= 'invite-'] { c: $accent }
        [class*='helper-'] { c: $lighter }
        div:not([class]) { c: $light }
      }
    }
  }

  // Global -> Context/invite popouts.
  [class *= 'popouts-'] {
    /// Chat -> Message context menu.
    > div > [class *= 'container-'][role = 'menu'] {
      [class *= 'itemGroup-'] {
        [class *= 'itemBase-']:hover { c: 0 0 $darken }
        [class *= 'label-'] { c: $light }
      }
    }
    /// Spotify invitation/Upload a File/etc.
    [class *= 'attachPopout-'] {
      radius: $radius;
      c: $light 0 $dark;
      // Text color.
      [class *= 'RowText'] { c: $lighter }
      > [class *= 'attachPopoutRow']:hover {
        c: 0 0 $darker;
        [class *= 'RowText'] { c: $light }
      }
    }
  }

  // * Add role popout.
  [class*="popoutInvert-"], [class*="popoutBottom-"] {
    [class*="headerText-"] { c: $light }
    [class*="sectionTag-"] {
      c: $lighter 0 $t;
      [class*="selected-"] {
        background: linear-gradient(90deg, $t, $darker);
      }
    }
  }

  // Popouts -> User popout.
  [class *= 'userPopout-'] {
    border: 1px solid $darker;
    c: 0 0 $dark;
    box-shadow: $bshadow;
    [class *= 'headerText-'] {
      [class *= 'username-']:not(#z) { c: $light }
      [class *= 'Tag'] { c: $lighter }
    }
    /// Various modes.
    > [class *= 'header-'] {
      position: relative;
      border-bottom: 1px solid $darker;
      radius: $radius $radius 0 0;
      c: 0 0 $darken;
      /// Buttons.
      [class *= 'lookOutlined-'] {
        c: $lighter $darker $darker;
        box-shadow: $bshadow;
        &:hover { c: $light }
      }
      /// Activity section.
      [class*="activityUserPopout"] {
        border-top: 1px solid $darker;
        c: 0 0 $t;
        /// Text reset.
        [class *= 'activityName-'], [class *= 'Bold-'] { c: $light }
        [class *= 'content-'] [class *= 'details-'] { c: $lighter }
        [class *= 'content-'], [class *= 'text-'] { c: $lighter }
        /// Progress bar.
        [class *= 'bar-'] {
          c: 0 0 $darker;
          [class *= 'barInner-'] { c: 0 0 $accent }
        }
      }
      /// Activity indicator.
      &::before {
        z-index: 0;
        content: '';
        position: absolute;
        top: 0; right: 0; left: 0;
        radius: $radius $radius 0 0;
        border-top: $radius solid $t;
      }
      &[class *= 'Xbox-']::before { c: 0 $magenta }
      &[class *= 'Playing-']::before { c: 0 $blue }
      &[class *= 'Spotify-']::before { c: 0 $green }
      &[class *= 'Streaming-']::before { c: 0 $violet }
    }
    /// Body.
    [class *= 'bodyInner-'] {
      c: $lighter 0 $t;
      /// Headers.
      [class *= 'bodyTitle-'] { c: $lighter }
      /// Add role button.
      [class *= 'actionButton'] {
        transition: 0.15s ease;
        c: $lighter $darker $darken;
      }
      /// Add note.
      [class *= 'note-'] > textarea {
        c: $light;
        &:focus { c: 0 0 $darken }
      }
    }
    /// Footer.
    > [class *= 'footer-'] {
      c: $light $darker $t;
      /// Wumpus!
      [class *= 'wumpusShown-'] [class *= 'wumpusTooltip-'] {
        c: $light 0 $darker;
        &::after { border-color: $t $darker $t $t; }
      }
      /// Tips.
      [class *= 'statusGreen-'] { c: $green }
      [class *= 'tip-'] { c: $light }
      /// Message user.
      [class *= 'quickMessage-'] { c: $light $darker $darken }
    }
  }

  // Popouts -> Custom status.
  [class *= 'customStatus-'] {
    &, span { c: $light }
  }

  // Sidebar -> User controls.
  [class *= 'sidebar-'] > [class *= 'panels-'] {
    c: 0 0 $t;
    [class *= 'title-'] { c: $light }
    [class *= 'subtext-'] { c: $lighter }
    /// VC status.
    > div:first-child:not(:last-child) {
      border-top: 1px solid $darker;
      border-bottom: none;
      c: 0 0 $darken;
      [class*="Error"] { c: $red }
      [class*="Connected"] { c: $green }
      [class*="Connecting"] { c: $orange }
      [class*="description-"] > [class*="channel-"] {
        opacity: 1;
        c: $lighter;
      }
    }
    // Controls.
    > div:last-child {
      c: $lighter 0 $t;
      box-shadow: 0 1px 0 0 inset $darker;
    }
    button {
      radius: $radius;
      c: $lighter;
      transition: 0.15s ease;
      &:hover:not([class*="disabled"]) { c: 0 0 $darker }
    }
  }

  // * Global -> Status indicators.
  [class*="status-"] {
    &[class*="Red"] { c: $red }
    &[class*="Green"] { c: $green }
    &[class*="Orange"] { c: $orange }
    &[class*="Yellow"] { c: $yellow }
    &[class*="Online-" i] { c: 0 0 $green }
    &[class*="Offline-" i] { c: 0 0 gray }

    &[style*="240\, 71\, 71"] { c: 0 0 $red }
    &[style*="67\, 181\, 129"] { c: 0 0 $green }
    &[style*="250\, 166\, 26"] { c: 0 0 $orange }
    &[style*="116\, 127\, 141"] { c: 0 0 gray }

    [fill*="240\, 71\, 71"] { v: $red }
    [fill*="67\, 181\, 129"] { v: $green }
    [fill*="250\, 166\, 26"] { v: $orange }
    [fill*="116\, 127\, 141"] { v: gray }
  }
  // Primary status indicator.
  [class*="cursorDefault-"] {
    [fill*="240\, 71\, 71"] { v: $red }
    [fill*="67\, 181\, 129"] { v: $green }
    [fill*="250\, 166\, 26"] { v: $orange }
    rect[mask *= '09bd61cd'] { v: $lighter }
  }
  // Secondary status indicator.
  [class*="pointerEvents-"] {
    &[fill="#ffffff" i] { v: $dark }
    &[mask*="status-off"] { v: gray }
    &[mask*="status-dnd"] { v: $red }
    &[mask*="status-onl"] { v: $green }
    &[mask*="status-idl"] { v: $orange }
    &[mask*="status-str"] { v: $violet }
  }

  // * Text status.
  [class*="titleChecked"], [class*="descChecked"] { c: $light }

  // * Loading page.
  [class^="app"] > [style^="opacity"] {
    // Background.
    &[class*="fixClipping"] { c: 0 0 $dark }
    // Text colors.
    [class^="quote-"] { c: $light }
    [class^="status-"] { c: $lighter }
    [class*="problems-"] {
      [class*="Text"] { c: $lighter }
      [class*="anchor"] { c: $accent }
    }
  }

  // ? All usernames except the ones that have custom colors.
  [class^="username"]:not([style^="color"]) { c: $light }
  // ? Discriminators.
  [class*="discriminator"] { c: $lighter }
  // ? Roles.
  [class^="nameTag"] {
    // ? Default no-role color in right sidebar.
    &:not([style^="color"]) { c: $lighter }
    // ? Inherit custom color in right sidebar.
    > [class*="username"] { color: inherit !important; }
  }

  // Guilds.
  [class *= 'guilds-'] {
    radius: 0px;
    c: 0 0 $dark;
    box-shadow: inset -1px 0 $darker;
    [class *= 'scroller-'] { c: 0 0 $t }
    [class *= 'Separator-'] { c: 0 0 $darker }
    // * Guild wrapper.
    [class*="listItem-"] {
      // ? Indicator -> New messages.
      [class*="pill-"] > [class*="item"] { c: 0 0 $lighter }
      // ? Indicator -> Unread badges.
      [class*="numberBadge-"] { c: $white 0 $accent }
      // Icons.
      a[href] > [class*="acronym-"], [class*="circleIconButton-"] {
        c: $lighter 0 $darker;
        box-shadow: 0 0 0 1px inset $darker;
      }
      /// Home icon.
      a[aria-label = 'Home'] {
        c: 0 0 $darker;
        [class *= 'homeIcon-'] { c: $light }
        [class *= 'childWrapper-'] { c: 0 0 $t }
        &[class *= 'selected-'] {
          c: 0 0 $accent;
          [class *= 'homeIcon-'] { c: $white }
        }
      }
    }
    [class*="unreadMentionsBar-"] {
      c: $white 0 $accent;
      box-shadow: $bshadow;
      transition: 0.15s ease;
      svg { c: $white }
      &:hover { opacity: 0.8; }
    }
    /// Feat -> Minimize guild width.
    if ( min_guilds == 1 ) {
      transition: 0.3s cubic-bezier(0, 0, 0.2, 1);
      max-width: 10px;
      &:hover {
        max-width: (guild_size + 20px);
        transition-delay: 0.6s;
        + [class *= 'base-'] {
          left: (guild_size + 20px) !important;
          transition-delay: 0.6s;
        }
      }
      + [class *= 'base-'] {
        transition: 0.3s cubic-bezier(0, 0, 0.2, 1);
        left: 10px !important;
      }
    }
  }

  // * Search results.
  [class*="popout-"] > [class*="container-"] {
    radius: $radius;
    c: 0 0 $dark;
    box-shadow: 0 0 0 1px $darker;
    // Message context menu.
    > [class*="item-"][class*="button-"] {
      c: $lighter;
      &:hover { c: $light 0 $darker }
    }
    // * "Search for" selector.
    > [class*="queryContainer-"] {
      c: $light $dark $darker;
      // Text colors.
      [class*="queryText-"] { c: $lighter }
      [class*="queryText-"] strong { c: $light }
      // Shortcut button.
      [class*="queryShortcut-"] [class*="keybindShortcut-"] span {
        c: $light $dark $darker;
        box-shadow: inset 0 -4px 0 $accent;
      }
    }
    // Text color.
    [class*="header-"] { c: $lighter }
    [class*="searchLearnMore-"] [class*="anchor-"],
    [class*="plusIcon-"] { c: $lighter }
    // * Items.
    [class*="option"] {
      // Remove gradient.
      &::after { display: none; }
      // On event.
      &:hover, &[class*="selected-"] { c: 0 0 $darker }
      // Text color.
      > strong { c: $accent }
      [class*="filter-"] { c: $light }
      [class*="nonText-"] { c: $lighter }
      [class*="displayedNick-"] { c: $light }
      [class*="answer-"], [class*="displayUsername-"] {
        opacity: 0.6;
        c: $lighter;
      }
      [class*="resultChannel-"] {
        strong { c: $accent }
        span, svg { c: $lighter }
      }
    }
  }

  // * Calendar.
  [class*="datePicker-"] > div > div {
    c: $lighter 0 $dark;
    [class*="__navigation"] { c: 0 $darker }
    // * Month/year header.
    [class*="__header"] {
      c: $lighter 0 $t;
      [class*="__current-month"] { c: $light $darker }
      [class*="__day-name"] { c: $lighter }
    }
    // * Days.
    [aria-label^="day-"] {
      c: $light $darker $dark;
      // ? Select *only* days that are in the past.
      &:hover:not([class*="disabled"]) { c: $light 0 $accent }
    }
    [class*="__day--outside-month"], [class*="__day--disabled"] {
      opacity: 0.6;
      c: $lighter $darker $darker;
    }
    [class*="__day--today"] {
      c: $light;
      &::after { c: 0 0 $accent }
    }
  }
  // * Hints.
  [class*="datePicker-"] [class*="datePickerHint-"] {
    margin: 0;
    padding: 20px;
    c: 0 $dark $darker;
    span { c: $lighter }
    [class*="hintValue-"] {
      padding: 0 4px;
      c: $light 0 $accent;
    }
  }

  // App -> Base.
  /// NOTE: Rewrites go here.
  [class *= 'base-'] {
    /// Global announcements (sort of).
    > [class *= 'noticePremium'] {
      radius: 0;
      c: $white;
      background-image: linear-gradient(270deg, $blue, $violet);
      a[href]:hover {
        text-decoration: none;
        c: $accent;
      }
    }
  }

  // * Main area.
  [class*="base"] {

    /// Friends -> List.
    [class *= 'friendsTable-'] {
      padding-top: 2px; // @upstream
      c: 0 0 $dark;
      &::before { content: none }
      [class *= 'TableHeader-'] { c: 0 $darker }
      [class *= 'TableBody-'] { c: 0 0 $t }
      [class *= 'title-'], [class *= 'text-'] { c: $lighter }
      [class *= 'Text-'], [class *= 'Column-'] { c: $light $darker }
      [class *= 'Action-'], [class *= 'Separator-'] { c: 0 0 $darker }
      [class *= 'noIcon-'] { c: $light 0 $darker }
      /// Actions.
      [class *= 'friendsAction-']:not(#z) {
        c: $light 0 $darker;
        &[class *= 'actionAccept-']:hover { c: $white 0 $green }
        &[class *= 'actionDeny-']:hover { c: $white 0 $red }
      }
      /// Items.
      [class *= 'friendsRow-'] {
        padding: 8px;
        margin: 0 8px 0 16px;
        border: none !important;
        box-shadow: 0 1px $darker;
        &:hover {
          radius: 4px;
          c: 0 $t $darken;
          box-shadow: 0 0 0 1px $darker, 0 2px 4px 0 $shadow;
        }
        /// Fix actions.
        [class *= 'ColumnActions'] { padding-right: 0 }
      }
      /// Add friends.
      [class *= 'friendTableAddHeader-'] {
        c: 0 $darker;
        h2, input { c: $light }
        [class *= 'Hint-'], [class *= 'Description-'] { c: $lighter }
        form[class *= 'wrapper-'] { c: 0 $darker $darken }
      }
    }

    // Friends -> Title-bar.
    [class *= 'sidebar-'] + [class *= 'container-'] > [class *= 'container-'] {
      c: 0 0 $dark;
      box-shadow: 0 1px $darker;
      [class *= 'children-'] {
        &::after { display: none }
        [class *= 'numberBadge-'] { c: $white 0 $accent }
        [class *= 'title-'] { c: $light }
        [class *= 'divider-'] { c: 0 0 $darker }
        [class *= 'tabBar-'] {
          c: 0 0 $t;
          [class *= 'item-'] {
            transition: 0.15s ease;
            &:not([class *= 'primary-']):not([class *= 'selected-']) {
              c: $lighter 0 $t;
              &:hover { c: $light 0 $darken }
            }
            &[class *= 'selected-'] { c: $accent 0 $t }
            &[class *= 'primary-'] { c: 0 0 $accent }
          }
        }
      }
    }

    // Sidebar -> Channels.
    [class*="sidebar-"] {
      border-right: 1px solid;
      c: 0 $darker $dark;
      /// Remove background.
      [class *= 'scroller-'], > [class *= 'container-'] { c: 0 0 $t }
      // ? Guild name/menu.
      [class *= 'header-'] {
        c: $light;
        box-shadow: 0 1px $darker;
        &:hover { c: 0 0 $darken }
      }
      // ? Remove unnecessary shadow on notification bar.
      [class*="positionedContainer-"] > [class*="unread"] > div {
        box-shadow: none !important;
      }

      // Notices.
      [class*="channelNotice-"] {
        c: 0 0 $darken;
        box-shadow: inset 0 -1px $darker;
        [class*="message-"] {
          c: $lighter;
          [class*="btn-"] {
            transition: 0.15s ease;
            c: $lighter $darker $darker;
            &:hover { c: $light }
          }
        }
        // Custom close button.
        [class*="close"] {
          background: none;
          > div::before { content: 'X' }
        }
      }

      // ? Guild mentions.
      [class *= 'numberBadge-'], [class *= 'bar-'][class *= 'mention-'] {
        c: $white 0 $accent;
      }

      // ? Channels.
      // Channel containers.
      [class*="containerDefault-"] {
        /// Defaults.
        :not([class *= 'mode']) [class *= 'content-'] {
          > svg path, > [class*="name-"] {
            opacity: 0.6;
            c: $lighter;
          }
        }
        /// Unread messages.
        [class *= 'modeUnread-'] {
          [class *= 'unread-'] { c: 0 0 $lighter }
          [class *= 'name-'] { c: $light }
        }
        /// Muted channels.
        [class *= 'modeMuted-'] {
          [class *= 'name-'], [class *= "icon-"] {
            opacity: 0.3;
            c: $lighter;
          }
        }
        /// Muted/locked channels.
        [class *= 'muted-'],
        [class *= 'modeLocked-'] {
          opacity: 0.6;
          [class *= 'name-'] { c: $lighter }
          [class *= 'name-']:hover { c: $light }
        }
        /// Collapsed.
        [class *= 'clickable-'], [class *= 'collapsed-'] {
          [class *= 'name-'] { c: $lighter }
        }
        // On event.
        &:hover, &[class*="selected-"] {
          [class *= 'content-'] {
            c: 0 0 $darker;
            [class *= 'name-'] { c: $light }
            [class *= 'icon-'] path { opacity: 0.6 }
          }
        }
        // Voice channels.
        [class*="listDefault-"] {
          [class*="clickable-"]:hover, [class*="selected-"] {
            > [class*="content-"] { c: 0 0 $darker }
            [class*="username"] { c: $light }
          }
        }
      }

      // ? Reset scroller padding so it takes less space.
      [class*="scrollerWrapPolyfill"] > [class^="scroller-"] {
        padding: 0 10px 0 0 !important;
      }
    }

    // Sidebar -> Members list.
    [class *= 'membersWrap-'] [class *= 'members-'] {
      border-left: 1px solid $darker;
      c: 0 0 $dark;
      [class *= 'Group-'], [class *= 'activity-'] { c: $lighter }
      [class *= 'member-'] {
        radius: $radius;
        c: $lighter;
        &:hover, &:active { > div { c: $light 0 $darken }}
        &[class *= 'selected-'] > div { c: $light 0 $darker }
      }
    }

    // * Search bar.
    [class*="privateChannels-"] > [class*="searchBar-"] {
      box-shadow: 0 1px 0 0 $darker;
      // The actual search bar.
      [class*="searchBarComponent-"] {
        c: 0 $darker $t;
        input { c: $light }
      }
    }

    // * Search bar in guilds, groups and DMs.
    [class*="search-"] {
      > [class*="searchBar-"] {
        width: auto;
        min-width: 144px;
        radius: $radius;
        transition: min-width 0.2s ease-in-out 0.1s;
      }
      // ? On event.
      &[class*="focused"] {
        > [class*="searchBar-"][class*="searchBar-"] {
          min-width: 240px;
          c: 0 0 $dark;
          box-shadow: 0 2px 4px -2px $shadow, 0 0 0 1px inset $darker;
        }
      }
      // ? Some magic for placeholder text.
      [class*="Placeholder"]:not([class*="hasFocus"]) {
        opacity: 0.6;
        c: $lighter;
      }
      & + [class*="divider-"] {
        opacity: 0.2;
        c: 0 0 $lighter;
      }
    }

    // Chat.
    [class *= 'chat-'] {
      c: 0 0 $dark;
      /// Channel title-bar.
      > [class *= 'title-'] {
        c: 0 0 $dark;
        box-shadow: 0 1px $darker !important;
        [class *= 'title-'] { c: $light }
        [class *= 'topic-'], [class *= 'nicknames-'] { c: $lighter }
        // Remove wrapper gradient.
        [class *= 'children-']::after { display: none }
        /// Nicknames.
        [class *= 'akaBadge-'] {
          c: $light 0 $darker;
          box-shadow: $bshadow;
        }
        [class *= 'divider-'], [class *= 'topic']::before { c: 0 0 $darker }
        /// Chat -> Remove top shadow.
        + [class ^= 'content-']::before { content: none }
      }

      // ? Title-bar search messages.
      [class*="search-"] [class*="searchBar-"] {
        c: $lighter 0 $dark;
        box-shadow: inset 0 0 0 1px $darker;
        // Input text color.
        [class*="DraftEditor-"] { c: $lighter }
        // Blocks.
        [class*="searchFilter-"], [class*="searchAnswer"] {
          c: $light 0 $darker;
        }
        [class*="searchFilter-"] { radius: $radius 0 0 $radius }
        [class*="searchAnswer-"] { radius: 0 $radius $radius 0 }
      }

      // ? Group DM header.
      [class*="groupDM-"] [class*="input-"] {
        c: $light;
        input[class*="input-"]:focus { c: 0 0 $dark }
      }

      /// Channel -> NSFW warning.
      > [class *= 'content-'] > div > div > [class *= 'wrapper-'] {
        [class *= 'title-'] { c: $light }
        [class *= 'description-'] { c: $lighter }
        [class *= 'separator-'] { c: 0 0 $darker }
      }
      /// Channel -> Welcome section.
      [class *= 'welcomeMessage-'] {
        position: relative;
        h1, strong { c: $light }
        p { c: $lighter }
        a { c: $accent }
        [class *= 'base-'] {
          filter: invert(
            calc((1 + var(--icinvert)) * var(--icinvert))
          ) !important;
          c: 0 $t;
        }
        &::after {
          content: '';
          position: absolute;
          right: 20px; bottom: 20px; left: 20px;
          border-bottom: 1px solid $darker;
        }
      }
      /// Load more messages bar.
      [class *= 'hasMore-'] {
        border: 1px solid $darker;
        c: $lighter 0 $darken;
        box-shadow: $bshadow;
        transition: 0.15s ease;
        &:hover { c: $light }
      }
      /// New messages.
      [class *= 'newMessagesBar-'] {
        radius: 0 0 $radius $radius;
        c: 0 0 $darker;
        box-shadow: $bshadow;
        button {
          c: $lighter;
          ../:hover button { c: $light }
        }
      }
      /// Jump to present.
      [class *= 'jumpToPresentBar-'] {
        radius: $radius $radius 0 0;
        c: 0 0 $darken;
        box-shadow: $bshadow;
        button {
          c: $lighter;
          ../:hover button { c: $light }
        }
      }

      // * Spinners.
      [class*="spinner-"] {
        // Loading messages.
        [class*="wanderingCubesItem-"] { c: 0 0 $accent }
        // Someone is typing.
        [class*="pulsingEllipsisItem-"] { c: 0 0 $light }
      }

      // ? Transparentize extra elements.
      // ! Careful with this; might need to be removed.
      > div {
        c: 0 0 $t;
        // ? Messages/input form container.
        [class^="messagesWrapper"] {
          c: 0 0 $t;
          & + form { c: 0 0 $t }

          // ? LocalBot messages.
          [class*="isLocalBot-"] {
            c: $lighter $green $dark;
            background-image: linear-gradient(60deg, $t 50%, $darker);
            box-shadow: 0 0 0 1px $darker;
            [class*="localBotMessage-"] a { c: $accent }
          }
        }
        // ? Group welcome message.
        [class*="messages-"] [class*="default-"] h1 {
          c: $lighter;
          strong { c: $light }
        }
        // ? Guild/group user greeters.
        [class*="container-"] > [class*="content-"] {
          c: $lighter;
          a {
            font-weight: bold;
            c: $light;
          }
          time {
            opacity: 0.6;
            c: $lighter;
          }
        }
      }

      /// Messages.
      [class*="messages-"] {
        c: 0 0 $t;
        /// Compact -> Message timestamps.
        [class *= 'messageCompact-'] {
          [class *= 'timestamp']:not([class *= 'VisibleOnHover-']),
          &:hover [class *= 'VisibleOnHover-'] {
            c: $lighter;
          }
        }
        /// Message elements.
        [class*="edited-"],
        [class*="timestampCozy-"] {
          opacity: 0.5;
          c: $lighter;
        }
        [class^="markup-"] {
          c: $light;
          a { c: $accent }

          // Quotes.
          [class*="blockquoteContainer-"] {
            [class*="Divider-"] { c: 0 0 $lighter }
            blockquote { c: $lighter }
          }

          // Spoilers.
          [class*="spoilerText-"] {
            position: relative;
            radius: $radius;
            c: 0 0 $t;
            &::before {
              z-index: -1;
              content: "";
              pos: 0 0 0 0;
              radius: $radius;
              position: absolute;
              c: 0 0 $darken;
              opacity: 0.5;
            }
            &[class*="hidden-"] {
              radius: $radius;
              transition: 0.15s ease;
              c: 0 0 $darker;
              &:hover { opacity: 0.8 }
            }
          }
        }
        [class*="operations"] {
          c: $lighter;
          a { c: $light }
        }

        // Attachments.
        [class*="attachment-"] {
          radius: $radius;
          c: 0 $darker $darken;
          box-shadow: $bshadow;
          [class*="fileNameLink-"] { c: $accent }
          [class*="metadata-"] { c: $light }
          [class*="filenameWrapper-"] * { c: $lighter }
          [class*="progress-"] { c: 0 0 $darker }
          [class*="progressBar-"] { c: 0 0 $accent }
        }

        /// Reactions.
        [class *= 'reaction-'] {
          c: $lighter 0 $darker;
          [class *= 'Count-'] { color: inherit }
          &:hover { c: $light }
          &[class *= 'Me-'] {
            c: $accent;
            background: linear-gradient(90deg, $accent -800%, $t 400%);
          }
        }
        /// Feat -> Message highlights.
        if ( msg_options == 1 ) {
          /[class *= 'content'][class *= 'content-'] {
            position: relative;
          }
          [class *= 'buttonContainer']:hover {
            + [class ^= 'markup']::before {
              z-index: -1;
              content: '';
              position: absolute;
              top: -1px; left: -8px; bottom: -1px; right: 8px;
              radius: 4px;
              c: 0 0 $darken;
              box-shadow: inset 0 0 0 1px $darker;
            }
          }
        }
      }

      // * Mentions.
      [class*="markup-"] {
        [class*="wrapper-"][class*="wrapperHover-"] {
          transition: 0.15s ease;
          position: relative;
          radius: 3px;
          text-decoration: none;
          c: $accent 0 $t;
          &::before {
            content: "";
            pos: 0 0 0 0;
            opacity: 0.15;
            position: absolute;
            radius: 3px;
            c: 0 0 $accent;
          }
          &:hover { c: $white 0 $accent }
        }
      }

      /// Mention bar.
      .isMentioned-N-h9aa {
        position: relative;
        margin: 0;
        c: 0 0 $t;
        &::before {
          opacity: 0.25;
          z-index: -1;
          content: '' i;
          position: absolute;
          pos: 0 0 0 0;
          radius: 3px;
          c: 0 $t $green;
        }
      }

      /// Message dividers.
      [class*="divider-"] {
        /// Feat -> Enable message dividers.
        if ( msg_dividers != 1 ) {
          &[class *= 'dividerEnabled-'] { c: 0 $t }
        } else {
          &[class *= 'dividerEnabled-'] { c: 0 $darker }
        }
        /// Base styles.
        > [class *= 'dividerContent-'] {
          c: $lighter $darken;
          &::before, &::after { c: 0 0 $darker }
        }
        /// New messages.
        &[class *= 'dividerRed-'] > [class *= 'dividerContent-'] {
          c: $red;
          &::before, &::after { c: 0 0 $red }
        }
      }

      // * Invite embed.
      [class*="wrapper-"][class*="userSelectNone"] {
        radius: $radius;
        c: 0 $darker $darken;
        box-shadow: $bshadow;
        [class*="title-"], [class*="guildDetail-"] { c: $lighter }
        [class*="guildName-"] { c: $light }
        [class*="guildNameExpired-"] { c: $red }
        [class*="Outlined-"] {
          c: 0 $darker $darker;
          &:hover { opacity: 0.8 }
        }
      }

      // * Spotify party invite.
      [class*="invite-"][class*="container-"] {
        radius: $radius;
        c: 0 $darker $darken;
        [class*="coverImaageWrapper-"] { radius: 0 $radius $radius 0; }
        [class*="helpIcon-"] { c: 0 0 $darker }
        [class*="header-"] { c: $lighter }
        [class*="partyStatus-"], [class*="textLink-"] { c: $light }
      }

      // * Typing section.
      [class^="typing"] {
        c: $light 0 $t;
        [class^="text"], [class^="cooldownWrapper"] { c: $lighter }
        [class^="text"] strong { c: $light }
      }

      // * Voice/video calls.
      [class^="video"] {
        c: 0 0 $dark;
        box-shadow: 0 8px 16px 0 $shadow;
      }
      /// Announcements 'follow' bar or 'you must be a member'.
      [class *= 'form-'] {
        > [class *= 'wrapper-'] {
          c: 0 0 $darker;
          box-shadow: $bshadow;
          [class *= 'content-'], h3 { c: $$light }
          span { c: $lighter }
        }
      }
    }
  }

  /// Inputbar.
  [class *= 'channelTextArea-'] {
    c: 0 $darker;
    /// Fix rounded corners.
    > div { radius: $radius i }
    // Input container.
    [class *= 'inner-'] {
      border: 1px solid $darker;
      radius: $radius;
      c: 0 0 $darken;
      ../[class*="hasAutocomplete-"] [class *= 'inner'] {
        radius: 0 0 $radius $radius;
      }
      [class *= 'buttons-'] { align-self: center }

    }
    [class *= 'attachWrapper-'] { c: 0 $darker }
    // Input text color.
    [class *= 'placeholder-'], textarea { c: $lighter }
    [class *= 'slateTextArea-'] { c: $light }
    // Dividers.
    [class*="divider"], [class*="Divider"] { c: 0 0 $darker }
    // ? Emojis, mentions, commands popout.
    [class*="autocomplete-"][class*="autocomplete-"] {
      c: 0 0 $darken;
      radius: $radius $radius 0 0;
      // box-shadow: inset 0 0 0 1px $darker;
      border: 1px solid $darker;
      border-bottom: none;
      [class*="header-"] {
        box-shadow: 0 1px $darker;
        [class*="backButton-"], [class*="title-"] { c: $light }
        [class*="searchBar-"] {
          c: 0 0 $dark;
          box-shadow: inset 0 0 0 1px $darker;
          input[class] { c: $light $darker $dark }
        }
      }
      [class*="content-"] {
        [class*="result-"] {
          &::after { radius: $radius; }
          &:hover::after {
            box-shadow: inset 0 0 0 2px $accent, inset 0 0 0 3px $dark;
          }
          [class*="gif-"] { radius: $radius }
        }
        [class*="Fade-"] {
          opacity: 0.8;
          radius: $radius;
          c: 0 0 $darker;
        }
        [class*="FadeBlurple-"] {
          opacity: 0.8;
          radius: $radius;
          c: 0 0 $accent;
        }
        [class*="emptyHintCard-"] {
          radius: $radius;
          c: $light 0 $darker;
        }
        [class*="Text-"] { c: $lighter }
      }
      [class*="autocompleteInner-"] {
        border: none !important;
        // Command mode icons.
        [class*="iconForeground"] { v: $light }
        // Title/description selectors.
        [class*="Title"], [class*="description"] { c: $lighter }
        [class*="contentTitle"] strong { c: $light }
        // Main content.
        [class*="content-"] { c: $light }
        [class*="selectorSelected-"] { c: 0 0 $darker }
      }
    }
    /// Rich markdown.
    [class *= 'fakeLink-'] { c: $accent }
    [class *= 'codeBlockLang-'] { c: $green }
    [class *= 'Syntax-'], [class *= 'After-'], [class *= 'Before-'] { c: $lighter }
    [class *= 'inlineCode-'] {
      font-family: var(--codearea);
      c: 0 0 $darker;
    }
  }

  // Embeds.
  [class ^= 'embedWrapper-'] {
    c: $light 0 $darken;
    /// Base text.
    [class *= 'Provider-'], [class *= 'Description-'] {
      c: $lighter;
      a { c: $accent }
    }
    /// Fields.
    [class *= 'FieldName-'] { c: $light }
    [class *= 'FieldValue-'] { c: $lighter }
    /// Titles.
    [class *= 'Title-'], [class *= 'AuthorName-'] { c: $light }
    /// Links.
    [class *= 'TitleLink-'] { c: $accent }
    /// Left bar.
    &[class *= 'Full-'] { c: 0 $darker }
    &:not([style]) { c: 0 $darker }
    &[style *= 'rgb(255\, 0\, 0)'] { c: 0 $red }
    &[style *= 'rgb(30\, 35\, 39)'] { c: 0 $orange }
    &[style *= 'rgb(255\, 255\, 255)'] { c: 0 $lighter }
  }

  // * Emote menu.
  [class*="emojiPicker-"] {
    radius: $radius;
    c: $lighter $darker $dark;
    box-shadow: 0 0 0 1px $darker, $bshadow;
    // Header.
    [class*="header-"] {
      box-shadow: 0 1px $darker;
      input { c: $light }
      [class*="searchBar-"] { c: 0 0 $darken }
    }
    // Frequently used.
    [class*="stickyHeader-"] { c: 0 0 $dark }
    [class*="category-"], [class*="sadImage-"] + div { c: $lighter }
    // Selected emote.
    [class*="row-"] [class*="selected-"] { c: 0 0 $accent }
    // Selected category.
    [class*="categories-"] {
      c: 0 0 $darker;
      [class*="item-"] {
        &[class*="selected-"] { c: 0 $accent }
        &:hover { c: 0 $darker }
      }
    }
    // Dimmed overlay.
    [class*="visible-"]:not([class*="icon-"] ) {
      opacity: 0.8;
      c: 0 0 $dark;
    }
    // Diversity selector.
    [class*="popout-"] {
      padding: 2px;
      c: 0 $darker $dark;
      box-shadow: 0 2px 4px -1px $shadow;
      [class*="item-"]:hover { c: 0 0 $darker }
    }
    /// Scrollbars -> Fix thumb height.
    [class *= 'thumb-'] { min-height: 14px }
    // ? Fix 'no matching emoji' image.
    [class*="sadImage-"] {
      filter: invert(calc((var(--icinvert)) + 0.8)) !important;
    }
    [class *= 'infoBar-'] {
      c: 0 0 $darken;
      [class *= 'EmojiName-'] { c: $light }
      [class *= 'GuildName-'] { c: $lighter }
    }
  }

  // * Store page.
  [class^="applicationStore-"] {
    c: 0 0 $dark;
    [class*="headerBar-"] {
      c: 0 0 $dark;
      box-shadow: 0 1px 0 0 $darker;
      [class*="title-"] { c: $light }
    }
    // * Header.
    [class*="premiumApplicationsHeader-"],
    [class*="distributionApplicationsActions-"] {
      c: $light $darker;
      [class*="viewAllGames-"] { c: $light }
      [class*="announcing"] {
        font-weight: bold !important;
        c: $red;
      }
    }
    // Links.
    [class*="announcing"] { c: $accent }
    [class*="tilePrice-"] {
      [class*="originalAmount-"] { c: $lighter }
    }
    // "First on Discord" deals.
    [class*="gameTitle-"] { c: $light }
    [class*="tagline-"] { c: $lighter }
    [class*="priceOSSection-"] { c: $light }
    // ? "First on Discord" cards.
    [class*="tileWrapper-"] {
      > [class*="tileMedia-"][class*="tile-"] {
        c: 0 0 $dark;
        &:hover { box-shadow: 0 9px 20px 0 $shadow; }
        > figure[class*="splashContainer-"] { c: 0 0 $t }
        > dif[class*="mediaFade-"] {
          background: linear-gradient(180deg, $t 90%, $darker);
        }
        [class*="description-"] {
          background: linear-gradient(180deg, $t, $darker 45%, $darker);
        }
        [class*="tag-"] {
          background-image: linear-gradient(90deg, $accent, $darker);
          &::before { filter: grayscale(100%) opacity(0.2); }
        }
      }
    }
    // ? Other cards.
    [class*="applicationTile-"] {
      transition: background-color 0.2s ease, box-shadow 0.2s ease;
      &:hover { box-shadow: 0 9px 20px 0 $shadow; }
    }
  }

  // * Shared pages.
  [class^="activityFeed-"], [class^="gameLibrary-"] {
    c: 0 0 $dark;
    [class*="headerBar-"] {
      c: 0 0 $dark;
      box-shadow: 0 1px 0 0 $darker !important;
      [class*="title-"] { c: $light }
    }
    [class*="emptyStateText-"] {
      [class*="Header-"] { c: $light }
      [class*="Description-"] { c: $lighter }
    }
  }

  // Activity page.
  [class *= 'activityFeed-'] {
    > [class *= 'container-']::before { content: none }
    /// Title-bar.
    [class *= 'container-'] {
      c: $lighter $darker $dark;
      box-shadow: 0 1px $darker;
      [class *= 'children-'] {
        &::after { background: none }
        [class *= 'title-'] { c: $light }
      }
    }
    /// Cards.
    [class *= 'placeholderWrapper-'], article[class *= 'wrapper-'] {
      c: $light $darker $darken;
    }
    /// Content.
    div[class *= 'card-'][class *= 'card'] {
      radius: $radius;
      c: 0 0 $darken;
      &[class *= 'interactive'] { box-shadow: inset 0 0 0 1px $darker }
      [class *= 'imageWrapper-'] { radius: $radius $radius 0 0; }
      [class *= 'coloredBackground-'] {
        c: 0 0 $t;
        background-image: url('/assets/0858a3392fd80f98d8957ad7c3e195d3.svg');
      }
      [class *= 'colorStandard-'] { c: $light }
      [class *= 'colorMuted-'] { c: $lighter }
      [class *= 'colorWhite-'] { c: 0 $accent $accent }
      [class *= 'whiteButton-'] { c: $white }
      > [class *= 'wrapper-'] { box-shadow: inset 0 1px $darker }

    }
    /// Activities.
    aside {
      h5 { c: $lighter }
      > [class *= 'wrapper-'] {
        radius: $radius;
        c: 0 $darker $darken;
        [class *= 'header-'] { c: $light }
        [class *= 'body-'] { c: $lighter }
      }
      [class *= 'popoutContainer-']:hover { c: 0 0 $darker }
    }
    /// Popout.
    [class *= 'hideOnMouseLeave-'] {
      border: 1px solid $darker;
      c: 0 0 $dark;
      box-shadow: $bshadow;
      h3 { c: $lighter }
      [class *= 'ListItem-']:hover {
        &:not([class *= 'Disabled-']) { c: 0 0 $darken }
      }
    }
  }

  // Sidebar -> Private channels.
  [class^="privateChannels-"] {
    c: 0 0 $t;
    /// Headers.
    [class *= 'header'] {
      c: $lighter;
      box-shadow: none !important;
    }
    /// Channels.
    [class^="channel-"] {
      c: $light;
      /// Text.
      [class^="name-"] { c: $light }
      [class^="activity-"] { c: $lighter }
      /// Different states.
      &:hover, &:active, &[class*="selected-"] {
        > * {
          c: 0 0 $darker;
          [class*="name-"] { c: $light }
          [class*="status-"] { c: 0 $darker }
        }
      }
      /// Fade similarly to guild channels.
      &:not(:hover):not([class*="selected-"]) {
        [class *= 'name-'], [class *= 'activity-'] { opacity: 0.6 }
      }
    }
  }

  // Chat -> Search results.
  [class *= 'searchResultsWrap-'] {
    border-left: 1px solid $darker;
    c: 0 0 $dark;
    [class *= 'searchHeader-'] {
      c: 0 0 $darken;
      box-shadow: inset 0 -1px $darker !important;
      /// Text.
      [class *= 'totalResults-'] {
        opacity: 1;
        c: $lighter;
      }
      /// Tabs.
      [class *= 'tab-'] {
        opacity: 1;
        c: $lighter;
        border-width: 1px !important;
        &:hover { c: $light $t }
        &[class *= 'selected-'] { c: $light $accent }
      }
    }
    [class *= 'resultsWrapper-'] {
      /// Name and separator.
      [class *= 'channelSeparator-'] {
        &::before { c: 0 $darker }
        [class *= 'channelName-'] { c: $light 0 $dark }
      }
      /// Single result.
      [class *= 'searchResult-'] {
        overflow: unset !important;
        &[class *= 'expanded-'] {
          radius: $radius;
          border-width: 1px;
          c: 0 $darker;
          > div:last-of-type {
            border-top-width: 1px;
            radius: 0 0 $radius $radius !important;
          }
        }
        /// Remove msg gradients.
        &::before, &::after { content: none !important; }
        /// Matching message.
        [class *= 'hit'] {
          border-width: 1px !important;
          c: 0 $darker $darken;
          box-shadow: $bshadow;
          ../:not([class *= 'expanded-']) [class *= 'hit'] { radius: $radius }
        }
        [class *= 'jumpButton-'] { c: $light 0 $darker }
        [class *= 'timestamp'] { c: $lighter }
        [class *= 'markup-'] {
          c: $light;
          [class *= 'anchor-'] { c: $accent }
          &[class *= 'embed-'] { c: 0 0 $dark }
        }
      }
      /// Pages.
      [class *= 'pagination-'] {
        padding-bottom: 10px;
        c: $lighter;
        > div[class] {
          c: $light;
          background: none;
          transform: unset;
          &::before { padding: 4px 8px }
          &:not([class *= 'disabled-']) { opacity: 1 }
          &[class *= 'Next-']::before { content: '→' }
          &[class *= 'Previous-']::before { content: '←' }
        }
      }
    }
  }

  // * Gifted Nitro wrapper.
  [class*="applicationTile-"] {
    c: 0 0 $darker;
    box-shadow: 0 0 0 $shadow;
    [class*="description-"] {
      c: $lighter;
      [class*="gameTitle-"] { c: $light }
      [class*="tagline-"], [class*="metadata-"] { c: $lighter }
    }
  }

  /// Code blocks.
  [class*="markup-"] {
    line-height: 1.5;
    code {
      font-family: var(--codearea) !important;
      &.inline {
        padding: 2px 4px;
        c: 0 0 $darken;
        box-shadow: inset 0 0 0 1px $darker;
      }
    }
    pre {
      radius: $radius;
      c: 0 $darker $darken;
      border-width: 1px !important;
      box-shadow: 0 2px 4px 0 $shadow;
      code {
        radius: $radius;
        c: $light $darker $t;
        // Feat -> Code line numbers.
        if ( code_ln == 1 ) {
          position: relative;
          padding-left: 2.5em i;
          &::before {
            width: 2ch;
            opacity: 0.3;
            overflow-y: hidden;
            position: absolute;
            pos: 0.5em 0 0.5em 0;
            padding: 0 0.25em 0 1em;
            white-space: pre-line;
            text-align: right;
            c: $light;
            content: '1 2 3 4 5 6 7 8 9 10'  \
             '11 12 13 14 15 16 17 18 19 20' \
             '21 22 23 24 25 26 27 28 29 30' \
             '31 32 33 34 35 36 37 38 39 40' \
             '41 42 43 44 45 46 47 48 49 50' \
             '51 52 53 54 55 56 57 58 59 60' \
             '61 62 63 64 65 66 67 68 69 70' \
             '71 72 73 74 75 76 77 78 79 80' \
             '81 82 83 84 85 86 87 88 89 90' \
             '91 92 93 94 95 96 97 98 99';
          }
        }
      }
    }
    // Syntax highlighting.
    .hljs {
      &-name, &-title, &-section { c: $blue }
      &-selector-class, &-selector-id { c: $blue }
      &-attr, &-attribute, &-type { c: $orange }
      &-class, &-template-variable, &-variable { c: $orange }
      &-built_in, &-deletion { c: $red }
      &-doctag, &-literal, &-meta &-meta-string { c: $cyan }
      &-number, &-regexp, &-string { c: $cyan }
      &-addition, &-keyword, &-selector-tag { c: $green }
      &-comment, &-quote { c: $light }
    }
  }

  // Global -> QuickSwitcher.
  [class *= 'quickswitcher-'] {
    [class *= 'scroller-'] { c: 0 0 $t }
    &:not([class *= 'channelNotice-']) {
      border: 1px solid $darker;
      c: $light 0 $dark;
      box-shadow: 0 4px 8px $shadow;
    }
    /// Inputbox.
    [class *= 'input'] {
      padding: 16px;
      height: unset;
      line-height: unset;
      border: 1px solid $darker;
      c: $light 0 $darken;
      box-shadow: $bshadow;
      &:focus { c: 0 $accent }
    }
    /// Results.
    [class *= 'result-'] {
      &[class *= 'Focused-'] {
        radius: $radius;
        c: 0 0 $darken;
      }
      /// Unread messages badge.
      [class *= 'badge-'] {
        c: $white 0 $accent;
        box-shadow: 2px 2px $darker;
      }
      /// Text.
      [class *= 'misc-'], [class *= 'note-'] { c: $lighter }
      [class *= 'Unread-'] [class *= 'match-'] { c: $light }
      [class *= 'Default-'] [class *= 'match-'] { c: $lighter }
    }
    /// Footer.
    [class *= 'tipsWithResults-'] {
      c: 0 $darker;
      [class *= 'tips'] { c: $lighter }
    }
    /// Keybinds.
    [class *= 'keybindShortcut-'] {
      &::before { c: 0 0 $darker }
      span {
        c: $lighter $darker $darken;
        box-shadow: inset 0 -4px 0 $darker;
        [class *= 'bindArrow-'] > g { v: $lighter }
      }
    }
  }

  // Global -> Context menu.
  [class*="contextMenu-"] {
    radius: $radius;
    c: 0 0 $dark;
    box-shadow: 0 2px 4px -1px $shadow, 0 0 0 1px $darker !important;
    [class*="itemGroup-"] {
      c: 0 $darker;
      [class*="item-"] {
        radius: 0;
        c: $lighter;
        &:hover { c: $light 0 $darken }
      }
      [class *= 'label-'] { c: $lighter }
    }
    // Fix scrolllbars.
    [class*="firefoxFixScrollFlex-"] {
      overflow-x: hidden;
      radius: $radius;
      // ! Ugh... Native scrollbars. )=
      [class*="scroller-"] + [class*="scrollbar-"] {
        // top: 1px; right: 1px; bottom: 1px;
        radius: 0 $radius $radius 0;
      }
    }
  }

  // * ReactSelect dropdown.
  .Select {
    &-control { c: $lighter $darker $dark }
    &-value-label { c: $lighter }
  }
  // Modals -> Notifications overrides.
  div[class*="select-"] > [class*="-container"] {
    > [class*="-control"] {
      c: 0 $darker $darken;
      transition: 0.15s ease;
      [class*="-placeholder"] {
        opacity: 1;
        c: $lighter;
      }
      &:hover { box-shadow: 0 2px 4px 0 $shadow }
    }
    > [class*="-menu"] {
      c: 0 $darker $dark;
      box-shadow: 0 2px 4px 0 $shadow;
      > * { c: 0 0 $darken }
      // Selected item.
      [class*="-1gnr91b-"], [class*="-option"]:hover { c: 0 0 $darker }
    }
  }

  // Global -> Select dropdown component.
  [class *= 'select-'][role] {
    c: $fg $darker $dark;
    /// Custom status popout.
    /[class *= 'popouts-'] .popout-2sKjHu {
      c: 0 $darker $dark;
      [class *= 'option-'] {
        c: $light;
        &:hover, &[class *= 'optionActive-'] { c: 0 0 $darken }
      }
    }
  }

  // Popouts -> Recent mentions.
  [class *= 'messagesPopoutWrap-'] {
    radius: $radius;
    c: $light $darker $dark;
    box-shadow: 0 4px 8px $shadow !important;
    [class *= 'messagesPopout-'] { c: 0 0 $t }
    /// Header.
    > [class *= 'header-'] {
      c: 0 0 $darken;
      box-shadow: inset 0 -1px $darker;
      [class *= 'title-'] { c: $light }
      /// Tabs.
      [class *= 'tabBarItem-'] {
        border-bottom-width: 1px;
        &[style *= 'tr'] { c: $lighter }
        &:not([style *= 'tr']) { c: $light $accent }
      }
      /// Filters.
      [class *= 'mentionFilter-'] {
        [class *= 'label-'] { c: $lighter }
        [class *= 'value-'] { c: $light }
      }
    }
    [class*="channelSeparator-"] {
      [class*="channel"] { c: $light }
      [class*="guild"] { c: $lighter }
    }
    [class^="messageGroupWrapper-"] {
      radius: $radius;
      c: $light $darker $darken;
      box-shadow: 0 2px 8px 0 $shadow;
      [class*="Meta-"] *:not([class*="username-"]) { c: $lighter }
      [class *= 'markup-'] > a[class *= 'anchor-'] { c: $accent }
      [class*="markup-"], [class*="embed"] {
        c: $light;
        &::before, &::after { display: none }
        .mention {
          radius: 3px;
          c: $white 0 $accent;
        }
      }
    }
    [class^="jumpButton"] { c: $light $t $darker }
    [class^="actionButtons"] {
      transition: none !important;
      c: $light $t $t;
      box-shadow: none !important;
    }
    [class*="emptyPlaceholder-"] [class*="body-"] { c: $lighter }
    [class*="footer-"][class*="footer-"] {
      c: 0 0 $darken;
      box-shadow: inset 0 1px $darker;
      [class *= 'statusGreen-'] { c: $green }
      [class*="tip-"] { c: $light }
    }
  }

  // * Settings.
  [class*="standardSidebarView-"] {
    c: 0 0 $dark;
    // * Sidebar.
    [class*="sidebarRegionScroller-"] {
      c: $lighter 0 $t;
      [class*="separator-"] { c: 0 0 $darker }
      [class*="header-"] { c: $lighter }
      // Menu items!
      [class*="item-"] {
        radius: $radius;
        transition: 0.15s ease;
        c: $lighter;
        &[class*="selected-"] { c: $white 0 $accent }
        &:hover:not([class*="selected-"]) { c: $light 0 $darker }
        // Nitro.
        &[style*="rgb(114"] {
          c: $blue 0 $t;
          &:hover { c: $white 0 $blue }
        }
        // Logout.
        &[style*="rgb(240"] {
          c: $red;
          &:hover { c: $white 0 $red }
        }
      }
    }
    // * Main content.
    [class*="contentRegion-"] {
      c: 0 0 $dark;
      box-shadow: inset 1px 0 $darker;
    }
    [class*="contentRegionScroller-"] {
      c: $light 0 $dark;
      box-shadow: inset 1px 0 $darker;
      // Text colors.
      [class*="titleDefault-"], [class*="title-"] { c: $lighter }
      [class*="description-"] {
        c: $light;
        [class*="anchor-"] { c: $accent }
      }
      [class*="divider-"] { c: 0 $darker $t }
      [class*="value-label-"] { c: $light }
      // Buttons.
      [class*="removeButton-"] {
        c: $lighter;
        &:hover { c: $red }
      }
      // ? User info.
      [class*="userInfo"][class*="cardPrimary-"] {
        radius: $radius;
        c: 0 $darker $darken;
        small { c: $lighter }
        [class*="viewBody-"] {
          c: $light;
          span[style*="opacity"] { opacity: 1 !important }
        }
        [class*="faded-"] { c: $lighter }
        [class*="avatarUploaderInner-"] {
          c: 0 0 $darker;
          &:hover { box-shadow: none }
          // Avatar container.
          > div:first-child {
            opacity: 0;
            radius: 50%;
            visibility: visible;
            c: $white 0 $darker;
            transition: 0.15s ease-in;
            ../:hover > div:first-child { opacity: 0.9 }
          }
        }
      }
      [class*="avatarUploaderIndicator-"] {
        c: 0 0 $darker;
        box-shadow: 0 2px 4px 0 $shadow;
      }
      // ? Consent element.
      [class*="consent-"] {
        radius: $radius;
        c: 0 $darker $dark;
        box-shadow: 0 0 0 1px inset $darker;
        [class*="title-" i] { c: $light }
        [class*="body-" i] { c: $lighter }
      }
      // ? Select component.
      [class*="-control"] {
        c: $lighter $darker $dark;
        div { color: inherit }
        + [class*="-menu"] {
          c: 0 $darker $dark;
          box-shadow: 0 2px 4px 0 $shadow;
          span { c: $lighter }
          [class*="-option"]:hover, [class*="12o7ek3"] {
            c: 0 0 $darker;
            span { c: $light }
          }
        }
      }
      // Add role button.
      [class*="actionButton-"] {
        transition: 0.15s ease;
        c: $lighter $darker $dark;
        &:hover { c: 0 0 $darker }
        svg path { v: $lighter }
      }
    }
    [class *= 'sidebarScrollable-'] [class *= 'scroller-'] { c: 0 0 $t }
    // * Close button.
    [class*="closeButton-"] {
      c: 0 $darker;
      transition: 0.2s ease;
      &:hover { c: 0 0 $darker }
      path[fill*="#dcddde"] { v: $lighter }
      + [class*="keybind"] { c: $lighter }
    }
    // * Audit log.
    [class*="auditLog-"] {
      c: $lighter $darker 0;
      // Different headers.
      [class*="headerClickable"] { c: $lighter 0 $dark }
      [class*="headerExpanded"] { c: $lighter 0 $darker }
      // Text colors.
      [class*="userHook-"] {
        strong, > span:first-child, { c: $light }
      }
      // Metadata.
      [class*="changeStr-"], [class*="timeWrap-"] {
        &, strong { c: $light }
      }
      // Discriminators and secondary text.
      [class*="discrim-"], [class*="timestamp-"] {
        opacity: 1;
        c: $lighter
      }
      // Colors.
      [class*="typeUpdate-"] { c: $yellow }
      [class*="typeCreate-"] { c: $green }
      [class*="typeDelete-"] { c: $red }
    }
    // Change server region.
    [class*="container-"][role="button"] {
      c: 0 $darker $dark;
      [class*="name-"] { c: $light }
      [class*="button-"] {
        radius: $radius;
        &[class*="colorGrey-"] { c: $lighter 0 $darker }
        ../ [class*="button-"] { c: $light 0 $darker }
      }
    }
    // Connected accounts.
    [class*="connectedAccounts-"] button[class] {
      radius: $radius;
      c: 0 $darker $darker;
      &:hover { transform: translateY(4px) }
    }
    // Confirm/reset the settings.
    [class*="elevationHigh-"] {
      &[style*="rgba(32"] {
        c: 0 0 $darker;
        box-shadow: 0 2px 8px 0 $shadow;
        [style*="rgb(255"] { c: $light }
      }
      &[style*="rgba(24"], &[style*="rgb(29"] {
        c: 0 0 $red;
        box-shadow: 0 2px 8px 0 $shadow;
        [style*="rgb(255"] { c: $white }
      }
    }
    // Connected accounts.
    [class*="elevationLow-"] {
      box-shadow: 0 2px 8px 0 $shadow;
      &[style*="background-color: rgb(0\, 154"] { c: 0 0 $cyan }
      &[style*="background-color: rgb(203\, 33"] { c: 0 0 $red }
      &[style*="background-color: rgb(29\, 161"] { c: 0 0 $blue }
      &[style*="background-color: rgb(29\, 185"] { c: 0 0 $green }
      &[style*="background-color: rgb(89\, 54"] { c: 0 0 $violet }
      &[style*="background-color: rgb(24\, 35"] { c: 0 0 $magenta }
      > [class*="Header-"] {
        radius: $radius $radius 0 0;
        c: 0 $shadow #00000010;
      }
      [class*="titleDefault-"], [class*="description-"] { c: $white 0 0 }
    }
  }

  // * Emoji section.
  [class*="emojiRow-"] {
    &::before { c: 0 $shadow $dark }
    // Text color.
    [class*="emojiAliasPlaceholder-"] {
      c: $lighter;
      &::before, &::after { c: $light }
    }
    [class*="emojiRowText-"] { c: $light }
    // Input fields.
    input {
      transition: 0.2s ease !important;
      c: $lighter $darker $dark;
      &:hover, &:focus { c: $light 0 $darker }
    }
  }

  // * Cards.
  [class*="card-"]{
    c: 0 $darker $darker;
    [class*="title-"], [class*="primary-"] { c: $light }
    [class*="desc-"] { c: $lighter }
    [class*="anchor-"] { c: $accent }
    [class*="checkbox-"] {
      c: 0 $darker $dark;
      &[class*="checked-"] { c: 0 0 $dark }
    }
    &[class *= 'codeRedemptionRedirect-'] { c: $light 0 $darken }
    // Main cards.
    &[class*="cardPrimary"] {
      radius: $radius;
      c: 0 $darker $darken;
      &[style*="114\, 137\, 218"] { c: 0 $accent }
    }
    // Colorized cards.
    &[style*="rgb(67"] { c: 0 $green $green }
    &[style*="rgb(114"] { c: 0 $accent $accent }
    &[style*="rgb(250"] { c: 0 $yellow $yellow }
    &[style*="rgb(245"] { c: 0 $orange $orange }
    &[style*="rgb(240"] { c: 0 $red $red }
    // Colorized cards text.
    [class*="title-"][style*="rgb(67"] { c: $green }
    [class*="title-"][style*="rgb(250"] { c: $yellow }
    [class*="title-"][style*="rgb(245"] { c: $orange }
    [class*="title-"][style*="rgb(240"] { c: $red }
    &[style*="rgb("] > [class*="info-"] > * { c: $white }
    // Various table elements.
    &[class*="member-"],
    &[class*="emojiRow-"],
    &[class*="sInviteRow-"],
    &[class*="bannedUser-"] {
      c: 0 0 $t;
      box-shadow: 0 1px 0 0 $darker;
      [class*="code-" i], [class*="name-" i] { c: $light }
      [class*="tag-"], [class*="roleName-"] { c: $lighter }
      &::before {
        radius: $radius;
        c: 0 $darker $darken;
        box-shadow: 0 2px 4px 0 $shadow;
      }
    }
  }

  // Global -> Buttons.
  [class *= 'button-'] {
    &[class *= 'Link-'] {
      &[class *= 'Grey-'] { c: $lighter }
      &[class *= 'Brand-'] { c: $accent }
      &[class *= 'White-'] { c: $lighter }
      &[class *= 'Primary-'] { c: $light }
      &:hover > div {
        background-image: none !important;
        opacity: 0.8 !important;
      }
    }
    &[class *= 'Inverted-'] {
      &[class *= 'Brand-'] { c: $white 0 $accent }
      &[class *= 'Green-'] { c: $white 0 $green }
      &[class *= 'Purple-'] { c: $white 0 $violet }
      &:hover { opacity: 0.8 !important }
    }
    &[class *= 'Outlined-'] {
      &[class *= 'Red-'] { c: $red $red }
      &[class *= 'Brand-'] { c: $accent $accent }
      &[class *= 'White-'] { c: $lighter $lighter }
      &[class *= 'Primary-'] { c: $light $lighter $darken }
      &:hover { opacity: 0.8 !important }
    }
    &[class *= 'Filled-'] {
      transition: all 0.15s ease;
      &[disabled] { c: $light $darken $darken }
      &[class *= 'Primary-'] { c: $light 0 $darken }
      &[class *= 'Brand-'] { c: $white 0 $accent }
      &[class *= 'Green-'] { c: $white 0 $green }
      &[class *= 'White-'] { c: $white $white }
      &[class *= 'Grey-'] { c: $light 0 $darker }
      &:not([disabled]):hover { opacity: 0.8 !important }
    }
  }

  // * Deprecated elements.
  .form.deprecated {
    .header {
      c: 0 0 $dark;
      h1 { c: $light }
      input[type=text] {
        c: $lighter $darker $darker;
        box-shadow: 0 2px 1px 0 $shadow !important;
      }
    }
    .form-inner { c: 0 0 $darker }
    .footer { c: $lighter $shadow $darker }
    a { c: $accent }
  }
  // * Create/join another server.
  [class*="animator-"][class*="fixClipping-"] {
    c: 0 0 $t;
    [class*="modal-"][class*="slide-"][class*="size-"] {
      c: 0 0 $darker;
      box-shadow: 0 2px 8px -1px $shadow !important;
      [class*="action-"] {
        background: none !important;
        c: 0 $shadow $dark;
        box-shadow: 0 2px 8px 0 $shadow;
      }
      [class*="actionBody-"] { c: $lighter }
      [class*="or-"] { background-image: none !important; }
    }
  }

  // Settings -> Billing.
  [class *= 'paymentPane-'] {
    border: 1px solid $darker;
    c: $light 0 $darken;
    [class *= 'bottomDivider-'] { c: 0 $darker }
    [class *= 'paginator-'] {
      c: $lighter 0 $t;
      [class *= 'anchor-'] { c: $accent }
      [class *= 'date-'], [class *= 'amount-'] { c: $lighter }
      [class *= 'expand-'] path { stroke: $lighter }
      [class *= 'payment-'] { c: $light 0 $t }
      [class *= 'expandedInfo-'] {
        c: $light 0 $darker;
        [class *= 'Header-'], [class *= 'Text-'] { c: $light $darken }
      }
    }
    [class *= 'scrollbar-'] {
      &, [class *= 'pad-'] { c: 0 0 $darken }
    }
  }

  // Global -> Pagination.
  [class *= 'pageActions-'] {
    [class *= 'pageButton'] {
      c: 0 $darker;
      &:hover { c: 0 0 $darker }
    }
    [class *= 'pageIndicator-'] { c: $light $darker }
  }

  // Global -> Indicators.
  [class *= 'indicator-'] {
    &[class *= 'defaultIndicator-'] { c: $light 0 $darker }
    &[class *= 'premiumIndicator-'] { c: $white 0 $accent }
  }

  // Global -> Placeholders.
  [class *= 'membersWrap-'] {
    [class *= 'Placeholder-'],
    [class *= 'placeholderAvatar-'],
    [class *= 'placeholderUsername-'] {
      c: 0 0 $darker;
    }
  }

  // * Input bar max-height setting.
  [class*="channelTextArea-"] textarea[class*="textArea-"] {
    max-height: var(--textarea);
  }

  // Feat -> Message padding.
  if ( msg_padding == 1 ) {
    [class *= 'messages-'] {
      > [class *= 'containerCozy-'] {
        padding: 10px 0;
      }
      [class *= 'dividerContent-'] { line-height: 10px }
      hr { margin: 10px 20px -10px !important }
    }
  }

  // Feat -> Compact cozy messages.
  if ( compact_cozy == 1 ) {
    [class *= 'chatContent-'] [class *= 'containerCozyBounded-'] {
      padding: 0px 10px 0px 10px;
      /// Fix dividers.
      [class *= 'divider'] { margin: auto 10px !important; }
      /// Avatars.
      div[class *= 'avatar-'] {
        margin: 0 8px;
        border-radius: 50%;
        box-shadow: 0 0 0 2px $darker;
        /// Override inline styles.
        > div[style] {
          width: 16px i;
          height: @width;
        }
      }
      /// Message content.
      [class *= 'contentCozy-'] {
        margin-left: 12px;
        /// Default message arrows.
        if ( compact_lines != 1 ) {
          [class *= 'markup-']::before {
            opacity: 0.25;
            content: "⤷ ";
          }
        }
      }
    }
  }

  // Feat -> Smaller guild icons.
  if ( mid_guilds == 1 ) {
    $size = guild_size;
    // ? Set the width of guilds wrapper.
    [class *= 'guilds-'] {
      width: ($size + 20px);
      // ? Increase width to account for scrollbar polyfill.
      > [class*="wrap-" i] { width: ($size + 40px); }
      // Separators.
      [class*="separator-" i] { width: $size; }
      // Mentions bar.
      [class*="unreadMentionsIndicator"] {
        padding: 4px !important;
        [class*="bar-"] {
          width: ($size + 12px) !important;
        }
      }
      // Folders!
      > div[class] > div[class] > [class*="wrapper-"] {
        c: 0 0 $t;
        [class*="FolderBackground-"] {
          left: 10px;
          width: $size;
          radius: 16px;
          // Folder wrapper reset.
          &[class*="collapsed-"] { c: 0 0 $dark }
          &:not([class*="collapsed"]) {
            c: 0 0 $dark;
            box-shadow: 0 0 0 2px $dark, 0 0 0 4px $darker;
            // Remove folder background when expanded.
            + [class*="listItem-"] foreignObject {
              radius: 16px;
              [class*="folder-"]:not(#zz) { c: 0 0 $t }
            }
          }
        }
        [class*="listItem-"] {
          > [draggable] {
            // Folder size.
            [class*="wrapper-"], svg {
              width: $size;
              height: $size;
            }
            // Folder/badge resets.
            [class*="folder-"] { c: 0 0 $darker }
            [class*="badgeWrapper-"] [class*="lowerBadge-"] {
              right: 0 !important;
              top: ($size - 16px) !important;
            }
            // Avatar-less servers in folders.
            [class*="noIcon-"] { c: $light 0 $darker }
          }
        }
        // Reset servers within folders.
        [class*="expandedGuilds-"] {
          height: unset !important;
          [class*="pill-"] { top: 0 !important }
          [class*="blobContainer-"] [class*="wrapper-"] {
            width: unset;
            height: unset;
          }
        }
      }
      /// Fix base.
      + [class *= 'base-'] { left: ($size + 20px) }
    }
    // Guilds!
    [class*="listItem-"] {
      justify-content: flex-start;
      padding-left: 10px;
      [class *= 'listItemWrapper-'] > [class *= 'wrapper-'] {
        width: $size;
        height: $size;
      }
      /// Unread indicators.
      [class*="pill-"] {
        top: ($size / 6);
        [class*="item-"] {
          margin-left: -4px;
          // Hack for centering pill vertically.
          ../, &:not([style*="height: 8px"]) {
            height: ($size / 1.5) !important
          }
        }
      }
      // Home icon.
      &:first-child svg {
        width: $size;
        height: $size;
        &[class*="homeIcon-"] {
          max-width: ($size / 2 + 16px);
          max-height: @max-width;
        }
      }
      // Guild icons.
      [class*="blobContainer-"] {
        // margin-left: ($size / 18) !important;
        [class*="wrapper-"] {
          height: unset;
          width: unset;
        }
        &, [class*="wrapper"] > svg {
          width: $size;
          height: $size;
        }
      }
      // Circle/Error icons.
      [class*="circleButtonMask-"], [class*="guildsError-"] {
        &, [class*="svg-"] {
          width: $size;
          height: $size;
        }
      }
      [class*="guildsError-"] {
        c: $light $red $dark;
        &:hover { c: $white 0 $red }
      }
      /// Badges.
      [class *= 'upperBadge-'] { c: 0 0 $dark }
      [class *= 'lowerBadge-'] { top: ($size - 16px) !important }
      /// Unread messages.
      [class *= 'numberBadge-'],  {
        height: 14px !important;
        box-shadow: 0 0 0 3px $dark;
      }
      /// Voice chat.
      [class *= 'iconBadge-'] {
        c: 0 0 $green;
        box-shadow: 0 0 0 3px $dark;
        [class *= 'icon-'] path[fill] { v: $white }
      }
      /// DM icons.
      ~ div[style] {
        margin-bottom: 8px;
        height: $size !important;
        [class*="pill-"] { top: 0 }
        [class*="svg-"] , div[class*="wrapper-"] {
          height: $size !important;
          width: $size !important;
        }
      }
      /// Fix for dragging guilds.
      > [class *= 'pill-'] + [draggable = 'false'] svg {
        width: $size !important;
        height: $size !important;
        div { c: 0 0 $darker }
      }
    }
  }

  // Feat -> Replace images with their links.
  if ( disable_images == 1 ) {
    [class*="imageZoom-"] {
      height: auto !important;
      width: auto !important;
      &::after {
        color: $lighter;
        content: "URL: " attr(href);
      }
      img { display: none; }
    }
  }

  // Feat -> Unified header.
  if ( unified_header == 1 ) {
    // * Transparetinze title bar.
    [class*="base"] [class*="chat-"] > [class*="title-"] {
      c: 0 0 $t;
      box-shadow: 0 1px 0 0 $darker !important;
    }
    // ? Pseudo background for members section.
    [class*="searchResultsWrap-"]::before {
      content: "";
      position: absolute;
      top: -48px; right: 0; left: 0;
      height: 48px;
      c: 0 0 $darker;
    }
    // Fix upstream hidding the overflow.
    [class*="searchResultsWrap-"] { overflow: visible; }
    // ? Background should take over the header.
    // TODO: Move to a separate background option perhaps?
    [class*="content-"] > [class*="spacer-"][class*="vertical-"] {
      // overflow: visible;
      // Account for the height of the title bar.
      &::before { top: -50px; }
    }
  }

  // Feat -> Compact mode lines.
  if ( compact_lines == 1 ) {
    [class *= 'chatContent-'] [class *= 'containerCozyBounded-'] {
      /// Replace margins with padding.
      [class *= 'containerCozy-B4noqO']:not(:empty) {
        margin-bottom: 0;
        padding-bottom: 8px;
      }
      /// Visual lines.
      [class *= 'container-'] {
        position: relative;
        padding-left: 16px;
        // box-shadow: inset 1px 0 black;
        /// Vertical lines.
        &::before {
          pos: 0 f 0 2px;
          line: true false;
          // c: 0 $red;
        }
        /// Horizontal lines.
        &::after {
          size: 9px 10px;
          pos: -2px f f 2px;
          radius: 0 0 0 6px;
          line: true true;
          // c: 0 $cyan;
        }
        /// Fix missing space in code blocks.
        &[class *= '-B4noqO'] {
          &::before { bottom: -4px }
          &::after { content: unset }
        }
      }
      /// Reset visual lines.
      > *:nth-last-child(2) {
        /// Vertical line.
        [class *= 'containerCozy-336-Cz'] {
          &::before { content: unset }
        }
        /// Spotify invite.
        ../ [class *= 'invite-'],
        /// Last, empty message.
        [class *= 'containerCozy-B4noqO'] {
          &::before, &::after { content: unset }
        }
        /// System messages.
        &[class *= 'content-3dzVd8'] {
          *::before, *::after { content: unset }
        }
        /// Mentioned bar.
        ../ [class *= 'isMentioned-'] {
          &::after { background: none }
        }
      }
    }
  }

  // Feat -> Notification-free mode.
  if ( remove_notifications == 1 ) {
    [class*="wrapper-"] {
      // ? DMs/Mentions/Badges.
      [class*="friendsOnline-"] ~ [class*="container-"][style*="opacity"],
      [class*="unreadMentions"],
      [class*="container-"] [class*="badge-"] {
        display: none;
      }
      /// Global Discord alerts.
      + [class *= 'base-'] > [class *= 'notice']:first-child { display: none }
    }
    [class*="unread-"] [class*="bar-"],
    [class*="contentUnread"] [class*="iconSpacing-"] {
      display: none;
    }
  }

  // Feat -> Disable avatar context menu.
  if ( disable_acm == 1 ) {
    [class*="avatar-"] {
      img { text-indent: unset }
      * { pointer-events: unset }
    }
  }

  .emoji {
    /// Feat -> Smaller jumbo emotes!
    &.jumboable {
      width: 2.0rem;
      height: 2.0rem;
      min-height: 2.0rem;
    }
    /// Feat -> Larger reaction emotes.
    /[class *= 'reaction-'] & {
      height: 1.5rem;
      width: @height;
    }
  }

  // Feat -> Old font systems.
  if ( fix_fonts == 1 ) {
    [class *= 'messages'] {
      [class *= 'username-'] {
        font-weight: 500 !important;
      }
      [class *= 'markup-'] {
        font-size: 0.9375rem !important;
        font-weight: 400 !important;
        line-height: 1.3 !important;
        code.inline { font-size: 85% }
      }
    }
    input[class *= 'input-'],
    textarea[class *= 'textArea-'] {
      font-size: 0.9375rem !important;
    }
    ::placeholder { font-weight: 400 !important }
  }
  // Feat -> Sub-pixel rendering.
  if ( fix_pixels == 1 ) {
    * {
      text-rendering: optimizeLegibility !important;
      -webkit-font-smoothing: auto !important;
    }
  }
}
