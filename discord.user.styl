/* ==UserStyle==
@name         Dark-Discord
@namespace    gitlab.com/vednoc/dark-discord
@version      0.41.0
@description  Customizable dark theme for Discord.
@author       vednoc
@homepageURL  https://gitlab.com/vednoc/dark-discord
@supportURL   https://gitlab.com/vednoc/dark-discord/issues
@updateURL    https://gitlab.com/vednoc/dark-discord/raw/master/discord.user.styl
@preprocessor stylus

@var checkbox next         '[Dev]: Next version' 0
@var checkbox next_colors  '[Dev]: Enable color generator' 1
@var checkbox next_debug   '[Dev]: Color generator debug ' 0
@var color    next_bg      '[Dev]: Base background color ' #1f232a
@var color    next_fg      '[Dev]: Base foreground color ' #eeeeee
@var color    next_ac      '[Dev]: Base accent color     ' #7289da

@var checkbox e_jumbo      'Emotes: Smaller jumbo emotes' 1
@var checkbox e_reaction   'Emotes: Larger reaction emotes' 1

@var checkbox fix_fonts    'Fix chat font size' 1
@var checkbox fix_pixels   '[Experimental] Fix text sub-pixel rendering' 1
@var checkbox chat_short   'Shorter chat mode' 0
@var text     chat_short_w 'Shorter chat width' 800px
@var checkbox ic_invert    'Icon inversion' 0
@var checkbox min_guilds   'Minimize width of guilds area' 0
@var checkbox mid_guilds   'Small guild icons' 0
@var text     guild_size   'Small guild icons size' 32px
@var checkbox disable_acm  'Disable avatar context menu' 0
@var checkbox sb_enabled   'Always show scrollbar tracks' 0
@var checkbox sb_chromium  'Disable scrollbars in Chromium' 0
@var checkbox sb_firefox   'Disable scrollbars in Firefox' 0
@var checkbox code_ln      'Enable code line numbers' 1
@var text     ui_font      'Custom UI font' ''font_name''
@var text     code_font    'Custom mono font' ''font_name''
@var text     input_height 'Input bar maximum height' 140px
@var text     b_radius     'Custom border radius' 4px

@var color    _bg          'Color: Primary background   ' #1f232a
@var color    _hl          'Color: Highlight background ' #252A33
@var color    _bd          'Color: Secondary background ' #2c313a
@var color    _fg          'Color: Primary foreground   ' #e9e9e9
@var color    _cm          'Color: Secondary foreground ' #a1a1a1
@var color    _ac          'Color: Accent               ' #7289da
@var color    _yellow      'Color: Yellow               ' #e5c512
@var color    _orange      'Color: Orange               ' #df4b16
@var color    _red         'Color: Red                  ' #dc322f
@var color    _magenta     'Color: Magenta              ' #f33682
@var color    _violet      'Color: Violet               ' #6c71c4
@var color    _blue        'Color: Blue                 ' #268bd2
@var color    _cyan        'Color: Cyan                 ' #2aa198
@var color    _green       'Color: Green                ' #859900
@var color    _white       'Color: White                ' #ffffff
@var color    _sh          'Color: Shadow               ' #00000025
==/UserStyle== */

// Class mixin.
/// Use it instead of: [class *= 'foo_bar']
w(arguments, inline = 0)
    a = arguments
    u = unquote
    list = ''

    if      (a[0] == 1) { x = '&' }
    else if (a[0] == 2) { x = '+' }
    else if (a[0] == 3) { x = '/' }
    else if (a[0] == 4) { x = '>' }
    else                { x = ''  }

    if      (inline == 1) { _i = ''   }
    else if (inline == 2) { _i = ' '  }
    else                  { _i = ', ' }

    for item, index in a[1 .. length(a)]
        if index
            list += s('%s%s[class*="%s"]', u(_i), u(x), u(item))
        else
            list += s('%s[class*="%s"]', u(x), u(item))
    {list}
        {block}

// Color mixin.
/// All colors: `c: fg bd bg;`
/// Only border-color: `c: 0 bd;`
c(x, y = 0, z = 0, xi = 1, yi = 1, zi = 1) {
    i = !important;
    if x is a 'call' or x is a 'rgba' {            color: xi is 0? x : x i }
    if y is a 'call' or y is a 'rgba' {     border-color: yi is 0? y : y i }
    if z is a 'call' or z is a 'rgba' { background-color: zi is 0? z : z i }
}

// SVG colors.
v(x, y = 0, xi = 1, yi = 1) {
    i = !important;
    if x is a 'call' or x is a 'rgba' {   fill: xi is 0? x : x i }
    if y is a 'call' or y is a 'rgba' { stroke: yi is 0? y : y i }
}

// Pseudo-element builder.
P(a, _z = 0, _c = '', _p = absolute) {
    z-index:  _z;
    content:  _c;
    position: _p;
    if a[0] is a 'call' or a[0] is a 'unit' {    top: a[0] }
    if a[1] is a 'call' or a[1] is a 'unit' {  right: a[1] }
    if a[2] is a 'call' or a[2] is a 'unit' { bottom: a[2] }
    if a[3] is a 'call' or a[3] is a 'unit' {   left: a[3] }
}

// Bare RGB mixin.
/// Converts HEX to bare rrr-ggg-bbb format.
to_rgb(input) {
    unquote(slice(s('%s', rgba(input, 0)), 5, -3))
}

// Border radius mixin.
rad() { border-radius: arguments }

// Box-shadow mixin.
b() { box-shadow: arguments }

// Color generator.
_d = darken;
_l = lighten;
BG = next_bg;
FG = next_fg;

if(dark(BG)) {
    lum = luminosity(BG)
    /// TODO: Implement more rules.
    if(lum <= 0.5) {
        b1 =  08%; b2 =  40%; b3 =  16%; b4 =  24%;
        f1 =  15%; f2 =  20%; f3 =  25%; f4 =  35%; f5 =  50%;
    }
    if(lum <= 0.02) {
        b1 = -04%; b2 = -18%; b3 = -08%; b4 = -12%;
        f1 =  15%; f2 =  20%; f3 =  25%; f4 =  35%; f5 =  50%;
    }
/// NOTE: Added just so that Stylus doesn't error out for using a light color.
} else {
    b1 =  06%; b2 =  24%; b3 =  12%; b4 =  18%;
    f1 = -04%; f2 = -08%; f3 = -12%; f4 = -20%; f5 = -28%;
}

bg = {
    '-0':    BG,
    '-1': _d(BG, b1),
    '-2': _d(BG, b2),
    '-3': _d(BG, b3),
    '-4': _d(BG, b4),
}
fg = {
    '-0':    FG,
    '-1': _d(FG, f1),
    '-2': _d(FG, f2),
    '-3': _d(FG, f3),
    '-4': _d(FG, f4),
    '-5': _d(FG, f5),
}

define('bg' + key, val) for key, val in bg
define('fg' + key, val) for key, val in fg


@-moz-document regexp('https?://discord(app)?.com/(app|channels|library|store|gui.*|log.*)(/.*)?') {
if ( next == 1 ) {

    if(next_colors && next_debug) {
        :root {
            &::before {
                content: \
                '  ⭐ BG: ' + luminosity(BG) + \
                '  ⭐ FG: ' + luminosity(FG) + \
                '  🌟 bg: ' + bg + \
                '  🌟 fg: ' + fg;
                text-align: center;
                position: absolute;
                top: 0; left: 0; right: 0;
                line-height: 2em;
                height: 2em;
                c: var(--light);
            }
            body > div[id] {
                margin-top: calc(2em + 0px);
                max-height: calc(100vh - 2em);
                box-shadow: 0 -1px var(--darker);
            }
        }
    }

    // Use stylus-lang variables with CSS variables.
    bb      = var(--bb);
    bg      = var(--dark);
    hl      = var(--darken);
    hh      = var(--dark-hl);
    bd      = var(--darker);
    fg      = var(--light);
    cm      = var(--lighter);
    ac      = var(--accent);
    shadow  = var(--shadow);
    sh      = var(--shadow);
    bsh     = var(--bshadow);
    yellow  = var(--yellow);
    orange  = var(--orange);
    red     = var(--red);
    magenta = var(--magenta);
    violet  = var(--violet);
    blue    = var(--blue);
    cyan    = var(--cyan);
    green   = var(--green);
    white   = var(--white);
    outer   = 0 0 0 1px bd;
    inner   = inset outer;
    t       = var(--t);
    r       = var(--radius);
    i       = !important;

    :root {
        /// Discord variables.
        --header-primary:               fg-0; //#fff
        --header-secondary:             fg-2; //#b9bbbe;
        --text-normal:                  fg-1; //#dcddde;
        --text-muted:                   fg-3; //#72767d;
        --text-link:                    ac;   //#00b0f4;
        --channels-default:             fg-4; //#8e9297;
        --interactive-normal:           fg-2; //#b9bbbe;
        --interactive-hover:            fg-1; //#dcddde;
        --interactive-active:           fg-0; //#fff;
        --interactive-muted:            fg-5; //#4f545c;
        --background-primary:           bg; //#36393f;
        --background-secondary:         bb; //#2f3136;
        --background-secondary-alt:     hl; //#292b2f;
        --background-tertiary:          bd; //#202225;
        --background-accent:            hh; //#4f545c;
        --background-mobile-primary:    #36393f;
        --background-mobile-secondary:  #2f3136;
        --background-floating:          bb; //#18191c
        --background-modifier-hover:    hl; //rgba(79,84,92,0.16);
        --background-modifier-active:   bg; //rgba(79,84,92,0.24);
        --background-modifier-selected: bd; //rgba(79,84,92,0.32);
        --background-modifier-accent:   hsla(0,0%,100%,0.06);
        --background-mentioned:         bb; //rgba(250,166,26,0.05);
        --background-mentioned-hover:   hl; //rgba(250,166,26,0.08);
        --background-message-hover:     hl; //rgba(4,4,5,0.07);
        --elevation-stroke:             inner; //0 0 0 1px rgba(4,4,5,0.15);
        --elevation-low:                0 1px bd; // ...0 2px 0 rgba(4,4,5,0.05);
        --elevation-medium:             0 4px 4px rgba(0,0,0,0.16);
        --elevation-high:               0 8px 16px 2px sh; //0 8px 16px rgba(0,0,0,0.24);
        --logo-primary:                 #fff;
        --focus-primary:                #00b0f4;
        --guild-header-text-shadow:     0 1px 1px rgba(0,0,0,0.4);
        --channeltextarea-background:   hl;
        --activity-card-background:     #202225;
        --textbox-markdown-syntax:      fg-4; //#8e9297;
        --deprecated-card-bg:           hl;
        --deprecated-card-editable-bg:  bb;
        --deprecated-store-bg:          #36393f;
        /// Settings -> My account -> Edit settings.
        --deprecated-text-input-bg:              bg;
        --deprecated-text-input-border:          bd;
        --deprecated-text-input-border-hover:    hl;
        --deprecated-text-input-border-disabled: bg;
        --deprecated-text-input-prefix:          blue;
        /// Modals -> Quickswitcher -> Fix input colors.
        --deprecated-quickswitcher-input-background:  hh;
        --deprecated-quickswitcher-input-placeholder: fg-2;

        /// Dark-Discord variables.
        --note    : 'Dark-Discord NEXT';
        if(!next_colors) {
        --bb      : darken(_bg, 5%);
        --dark    : _bg;
        --darken  : _hl;
        --darker  : _bd;
        --light   : _fg;
        --lighter : _cm;
        } else {
        --bb      : bg-3;
        --dark    : bg-0;
        --darken  : bg-1;
        --darker  : bg-2;
        --dark-hl : bg-4;
        --light   : fg-0;
        --lighter : fg-1;
        }
        --accent  : _ac;
        --shadow  : _sh;
        --bshadow : 0 2px 4px var(--shadow);
        --yellow  : _yellow;
        --orange  : _orange;
        --red     : _red;
        --magenta : _magenta;
        --violet  : _violet;
        --blue    : _blue;
        --cyan    : _cyan;
        --green   : _green;
        --white   : _white;
        --t       : transparent !important;
        --radius  : b_radius;
        --textarea: input_height;
        --f-mono  : code_font, Consolas, Liberation Mono, Menlo, Courier, monospace;
        --f-ui    : ui_font, Whitney, Helvetica Neue, Helvetica, Arial, sans-serif;

        /// TODO: Implement scrollbar options.
        * { scrollbar-color: ac #88888810 i }
    }

    // Base styles.
    body {
        c: 0 0 hl;

        /// Feat -> Custom UI font.
        &, button, input, select, textarea, ::placeholder {
            font-family: var(--f-ui) i;
        }

        /// App -> Core.
        +w(0 'appMount-') {
            c: 0 0 t;
            /// -> Skeleton/Crashed page.
            +w(4 'themeDark-') {
                c: 0 0 bg;
                +w(0 'text-') { > h4 { c: fg }}
                +w(0 'note-') { c: cm }
            }
            /// -> Notice alert.
            +w(0 'notice-') {
                rad: 0;
                +w(1 'Brand-') { c: 0 0 ac }
                +w(1 'Default-') { c: 0 0 orange }
            }
        }

        /// User -> Status icon.
        [mask *= 'offline'], [fill *= '116\, 127\, 141'] { v: fg-4 }
        [mask *= 'online'], [fill *= '67\, 181\, 129'] { v: green }
        [mask *= 'idle'], [fill *= '250\, 166\, 26'] { v: orange }
        [mask *= 'dnd'], [fill *= '240\, 71\, 71'] { v: red }

        /// Sidebar -> User status.
        +w(3 'status-') {
            &[style *= '116\, 127\, 141'] { c: 0 0 fg-4 }
            &[style *= '67\, 181\, 129'] { c: 0 0 green }
            &[style *= '250\, 166\, 26'] { c: 0 0 orange }
            &[style *= '240\, 71\, 71'] { c: 0 0 red }
        }

        /// Buttons.
        [role = 'button'] {
            &[style *= 'b(67\, 181\, 129'] { c: white 0 green }
        }

        /// Feat -> Line numbers for code blocks.
        if ( code_ln == 1 ) {
            pre code {
                position: relative;
                padding-left: 3em i;
                /// -> Generate a range of numbers.
                n = '';
                for num in 1..128 {
                    n += s('%s ', num);
                    if (num == 128) {
                        n += s('%s', num)
                    }
                }
                /// -> Psuedo-element as line numbers.
                &::before {
                    content: n;
                    width: 2ch;
                    opacity: 0.3;
                    overflow-y: hidden;
                    position: absolute;
                    top: 0.5em; left: 0; bottom: 0.5em;
                    padding: 0 0.5em 0 1.5em;
                    white-space: pre-line;
                    text-align: right;
                    c: fg;
                }
            }
        }
    }

    // Guilds.
    +w(0 'guilds-') {
        b: inset -1px 0 bd i;
        c: 0 0 hh;
        +w(0 'scroller-') { c: 0 0 t }
        /// -> Logo.
        +w(0 'listItem-' 'wrapper', 2) {
            +w(0 'childWrapper-') { c: cm }
            +w(1 'selected-') {
                +w(0 'childWrapper-') { c: white 0 ac }
            }
        }
    }

    // Sidebar.
    /// NOTE: Excludes user settings.
    :not([class *= 'Region']) > {
        +w(0 sidebar-) {
            border-right: 1px solid bd i;
            /// -> User status.
            +w(0 panels-) {
                border-top: 1px solid bd i;
                c: 0 0 hl;
                /// Popouts -> Status menu.
                +w(3 'menu-') { border: 1px solid bd i }
            }
            /// -> Friends.
            +w(2 'container-') {
                c: 0 0 bg;
                /// -> Header.
                +w(4 'container-') { c: 0 0 bb }
                /// -> Now playing.
                +w(0 'nowPlaying') {
                    b: inset 1px 0 bd i;
                    c: 0 0 hl;
                }
            }
            /// -> Guild notifications.
            +w(0 'bar-') {
                c: fg 0 bg;
                b: inner, bsh i;
                +w(1 'mention-') {
                    c: white 0 ac;
                    b: bsh i;
                }
            }
        }
    }

    // Global -> Context menus.
    +w(0 contextMenu-) {
        border: 1px solid bd i;
    }

    // Settings.
    +w(0 'SidebarView-') {
        +w(0 'sidebarRegion-') {
            /// -> Add userstyle version.
            nav > div:first-child::before {
                padding: 16px 0;
                margin-bottom: 16px;
                content: '🌚 ' var(--note);
                text-transform: initial;
                font-weight: 500;
                font-size: 16px;
                display: block;
                b: 0 1px bd;
                c: fg;
            }
        }
        /// -> Add border to content area.
        +w(0 'contentRegion-') {
            border-left: 1px solid bd i;
        }
    }

    // Startup.
    +w(0 'ready-') {
        /// -> Add theme version below loading status.
        +w(2 'text-') {
            div:last-child:before { content: var(--note) }
        }
    }

    // Friends -> Active now.
    +w(0 'nowPlaying' 'outer-', 2) {
        /// -> States.
        +w(1 ' active-') {
            &, ../:hover { c: 0 0 bd }
            +w(0 ' active-' 'inset-') { c: 0 0 bb }
        }
        /// -> Rich presence.
        +w(0 'inset-') { c: 0 0 bg }
    }

    // Modals.
    +w(0 'modal-') {
        /// -> Backdrop.
        +w(3 'backdrop') {
            c: 0 0 bg;
            opacity: 0.8 i;
        }
        /// -> Content.
        +w(4 'inner-') {
            /// User info modal.
            +w(0 'root-') {
                rad: r;
                border: 1px solid bd i;
                b: var(--elevation-high) i;
                +w(4 'topSection') {
                    z-index: 1 i;
                    position: relative;
                    border-bottom: 1px solid bd i;
                    c: 0 0 hl;
                    &::before {
                        opacity: 0.15;
                        P(0 0 0 0, -1)
                    }
                    /// TODO: Tweak text colors later.
                    * { z-index: 8 i; c: fg }
                    /// -> Status colors.
                    +w(4 'headerFill-') { c: 0 0 sh }
                }
                /// -> Buttons.
                +w(0 'button') {
                    c: white 0 ac;
                    transition: 0.2s ease-in;
                    &:hover { opacity: 0.6 i }
                    > div { c: white }
                }
                /// -> Activity state.
                +w(4 'Xbox') {
                    +w(0 'colorBrand-') { c: 0 0 magenta }
                    &::before { c: 0 0 magenta }
                }
                +w(4 'Playing') {
                    +w(0 'colorBrand-') { c: 0 0 blue }
                    &::before { c: 0 0 blue }
                }
                +w(4 'Spotify') {
                    +w(0 'colorGreen-') { c: 0 0 green }
                    &::before { c: 0 0 green }
                }
                +w(4 'Streaming') {
                    +w(0 'colorBrand-') { c: 0 0 violet }
                    &::before { c: 0 0 violet }
                }
                /// -> Tab state.
                +w(0 'tabBar-') {
                    [style *= ': rgb(255'] { c: 0 ac }
                    [style *= '255\, 0.1'] { c: 0 bd }
                    [style *= '255\, 0.4'] { c: cm }
                }
            }
        }
        /// Global -> Upload.
        +w(3 'uploadModal-') {
            border: 1px solid bd i;
            b: var(--elevation-high) i;
            c: 0 0 bg;
            rad: r;
            /// -> Preview.
            +w(0 'icon-' 'image-', 0) {
                c: 0 0 hl;
                b: inner, bsh i;
            }
            /// -> Textarea.
            +w(0 'textAreaUpload-' 'scrollableContainer-', 0) {
                border: 1px solid bd i;
                rad: r;
            }
            /// -> Footer.
            +w(0 'footer-') {
                border-top: 1px solid bd i;
                c: 0 0 bb;
                b: none i;
                rad: 0 0 r r;
            }
        }
        /// Global -> Quickswitcher.
        +w(3 'quickswitcher-') {
            &:not([class *= 'channel']) {
                border: 1px solid bd i;
                b: var(--elevation-high) i;
                rad: r;
            }
        }
        /// Guilds -> Channel info.
        +w(1 'root-1gCeng') {
            c: 0 0 bg;
            b: inner, var(--elevation-high) i;
        }
        /// Guilds -> Gift a Nitro.
        +w(3 'shaker-') {
            +w(0 'root-1gCeng') {
                border: 1px solid bd i;
                b: var(--elevation-high) i;
                c: 0 0 bg;
                +w(0 'footer-') {
                    b: inset 0 1px 0 bd;
                    c: 0 0 hl;
                }
            }
        }
    }

    // Buttons.
    +w(0 'button-') {
        +w(1 'lookLink-') {
            c: fg-3;
            transition: 0.2s ease;
            &:hover { c: fg-0 }
            +w(0 'contents-') { background: none i }
        }
        +w(1 'lookFilled-') {
            transition: 0.2s ease;
            &:hover { opacity: 0.8 }
            +w(1 'colorBrand-') {
                c: white 0 ac;
            }
        }
    }

    // Popouts -> User popout.
    +w(0 'userPopout-') {
        border: 1px solid bd i;
        b: var(--elevation-high) i;
        c: 0 0 bb;
        /// -> Header.
        +w(4 'header') {
            z-index: 1 i;
            position: relative;
            border-bottom: 1px solid bd i;
            c: 0 0 hl;
            &::before {
                opacity: 0.15;
                P(0 0 0 0, -1)
            }
            +w(4 'headerFill-') { c: 0 0 sh }
            /// TODO: Tweak text colors later.
            *:not([class *= 'bot']):not(path) {
                z-index: 8 i;
                c: fg;
            }
            /// -> Status colors.
            +w(1 'Xbox') { &::before { c: 0 0 magenta }}
            +w(1 'Playing') { &::before { c: 0 0 blue }}
            +w(1 'Spotify') { &::before { c: 0 0 green }}
            +w(1 'Streaming') { &::before { c: 0 0 violet }}
        }
        /// -> Body.
        +w(0 'bodyInner-') {
            c: fg 0 t;
            +w(0 'bodyTitle-') { c: cm }
        }
        /// -> Footer.
        +w(0 'footer-') {
            c: 0 bd t;
            input { c: fg bd hl }
            +w(0 'protip-') {
                c: fg;
                [style] { c: green }
            }
        }
    }

    // Chat -> Base.
    +w(0 'chat-') {
        /// -> Header.
        +w(4 'title-') {
            c: 0 0 bb;
            /// -> Gradient.
            +w(3 'children-') {
                &::after { background: linear-gradient(90deg, t 0, bb) i }
            }
        }
        /// -> Chat area.
        +w(0 'messages-') {
            c: 0 0 t;
            /// -> 'Has more' bar.
            +w(0 'hasMore-') {
                c: ac bd hl;
                transition: 0.2s ease;
                &:hover { opacity: 0.6 }
            }
            /// -> Welcome -> Border color.
            +w(0 'base-19D3Qq') {
                c: 0 bd;
            }
            /// -> Guild invites.
            +w(0 'userSelectNone-') {
                +w(1 'cursorDefault-') {
                    margin-top: 1rem;
                    rad: r;
                    c: 0 0 hl;
                    b: inner i;
                }
            }
            /// -> Embedded links/media.
            +w(0 'embedWrapper-') {
                &:not([class *= 'imageZoom-']) {
                    rad: r;
                    b: inner;
                }
            }
            /// -> Mentioned.
            +w(0 'mentioned-') {
                rad: 4px i;
                &::before {
                    width: 4px;
                    rad: 4px 0 0 4px;
                    c: 0 0 ac;
                }
            }
            /// -> Spoilers.
            +w(0 'spoilerText-') {
                rad: 8px;
                c: 0 0 dark-hl;
                +w(1 'hidden-') { &:hover { c: 0 0 bb }}
            }
        }
        /// -> 'Jump to present' bar.
        +w(0 'jumpToPresentBar-') {
            > button {
                c: cm;
                transition: 0.2s ease;
                ../:hover button { c: fg }
            }
        }
        /// -> Textarea.
        +w(0 'channelTextArea-') {
            rad: r i;
            c: 0 0 hl;
            > div {
                rad: inherit;
                c: 0 0 hl;
                b: inner;
            }
            /// Fix emoji button padding.
            +w(0 'emojiButton-') { padding-right: 10px i }
        }
        +w(0 'cooldownWrapper-') { c: fg }
        +w(0 'newMessagesBar-') {
            c: 0 0 bd;
            b: bsh i;
            > button { c: fg }
        }
        /// -> Message context menu.
        +w(0 'buttonContainer-' 'buttons-' 'wrapper-', 2) {
            c: 0 0 bb;
            b: outer, bsh i;
            /// -> 'Delete Message' link.
            +w(3 'danger-') { &, [class *= 'hint'] { c: red }}
        }
        /// -> Guild members.
        +w(3 'members-') {
            b: inset 1px 0 bd i;
            c: 0 0 hl;
            +w(0 'clickable-') {
                &:hover [class *= 'layout-'] { c: 0 0 bg }
            }
        }
        /// -> Hovered message.
        +w(0 'message-') {
            rad: r;
        }
    }

    // Chat -> Markup.
    +w(0 'markup-') {
        /// -> Reset code font and border color.
        code {
            c: 0 bd;
            font-family: var(--f-mono) i;
            &.inline {
                padding: 0.125em 0.2em;
                b: inner, bsh i;
            }
        }
    }

    // Feat -> Shorter messages.
    if (chat_short) {
        chat_width = chat_short_w;
        +w(0 'messagesWrapper-') {
            padding-left: 12px;
            /// -> Messages.
            +w(0 'messages-') {
                > div {
                    width: calc(100% + 32px);
                    max-width: chat_width;
                    margin-left: auto;
                    margin-right: auto;
                    box-sizing: border-box;
                }
            }
            /// -> Bars.
            +w(4 'barBase-') {
                margin-left: auto;
                margin-right: auto;
                max-width: chat_width;
            }
            /// -> Textarea.
            + form > div {
                +w(1 'channelTextArea-') {
                    /// Textarea in DMs/Guilds/Annoncements.
                    &, ../[aria-expanded], ../[class *= 'wrapper-'] {
                        max-width: chat_width;
                        margin-right: auto;
                        margin-left: auto;
                    }
                }
                +w(1 'typing-') {
                    max-width: chat_width;
                    margin-right: auto;
                    margin-left: auto;
                }
            }
        }
    }

    // Emojis.
    .emoji {
        /// Feat -> Smaller jumbo emotes!
        if(e_jumbo) {
            &.jumboable {
                width: 2.0rem;
                height: 2.0rem;
                min-height: 2.0rem;
            }
        }

        /// Feat -> Larger reaction emotes.
        if(e_reaction) {
            /[class *= 'reaction-'] & {
                height: 1.5rem;
                width: @height;
            }
        }

        /// Drawers -> Emoji picker.
        +w(3 'drawerSizingWrapper-') {
            /// -> Wrapper.
            +w(4 'contentWrapper') {
                border: 1px solid bd i;
                b: var(--elevation-high) i;
                rad: r;
            }
            /// -> Rounded corners.
            +w(0 'categoryList-') {
                rad: 0 0 0 r;
            }
        }

        /// -> Fix hardcoded preload images.
        +w(3 'emojiItemImageLoading-') {
            background-image: none i;
            c: t 0 hh;
            rad: 38%;
        }
    }
} else {
  :root {
    --note    : 'Dark-Discord v0.41.0';
    --dark    : _bg;
    --darken  : _hl;
    --darker  : _bd;
    --light   : _fg;
    --lighter : _cm;
    --accent  : _ac;
    --shadow  : _sh;
    --bshadow : 0 2px 4px var(--shadow);
    --yellow  : yellow;
    --orange  : orange;
    --red     : red;
    --magenta : magenta;
    --violet  : violet;
    --blue    : blue;
    --cyan    : cyan;
    --green   : green;
    --white   : white;
    --t       : transparent !important;
    --radius  : b_radius;
    --textarea: input_height;
    --codearea: code_font, Consolas, Liberation Mono, Menlo, Courier, monospace;
    --icinvert: ic_invert;
  }

  // Use stylus-lang variables with CSS variables.
  bg      = var(--dark);
  hl      = var(--darken);
  bd      = var(--darker);
  fg      = var(--light);
  cm      = var(--lighter);
  ac      = var(--accent);
  shadow  = var(--shadow);
  sh      = var(--shadow);
  bsh     = var(--bshadow);
  yellow  = var(--yellow);
  orange  = var(--orange);
  red     = var(--red);
  magenta = var(--magenta);
  violet  = var(--violet);
  blue    = var(--blue);
  cyan    = var(--cyan);
  green   = var(--green);
  white   = var(--white);
  outer   = 0 0 0 1px bd;
  inner   = inset outer;
  t       = var(--t);
  r       = var(--radius);
  i       = !important;

  // * Compact_lines helper mixins.
  line(x, y) {
    content: '';
    position: absolute;
    if x != false { border-left: 2px solid bd }
    if y != false { border-bottom: 2px solid bd }
  }
  size(w, h) {
    if w != 'boolean' { width: w; }
    if h != 'boolean' { height: h; }
  }
  nav(a, b, c, d) {
    if a != 'boolean' || a != 'null' { top: a; }
    if b != 'boolean' || b != 'null' { right: b; }
    if c != 'boolean' || c != 'null' { bottom: c; }
    if d != 'boolean' || d != 'null' { left: d; }
  }
  size(w, h) {
    if w is a 'unit' { width:  w }
    if h is a 'unit' { height: h }
  }
  pos(a, b, c, d) {
    if a is a 'unit' { top:    a }
    if b is a 'unit' { right:  b }
    if c is a 'unit' { bottom: c }
    if d is a 'unit' { left:   d }
  }

  body {
    c: 0 0 bg;
    /// Feat -> Custom UI font.
    &, button, input, select, textarea, ::placeholder {
      font-family: ui_font, Whitney, Helvetica Neue,
        Helvetica, Arial, sans-serif;
    }
    /// App -> Core.
    [class *= 'appMount-'] {
      c: 0 0 t;
      /// Skeleton/crashed page.
      > [class *= 'themeDark-'] {
        c: 0 0 bg;
        [class *= 'text-'] > h4 { c: fg }
        [class *= 'note-'] { c: cm }
      }
    }
    /// Settings -> Description.
    /[class *= 'descriptionBox-'] { c: red 0 hl }
  }

  // App -> Login.
  [class *= 'authBox-'] {
    border: 1px solid;
    rad: r;
    c: cm bd bg;
    box-shadow: 0 2px 10px 2px shadow;
    [class *= 'title-'] {
      c: fg;
      &[class *= 'h5-'] { c: cm }
    }
    [class*="subTitle-"] { c: cm }
  }
  // Voice chat controls.
  [class*="buttonIcon-"] path { v: cm }
  // * Icons -> Misc.
  [class*="mobileIndicator-"],
  [class*="addButtonIcon-"] polygon,
  [class *= 'OpenIcon-'] path[fill],
  [class *= 'ActionsIcon-'] path[fill],
  svg path[class*="attachButtonPlus-"] {
    v: cm;
  }
  // * Icons -> User controls.
  [class*="Icon-"] {
    &[name="Gear"] path[fill] { v: cm }
    &[name*="Headset"], &[name*="Microphone"] {
      path[fill]:not([class*="red-"]) { v: cm }
      path[fill][class*="red-"] { v: red }
    }
  }
  // * Icons -> Global.
  [class*="icon"] {
    // Base colors.
    path[fill="currentColor"],
    g[fill="currentColor"] > path,
    path[fill^="#FFF"] {
      v: cm;
    }
    // Selected/active icons.
    &[class*="selected-"] path[fill] { v: ac }
    // Muted channel.
    path[fill][class*="strikethrough-"] { v: red }
    // Guild/DM owner.
    &[class*="ownerIcon-"] path { v: orange }
    // Partnered guilds.
    svg[class*="flowerStar-"] {
      v: 0 bg;
      path[fill] { v: ac }
      + [class*="childContainer-"] path[fill] { v: white }
    }
    // Nitro-Booster!
    &[class*="premiumIcon-"] path { v: violet }
    /// Server options.
    [name *= 'Subscriber'] path { v: violet }
    [name *= '_UserAdd'] path { v: ac }
  }
  svg[class*="button"] path[stroke="#FFF"] { v: 0 cm }
  // Server owner icon.
  [class*="ownerHelpIcon-"] path { v: orange }
  // Overflow icon in server members.
  [class*="overflowIconFg-"] { v: cm }
  // * Icons -> Non-svg mic/headphone/cogwheel reset.
  [class*="accountDetails-"] + div {
    > div, > button {
      rad: r;
      transition: 0.15s ease;
      &:hover { c: 0 0 bd }
    }
    // Image invert.
    [style*="/assets/"] {
      filter: hue-rotate(calc(var(--icinvert) * 180deg)) invert(var(--icinvert)) i;
      &:hover { c: 0 0 t }
    }
  }

  /// Settings -> Primary buttons.
  [style *= 'color: rgb\(255\, 255\, 255']:not(#z) { c: white }
  /// Settings -> Default values
  [class *= 'defaultValue-'] [class *= 'markValue-'] { c: ac }

  // Settings -> Userstyle version.
  [class *= 'side-'] > div:first-child::before {
    display: block;
    padding: 1rem 0;
    margin-bottom: 1rem;
    content: '🌚 ' var(--note);
    text-transform: initial;
    font-size: 1rem;
    font-weight: 500;
    box-shadow: 0 1px bd;
  }

  // * Global -> Browser defaults.
  ::placeholder, [class*="emptyPlaceholder"] { c: cm }
  ::selection { c: bg 0 cm }
  ::-moz-selection { c: bg 0 cm }

  /// Global -> Tooltips.
  [class *= 'tooltip-'] {
    border: 1px solid cm;
    c: fg 0 bg;
    box-shadow: 0 2px 8px shadow i;
    [class *= 'Pointer-'] { border-top-color: cm i }
  }

  // Global -> Bot tags.
  [class*="botTag-"]:not(#z) { c: white 0 ac }

  // * Global -> Checkboxes.
  [class*="checkbox-"]:not([class*="wrapper" i]) {
    c: 0 bd bg;
    &[class*="checked-"] {
      c: 0 0 bd;
      svg polyline { v: 0 ac }
    }
    &[class*="round-"] {
      c: 0 bd bg;
      &[class*="checked-"] {
        c: 0 green;
        svg polyline { v: 0 green }
      }
    }
  }

  // * Global -> Switches.
  [class*="switch-"] {
    c: 0 0 bd;
    box-shadow: inset 0 0 0 2px bd i;
    &::before { c: 0 0 ac }
    &::after {
      c: 0 0 fg;
      box-shadow: bsh i;
    }
    &[class*="valueChecked"] {
      c: 0 0 ac;
      box-shadow: inset 0 0 0 2px ac i;
    }
  }

  // * Global -> Inputs.
  [class*="inputWrapper-"] {
    input, textarea, [class*="multiInput-"], /[class *= 'copyInputDefault-'] {
      rad: r;
      c: fg bd hl;
      &:focus, &[class*="focused-"] { c: 0 ac }
    }
    // Separator.
    [class*="multiInput"]::before {
      opacity: 1;
      c: 0 bd;
    }
  }

  // Global -> Color picker.
  [class*="colorPickerCustom-"] { c: 0 t bg }

  // * Global -> Notices.
  [class*="notice-"] {
    rad: 0;
    box-shadow: 0 1px bd i;
    &[class*="noticeDefault-"] {
      c: white 0 orange;
      [class*="button"] {
        rad: r;
        c: white white;
        &:hover { c: orange 0 white }
      }
    }
    &[class*="noticeBrand-"] {
      c: white 0 ac;
      [class*="button"] {
        rad: r;
        c: white white;
        &:hover { c: orange 0 white }
      }
    }
  }

  // Global -> GDPR complience.
  [class *= 'gdprWrapper-'] {
    rad: r;
    c: cm bd hl;
    [class *= 'header-'] { c: fg }
    [class *= 'lookInverted-'] { c: white 0 ac }
    [class *= 'anchor-'], [class *= 'lookLink-'] { c: cm }
  }

  // * No channel. (=
  [class*="noChannel-"] { c: 0 0 bg }

  // * Modal backdrop.
  [class^="backdrop"] {
    opacity: 0.80 i;
    c: 0 0 bg;
  }

  // Feat -> Chromium scrollbars.
  if ( sb_chromium != 1 ) {
    [class^="chat"], [class*="friends"] {
      ::-webkit-scrollbar {
        &-track { c: 0 0 bg }
        &-track-piece { c: 0 bg shadow }
        &-thumb { c: 0 bg bd }
      }
    }
    [class*="emojiPicker-"] {
      ::-webkit-scrollbar {
        &-track { c: 0 0 bg }
        &-track-piece { c: 0 0 0 }
        &-thumb { c: 0 bd ac }
      }
    }
  }

  // Feat -> Firefox scrollbar polyfill.
  if ( sb_firefox != 1 ) {
    * {
      scrollbar-color: #88888830 #88888815 i;
      scrollbar-width: thin i;
    }
    // ? ChannelInfo/SearchResults/Activity/Store/Modals/Friends/Notifications
    // ? ActivityFeed/QuickSwitcher/Channels/Autocomplete/Context/Chat.
    [class*="modal-"][class*="modal-"][class*="size-"],
    [class*="searchResultsWrap-"] > div:last-child,
    [class*="feed-"] +, [class*="Store-"] +,
    [class*="contentRegionScroller-"] +,
    [class*="modal-"][class*="size"],
    [class*="friendsTableBody-"] +,
    [class*="messagesPopout-"] +,
    [class*="activityFeed-"],
    [class*="quickswitcher-"],
    [class*="scrollerFade-"] >,
    [class*="autocomplete-"],
    [class*="contextMenu-"],
    [class*="measurement-"],
    [class*="messages-"] + {
      [class^="scrollbar-"] {
        c: 0 t bg;
        [class^="track"] { c: 0 bg bd }
        [class^="thumb"] { c: 0 bg ac }
        [class^="pad"] { c: 0 0 bg }
      }
    }
    // ? Pinned/Notifications.
    [class*="sizeMedium-"] {
      [class*="scrollbar-"] {
        c: 0 t bd;
        [class^="track"] { c: 0 bd bg }
        [class^="thumb"] { c: 0 bd ac }
        [class^="pad"] { c: 0 0 bd }
      }
    }
    // ? Various hacks.
    [class*="scrollbar-"] {
      // ? Custom setting -> Always show scrollbar tracks.
      if ( sb_enabled == 1 ) {
        > [class*="track-"] { opacity: 1 i }
      }
      // ? Hide 0px height thumb scrollbar thumb.
      > div[style*="height: 0px;"] { border-width: 0px i }
    }
  }

  // HACK: Firefox inputbar height.
  @supports (-moz-user-select: none) {
    [class *= 'channelTextArea-'] textarea[class *= 'textArea-'] {
      margin: 0;
      padding: 16px;
      &[rows = '1']:not([style *= 'height:']) {
        padding: 10px 16px 0;
        margin: 1px 0 -3px;
      }
    }
  }

  // * Modals.
  [class*="modal-"] {
    &[class*="size"] {
      rad: r;
      c: 0 0 bg;
      box-shadow: outer, 0 4px 8px shadow;
      [class*="item-"] {
        rad: r;
        &[style*="114\, 137\, 218"] { c: 0 ac ac }
      }
      [class*="reactors-"], [class*="sidebar-"] { c: 0 0 t }
      // Confirm message deletion.
      [class*="content-"] > [class*="message-"] {
        rad: r;
        border: 1px solid;
        c: 0 bd bg;
        box-shadow: bsh;
        [class*="markup-"] { c: fg }
        [class*="timestamp"] { c: cm }
      }
    }
    // Default-ish colors.
    [class*="primary-"] { c: fg }
    [class*="titleDefault-"], [class*="h5-"] { c: fg }
    [class*="description-"], [class*="guildName-"] { c: cm }
    /// Spotify invitation.
    [class *= 'invite-'][class *= 'preview-'] {
      c: 0 bd hl;
      [class *= 'partyStatus-'] {
        c: cm;
        [class *= 'textLink-'] { c: fg }
      }
    }
    /// Footer.
    [class *= 'footer-'] {
      c: 0 0 t;
      rad: 0 0 r r;
      box-shadow: inset 0 1px bd;
    }
    // Highlighted friends.
    [class*="friend-"] { c: fg }
    [class*="friendSelected-"] { c: 0 0 bg }
    .search-bar {
      c: 0 0 t;
      &-inner { c: 0 shadow bg }
      &-tag { c: cm 0 bd }
      input { c: fg }
    }
    // Text color.
    [class*="defaultColor"] { c: fg }
    [class*="Header"], [class*="header-"] { c: cm }
    // ? Region select.
    [class*="regionSelectModal-"] {
      rad: r;
      c: 0 0 bg;
      box-shadow: inner, bsh;
      [class*="Option-"] {
        rad: r;
        c: 0 bd bg;
        &:hover {
          c: 0 ac;
          box-shadow: bsh;
        }
        [class*="Flag-"] {
          c: 0 0 t;
          transition: 0.3s ease;
          box-shadow: bsh;
          ../:hover [class*="Flag-"] { transform: translateY(-4px) i }
        }
        [class*="Name-"] { c: cm }
      }
      [class*="Footer-"] { c: cm }
    }
    // Image preview.
    [class*="imageWrapper"] + [class*="anchor-"] {
      opacity: 1;
      c: ac;
    }
  }

  // * Upload modal.
  [class*="uploadModal-"] {
    border: 1px solid bd;
    c: 0 0 bg;
    [class*="inner-"] {
      c: cm bd;
      // Different file-types.
      [class*="file-"] [class*="icon-"] {
        &[class*="image-"] {
          c: 0 bd hl;
          box-shadow: 0 2px 8px shadow i;
        }
        &[class*="unknown-"], &[class*="code-"],
        &[class*="document-"], &[class*="video-"] {
          filter: invert(0.8) hue-rotate(180deg);
        }
        // File title.
        + [class*="description"] { c: fg }
      }
    }
    // ? Controls.
    [class*="footer-"] {
      rad: 0 0 10px 10px;
      c: 0 0 hl;
      box-shadow: inset 0 1px bd;
      [class*="label"] * { c: cm }
    }
  }

  // * Channel info modal.
  [class*="inner-"] > [class*="modal-"][class*="size-"] {
    c: fg 0 bg;
    box-shadow: 0 2px 4px -1px shadow, outer;
    // Close icon / text color.
    [class*="close-"], [class*="content-"] > [class*="primary-"] { c: cm }
  }

  // Modals -> Folder settings.
  [class*="small-"][role="dialog"] {
    c: 0 0 bg;
    box-shadow: inner, 0 2px 8px shadow;
    h5 { c: cm }
    [class*="close-"] { c: cm }
    [class*="defaultColor-"] { c: fg }
    [class*="colorPickerSwatch-"] { c: 0 shadow }
    [class*="footer-"] {
      c: 0 0 t;
      box-shadow: inset 0 1px bd;
    }
  }

  // Modals -> User profile.
  [class^='modal-'] > div > div > [class *= 'root'] {
    border: 1px solid bd;
    rad: r;
    c: 0 0 bg;
    box-shadow: bsh;
    /// Header.
    [class *= 'header-'] > [class *= 'headerInfo-'] {
      [class *= 'username-'] { c: fg }
      [class *= 'discriminator-'] { c: cm }
    }
    /// HACK: Make badges gray for more uniform look.
    > :not([class *= 'topSectionNormal-']) {
      [class *= 'profileBadge'] {
        filter: brightness(80%) i;
      }
    }
    /// Activity.
    [class *= 'topSection'] {
      border-bottom: 1px solid bd;
      c: 0 0 t;
      [class ^= 'header'] {
        c: 0 0 hl;
        /// Custom status.
        + div[class = ''] { c: 0 0 hl }
      }
      [class *= 'activityProfile-'] {
        border-top: 1px solid bd;
        c: 0 0 t;
        /// Text.
        [class *= 'Text-'], [class *= 'content'] { c: cm }
        [class *= 'details-'], [class *= 'weight-'] { c: cm }
        [class *= 'text-'], [class *= 'activityName-'] { c: fg }
        /// Progress bar.
        [class *= 'bar-'] {
          c: 0 0 bd;
          [class *= 'barInner-'] { c: 0 0 ac }
        }
        /// Buttons.
        [class *= 'lookOutlined-'] {
          c: cm bd bd;
          &:hover { opacity: 0.8 }
        }
      }
      /// Indicator.
      &::before {
        content: '';
        position: absolute;
        top: 0; right: 0; left: 0;
        rad: r r 0 0;
        border-top: r solid t;
      }
    }
    /// Various activities.
    [class *= 'Xbox-']::before { c: 0 violet }
    [class *= 'Playing-']::before { c: 0 blue }
    [class *= 'Spotify-']::before { c: 0 green }
    [class *= 'Streaming-']::before { c: 0 violet }
    /// Tabs.
    [class *= 'tabBarContainer-'] {
      padding: 0;
      c: 0 bd hl;
      [class *= 'item-'] {
        margin: 0;
        flex: 1 1 auto;
        justify-content: center;
        margin-bottom: -1px;
        border-bottom-width: 1px;
        transition: 0.15s ease;
        c: cm t 0;
        &:hover { c: fg }
        &[style $= '255);']:not(#z), &[class *= 'selected-'] {
          c: ac 0 bg;
          box-shadow: 1px 0 bd, -1px 0 bd;
        }
      }
    }
    /// Body.
    > [class *= 'body-'] {
      c: 0 0 t;
      /// Text.
      [class *= 'Info-'] { c: cm }
      [class *= 'note-'] > textarea {
        c: fg;
        &:focus { c: 0 0 hl }
      }
      /// Mutual servers/friends.
      [class *= 'listRow-'] {
        c: cm;
        &:hover { c: fg 0 hl }
        [class *= 'guildNick-'] { c: cm }
      }
      /// Scrollbar polyfil tweaks.
      [class *= 'firefoxFixScrollFlex-'] {
        padding-right: 0px;
        [class *= 'InfoSection-'], [class *= 'listRow-'] { margin-right: 12px }
      }
    }
    /// Connected accounts.
    [class *= 'userInfoSection'] {
      c: 0 bd;
      [class *= 'Accounts'] > [class *= 'Account'] {
        rad: r;
        c: 0 bd hl;
        [class *= 'AccountName-'] { c: fg }
      }
    }
  }

  // Global -> User status menu popout.
  [id ^= 'popout_'] {
    [class *= 'menu-'] {
      border: 1px solid bd;
      rad: r;
      c: 0 0 bg;
      box-shadow: bsh;
      [class *= 'separator-'] { c: 0 bd }
      [class *= 'itemBase-'] {
        c: cm;
        transition: 0.15s ease;
        &:hover { c: 0 0 hl }
        &[class *= 'Active'] { c: 0 0 hl }
        &[class *= 'invite-'] { c: ac }
        [class*='helper-'] { c: cm }
        div:not([class]) { c: fg }
      }
    }
  }

  // Popouts -> Inputbar Spotify/upload menu.
  [class *= 'attachPopout-'] {
    rad: r;
    c: fg 0 hl;
    box-shadow: bsh, inner;
    /// Text color.
    [class *= 'RowText'] { c: fg }
    > [role = 'button']:hover { c: 0 0 bd }
  }

  // * Add role popout.
  [class*="popoutInvert-"], [class*="popoutBottom-"] {
    [class*="headerText-"] { c: fg }
    [class*="sectionTag-"] {
      c: cm 0 t;
      [class*="selected-"] {
        background: linear-gradient(90deg, t, bd);
      }
    }
  }

  // Popouts -> User popout.
  [class *= 'userPopout-'] {
    border: 1px solid bd;
    c: 0 0 bg;
    box-shadow: bsh;
    [class *= 'headerText-'] {
      [class *= 'username-']:not(#z),
      /[class *= 'headerName-'], /[class *= 'NoNickname-'] { c: fg }
      [class *= 'TagVerified'] { c: white }
      [class *= 'headerTag-'] { c: cm }
    }
    /// Various modes.
    [class *= 'header-'][class *= 'size'] {
      position: relative;
      border-bottom: 1px solid bd;
      rad: r r 0 0;
      c: 0 0 hl;
      /// Buttons.
      [class *= 'lookOutlined-'] {
        c: cm bd bd;
        box-shadow: bsh;
        &:hover { c: fg }
      }
      [class *= 'disabledButtonWrapper-'] > button { c: 0 sh sh }
      /// Activity section.
      [class*="activityUserPopout"] {
        border-top: 1px solid bd;
        c: 0 0 t;
        /// Text reset.
        [class *= 'activityName-'], [class *= 'Bold-'] { c: fg }
        [class *= 'content-'] [class *= 'details-'] { c: cm }
        [class *= 'content-'], [class *= 'text-'] { c: cm }
        /// Progress bar.
        [class *= 'bar-'] {
          c: 0 0 bd;
          [class *= 'barInner-'] { c: 0 0 ac }
        }
      }
      /// Activity indicator.
      &::before {
        z-index: 0;
        content: '';
        position: absolute;
        top: 0; right: 0; left: 0;
        rad: r r 0 0;
        border-top: r solid t;
      }
      &[class *= 'Xbox-']::before { c: 0 magenta }
      &[class *= 'Playing-']::before { c: 0 blue }
      &[class *= 'Spotify-']::before { c: 0 green }
      &[class *= 'Streaming-']::before { c: 0 violet }
    }
    /// Body.
    [class *= 'bodyInner-'] {
      c: cm 0 t;
      /// Headers.
      [class *= 'bodyTitle-'] { c: cm }
      /// Add role button.
      [class *= 'actionButton'] {
        transition: 0.15s ease;
        c: cm bd hl;
      }
      /// Add note.
      [class *= 'note-'] > textarea {
        c: fg;
        &:focus { c: 0 0 hl }
      }
    }
    /// Footer.
    [class *= 'footer-'] {
      c: fg bd t;
      /// Wumpus!
      [class *= 'wumpusShown-'] [class *= 'wumpusTooltip-'] {
        c: fg 0 bd;
        &::after { border-color: t bd t t }
      }
      /// Tips.
      [class *= 'statusGreen-'] { c: green }
      [class *= 'tip-'] { c: fg }
      /// Message user.
      [class *= 'quickMessage-'] { c: fg bd hl }
    }
  }

  // Popouts -> Custom status.
  [class *= 'customStatus-'] {
    &, span { c: fg }
  }

  // Sidebar -> User controls.
  [class *= 'sidebar-'] > [class *= 'panels-'] {
    z-index: 1;
    c: 0 0 hl;
    [class *= 'title-'] { c: fg }
    [class *= 'subtext-'] { c: cm }
    /// VC status.
    > div:first-child:not(:last-child) {
      border-top: 1px solid bd;
      border-bottom: none;
      c: 0 0 hl;
      [class*="Error"] { c: red }
      [class*="Connected"] { c: green }
      [class*="Connecting"] { c: orange }
      [class*="description-"] > [class*="channel-"] {
        opacity: 1;
        c: cm;
      }
    }
    // Controls.
    > div:last-child {
      c: cm 0 t;
      box-shadow: inset 0 1px bd;
    }
    button {
      rad: r;
      c: cm;
      transition: 0.15s ease;
      &:hover:not([class*="disabled"]) { c: 0 0 bd }
    }
  }

  // * Global -> Status indicators.
  [class*="status-"] {
    &[class*="Red"] { c: red }
    &[class*="Green"] { c: green }
    &[class*="Orange"] { c: orange }
    &[class*="Yellow"] { c: yellow }
    &[class*="Online-"] { c: 0 0 green }
    &[class*="Offline-"] { c: 0 0 gray }
    /// User status.
    &[style*="240\, 71\, 71"] { c: 0 0 red }
    &[style*="67\, 181\, 129"] { c: 0 0 green }
    &[style*="116\, 127\, 141"] { c: 0 0 gray }
    &[style*="250\, 166\, 26"] { c: 0 0 orange }
    /// Current status.
    /rect {
        &[fill *= '240\, 71\, 71'] { v: red }
        &[fill *= '67\, 181\, 129'] { v: green }
        &[fill *= '250\, 166\, 26'] { v: orange }
        &[fill *= "116\, 127\, 141"] { v: gray }
        &[mask *= '09bd61cd'] { v: cm }
    }
  }
  // Secondary status indicator.
  [class*="pointerEvents-"] {
    &[fill="#ffffff" i] { v: bg }
    &[mask*="status-off"] { v: gray }
    &[mask*="status-dnd"] { v: red }
    &[mask*="status-onl"] { v: green }
    &[mask*="status-idl"] { v: orange }
    &[mask*="status-str"] { v: violet }
  }

  // * Text status.
  [class*="titleChecked"], [class*="descChecked"] { c: fg }

  // * Loading page.
  [class^="app"] > [style^="opacity"] {
    // Background.
    &[class*="fixClipping"] { c: 0 0 bg }
    // Text colors.
    [class^="quote-"] { c: fg }
    [class^="status-"] { c: cm }
    [class*="problems-"] {
      [class*="Text"] { c: cm }
      [class*="anchor"] { c: ac }
    }
  }

  // ? All usernames except the ones that have custom colors.
  [class^="username"]:not([style^="color"]) { c: fg }
  // ? Discriminators.
  [class*="discriminator"] { c: cm }
  // ? Roles.
  [class^="nameTag"] {
    // ? Default no-role color in right sidebar.
    &:not([style^="color"]) { c: cm }
    // ? Inherit custom color in right sidebar.
    > [class*="username"] { color: inherit i }
  }

  // Guilds.
  [class *= 'guilds-'] {
    rad: 0px;
    c: 0 0 bd;
    box-shadow: inset -1px 0 bd;
    [class *= 'scroller-'] { c: 0 0 t }
    [class *= 'Separator-'] { c: 0 0 hl }
    // * Guild wrapper.
    [class*="listItem-"] {
      // ? Indicator -> New messages.
      [class*="pill-"] > [class*="item"] { c: 0 0 cm }
      // ? Indicator -> Unread badges.
      [class*="numberBadge-"] { c: white 0 ac }
      // Icons.
      a[href] > [class*="acronym-"], [class*="circleIconButton-"] { c: fg 0 hl }
      /// Home icon.
      a[aria-label = 'Home'] {
        c: 0 0 hl;
        [class *= 'homeIcon-'] { c: fg }
        [class *= 'childWrapper-'] { c: 0 0 t }
        &[class *= 'selected-'] {
          c: 0 0 ac;
          [class *= 'homeIcon-'] { c: white }
        }
      }
    }
    [class*="unreadMentionsBar-"] {
      c: white 0 ac;
      box-shadow: bsh;
      transition: 0.15s ease;
      svg { c: white }
      &:hover { opacity: 0.8; }
    }
    /// Feat -> Minimize guild width.
    if ( min_guilds == 1 ) {
      transition: 0.3s cubic-bezier(0, 0, 0.2, 1);
      max-width: 10px;
      &:hover {
        max-width: (guild_size + 20px);
        transition-delay: 0.6s;
        + [class *= 'base-'] {
          left: (guild_size + 20px) i;
          transition-delay: 0.6s;
        }
      }
      + [class *= 'base-'] {
        transition: 0.3s cubic-bezier(0, 0, 0.2, 1);
        left: 10px i;
      }
    }
  }

  // Chat -> Search menu.
  [class *= 'resultsGroup-'] {
    // Message context menu.
    > [class*="item-"][class*="button-"] {
      c: cm;
      &:hover { c: fg 0 bd }
    }
    // * "Search for" selector.
    > [class*="queryContainer-"] {
      c: fg bg bd;
      // Text colors.
      [class*="queryText-"] { c: cm }
      [class*="queryText-"] strong { c: fg }
      // Shortcut button.
      [class*="queryShortcut-"] [class*="keybindShortcut-"] span {
        c: fg bg bd;
        box-shadow: inset 0 -4px ac;
      }
    }
    // Text color.
    [class*="header-"] { c: cm }
    [class*="searchLearnMore-"] [class*="anchor-"],
    [class*="plusIcon-"] { c: cm }
    // * Items.
    [class*="option"] {
      // Remove gradient.
      &::after { display: none; }
      // On event.
      &:hover, &[class*="selected-"] { c: 0 0 bd }
      // Text color.
      > strong { c: ac }
      [class*="filter-"] { c: fg }
      [class*="nonText-"] { c: cm }
      [class*="displayedNick-"] { c: fg }
      [class*="answer-"], [class*="displayUsername-"] {
        opacity: 0.6;
        c: cm;
      }
      [class*="resultChannel-"] {
        strong { c: ac }
        span, svg { c: cm }
      }
    }
    /// Wrapper.
    /.container-3ayLPN {
      rad: r;
      c: 0 0 hl;
      box-shadow: inner, bsh i;
    }
  }

  // * Calendar.
  [class*="datePicker-"] > div > div {
    c: cm 0 bg;
    [class*="__navigation"] { c: 0 bd }
    // * Month/year header.
    [class*="__header"] {
      c: cm 0 t;
      [class*="__current-month"] { c: fg bd }
      [class*="__day-name"] { c: cm }
    }
    // * Days.
    [aria-label^="day-"] {
      c: fg bd bg;
      // ? Select *only* days that are in the past.
      &:hover:not([class*="disabled"]) { c: fg 0 ac }
    }
    [class*="__day--outside-month"], [class*="__day--disabled"] {
      opacity: 0.6;
      c: cm bd bd;
    }
    [class*="__day--today"] {
      c: fg;
      &::after { c: 0 0 ac }
    }
  }
  // * Hints.
  [class*="datePicker-"] [class*="datePickerHint-"] {
    margin: 0;
    padding: 20px;
    c: 0 bg bd;
    span { c: cm }
    [class*="hintValue-"] {
      padding: 0 4px;
      c: fg 0 ac;
    }
  }

  // App -> Base.
  /// NOTE: Rewrites go here.
  [class *= 'base-'] {
    /// Global announcements (sort of).
    > [class *= 'noticePremium'] {
      rad: 0;
      c: white;
      background-image: linear-gradient(270deg, blue, violet);
      a[href]:hover {
        text-decoration: none;
        c: ac;
      }
    }
  }

  // * Main area.
  [class*="base"] {

    // Friends -> Title-bar.
    [class *= 'sidebar-'] + [class *= 'container-'] > [class *= 'container-'] {
      c: 0 0 hl;
      box-shadow: 0 1px bd;
      [class *= 'children-'] {
        &::after { display: none }
        [class *= 'numberBadge-'] { c: white 0 ac }
        [class *= 'title-'] { c: fg }
        [class *= 'divider-'] { c: 0 0 bd }
        [class *= 'tabBar-'] {
          c: 0 0 t;
          [class *= 'item-'] {
            padding: 0.375rem 0.5rem;
            transition: 0.15s ease;
            &:not([class *= 'primary-']):not([class *= 'selected-']) {
              c: cm 0 t;
              &:hover { c: 0 0 bd }
            }
            &[class *= 'selected-'] { c: fg 0 bd }
            &[class *= 'primary-'] { c: 0 0 ac }
            &[style *= '67\, 181\, 129']:not(#z) { c: white 0 green }
          }
        }
      }
      /// Library.
      > [class *= 'scroller-'] {
        c: 0 0 bg;
        [class *= 'header-'] { c: 0 0 t }
      }
      /// Store.
      /[class *= 'applicationStore-'] {
        c: 0 0 t;
        [class *= 'container-'], [class *= 'scroller-'] { c: 0 0 bg }
        [class *= 'headerBar-'] {
          c: 0 0 hl;
          + div::before {
            border-bottom: 1px solid bd i;
            box-shadow: none;
          }
        }
      }
    }

    /// Friends -> User/Activity tables.
    [class *= 'tabBody-'] {
      &::before { box-shadow: none i }
      [class *= 'peopleColumn-'] {
        c: 0 0 bg;
        [class *= 'title-'] { c: fg }
        header, [class *= 'subtext-'] { c: cm }
        [class *= 'actionButton-'] { c: 0 0 hl }
        [class *= 'ListItem-'] {
          c: 0 hl;
          &:hover {
            c: 0 0 hl;
            [class *= 'actionButton-'] { c: 0 0 bd }
            + [class *= 'ListItem-'] { c: 0 t }
          }
        }
        /// Scrollbars.
        [class *= 'scrollbar-'] {
          &, [class *= 'pad-'] { c: 0 0 bg }
          [class *= 'track-'] { c: 0 bg bd }
        }
      }
      [class *= 'nowPlayingColumn-'] {
        border-left: 1px solid bd;
        c: 0 0 hl;
        h3 { c: cm }
        [class *= 'emptyCard-'] {
          c: 0 0 bd;
          h5 { c: fg }
          div { c: cm }
        }
        [class *= 'itemCard-'] {
          c: 0 0 bd;
          [class *= 'Secondary-'] { c: cm }
          [class *= 'inset-'] {
            c: 0 0 hl;
            h4 { c: fg }
            div { c: fg }
          }
        }
      }
    }

    // Friends -> Add friend.
    [class *= 'addInputWrapper-'] {
        h2 + div { c: cm }
        h2, input { c: fg }
        form { c: fg bd hl }
        /[class *= 'sectionHeader-'] { c: 0 bd }
    }

    // Sidebar -> Channels.
    [class*="sidebar-"] {
      border-right: 1px solid;
      c: 0 bd hl;
      /// Remove background.
      [class *= 'scroller-'], > [class *= 'container-'] { c: 0 0 t }
      // ? Guild name/menu.
      [class *= 'header-'] {
        c: fg;
        box-shadow: 0 1px bd;
        &:hover, ../ [class *= 'selected-'] > header { c: 0 0 bd }
      }
      // ? Remove unnecessary shadow on notification bar.
      [class*="positionedContainer-"] > [class*="unread"] > div {
        box-shadow: none i;
      }

      // Notices.
      [class*="channelNotice-"] {
        c: 0 0 hl;
        box-shadow: inset 0 -1px bd;
        [class*="message-"] {
          c: cm;
          [class*="btn-"] {
            transition: 0.15s ease;
            c: white bd ac;
            &:hover { opacity: 0.8 }
          }
        }
        // Custom close button.
        [class*="close"] {
          background: none;
          > div::before { content: 'X' }
        }
      }

      // ? Guild mentions.
      [class *= 'numberBadge-'], [class *= 'bar-'][class *= 'mention-'] {
        c: white 0 ac;
      }

      // ? Channels.
      // Channel containers.
      [class*="containerDefault-"] {
        /// Defaults.
        :not([class *= 'mode']) [class *= 'content-'] {
          > svg path, > [class*="name-"] {
            opacity: 0.6;
            c: cm;
          }
        }
        /// Unread messages.
        [class *= 'modeUnread-'] {
          [class *= 'unread-'] { c: 0 0 cm }
          [class *= 'name-'] { c: fg }
        }
        /// Muted channels.
        [class *= 'modeMuted-'] {
          [class *= 'name-'], [class *= "icon-"] {
            opacity: 0.3;
            c: cm;
          }
        }
        /// Muted/locked channels.
        [class *= 'muted-'],
        [class *= 'modeLocked-'] {
          [class *= 'name-'] {
            opacity: 0.6;
            c: cm;
            &:hover { c: fg }
          }
        }
        /// Collapsed.
        [class *= 'clickable-'], [class *= 'collapsed-'] {
          [class *= 'name-'] { c: cm }
          &:hover > header { c: fg }
        }
        // On event.
        &:hover, &[class*="selected-"] {
          [class *= 'content-'] {
            c: 0 0 bd;
            [class *= 'name-'] { c: fg }
            [class *= 'icon-'] path { opacity: 0.6 }
          }
        }
        // Voice channels.
        [class*="listDefault-"] {
          [class*="clickable-"]:hover, [class*="selected-"] {
            > [class*="content-"] { c: 0 0 bd }
            [class*="username"] { c: fg }
          }
        }
      }

      // ? Reset scroller padding so it takes less space.
      [class*="scrollerWrapPolyfill"] > [class^="scroller-"] {
        padding: 0 10px 0 0 i;
      }
      /// Scrollbar reset.
      [class *= 'scrollbar-'] {
        &, [class *= 'pad-'] { c: 0 0 hl }
        [class *= 'thumb-'] { c: 0 hl }
        [class *= 'track-'] { c: 0 hl }
      }
    }

    // Sidebar -> Members list.
    [class *= 'membersWrap-'] [class *= 'members-'] {
      border-left: 1px solid bd;
      c: 0 0 hl;
      [class *= 'Group-'], [class *= 'activity-'] { c: cm }
      [class *= 'member-'] {
        rad: r;
        c: cm;
        &:hover, &:active, &[class *= 'selected-'] {
          > div { c: fg 0 bd }
        }
      }
      /// Scrollbar reset.
      &, /[class*="ingScroller-"] {
        + [class *= 'scrollbar-'] {
          &, [class *= 'pad-'] { c: 0 0 hl }
          [class *= 'thumb-'], [class *= 'track-'] { c: 0 hl }
        }
      }
    }
    [class *= 'systemPad-'] { padding-right: 8px }

    // Sidebar -> Search bar.
    [class *= 'privateChannels-'] > [class *= 'searchBar-'] {
      box-shadow: 0 1px bd;
      [class *= 'searchBarComponent-'] {
        c: cm bd bd;
        input { c: fg }
      }
    }

    // * Search bar in guilds, groups and DMs.
    [class*="search-"] {
      > [class*="searchBar-"] {
        width: auto;
        min-width: 144px;
        rad: r;
        transition: min-width 0.2s ease-in-out 0.1s;
      }
      // ? On event.
      &[class*="focused"] {
        > [class*="searchBar-"][class*="searchBar-"] {
          min-width: 240px;
          c: 0 0 bd;
          box-shadow: 0 2px 4px -2px shadow, inner;
        }
      }
      // ? Some magic for placeholder text.
      [class*="Placeholder"]:not([class*="hasFocus"]) { c: cm }
      & + [class*="divider-"] {
        opacity: 0.2;
        c: 0 0 cm;
      }
    }

    // Chat.
    [class *= 'chat-'] {
      c: 0 0 bg;
      /// Channel title-bar.
      > [class *= 'title-'] {
        c: 0 0 hl;
        box-shadow: 0 1px bd i;
        [class *= 'title-'] { c: fg }
        [class *= 'topic-'], [class *= 'nicknames-'] { c: cm }
        // Remove wrapper gradient.
        [class *= 'children-']::after { display: none }
        /// Nicknames.
        [class *= 'akaBadge-'] {
          c: fg 0 bd;
          box-shadow: bsh;
        }
        [class *= 'divider-'], [class *= 'topic']::before { c: 0 0 bd }
        /// Chat -> Remove top shadow.
        + [class ^= 'content-']::before { content: none }
      }

      // ? Title-bar search messages.
      [class*="search-"] [class*="searchBar-"] {
        height: unset;
        padding: 0.125rem 0.25rem;
        c: cm 0 bd;
        box-shadow: inner;
        // Input text color.
        [class*="DraftEditor-"] { c: cm }
        // Blocks.
        [class*="searchFilter-"], [class*="searchAnswer"] {
          c: fg 0 bd;
        }
        [class*="searchFilter-"] { rad: r 0 0 r }
        [class*="searchAnswer-"] { rad: 0 r r 0 }
      }

      // ? Group DM header.
      [class*="groupDM-"] [class*="input-"] {
        c: fg;
        input[class*="input-"]:focus { c: 0 0 bg }
      }

      /// Channel -> NSFW warning.
      > [class *= 'content-'] > div > div > [class *= 'wrapper-'] {
        [class *= 'title-'] { c: fg }
        [class *= 'description-'] { c: cm }
        [class *= 'separator-'] { c: 0 0 bd }
      }
      /// Channel -> Welcome section.
      [class *= 'welcomeMessage-'] {
        position: relative;
        h1, strong { c: fg }
        p { c: cm }
        a { c: ac }
        [class *= 'base-'] {
          filter: invert(calc((1 + var(--icinvert)) * var(--icinvert))) i;
          c: 0 t;
        }
        &::after {
          content: '';
          position: absolute;
          right: 20px; bottom: 0; left: 20px;
          border-bottom: 1px solid bd;
        }
      }
      /// Load more messages bar.
      [class *= 'hasMore-'] {
        border: 1px solid bd;
        c: cm 0 hl;
        box-shadow: bsh;
        transition: 0.15s ease;
        &:hover { c: fg }
      }
      /// New messages.
      [class *= 'newMessagesBar-'] {
        rad: 0 0 r r;
        c: 0 0 bd;
        box-shadow: bsh;
        button {
          c: cm;
          ../:hover button { c: fg }
        }
      }
      /// Jump to present.
      [class *= 'jumpToPresentBar-'] {
        rad: r r 0 0;
        c: 0 0 hl;
        box-shadow: bsh;
        button {
          c: cm;
          ../:hover button { c: fg }
        }
      }

      // * Spinners.
      [class*="spinner-"] {
        // Loading messages.
        [class*="wanderingCubesItem-"] { c: 0 0 ac }
        // Someone is typing.
        [class*="pulsingEllipsisItem-"] { c: 0 0 fg }
      }

      > div {
        /// Chat wrapper.
        [class ^= 'messagesWrapper-'] {
          /// Inputbar pseudo-element background.
          & + form::before { background: none i }
          // ? LocalBot messages.
          [class*="isLocalBot-"] {
            c: cm green bg;
            background-image: linear-gradient(60deg, t 50%, bd);
            box-shadow: outer;
            [class*="localBotMessage-"] a { c: ac }
          }
        }
        /// Greeters.
        [class *= 'container-' ] {
          /// Group welcome message.
          [class *= 'wrapper-' ] + h1 {
            c: fg;
            + div { c: cm }
          }
          /// Guild/group group announcements.
          > [class *= 'content-' ] {
            c: cm;
            a { font-weight: bold; c: fg }
            time { opacity: 0.6; c: cm }
          }
        }
        /[class *= 'default-'][class *= 'base-'] {
          h1 { c: fg }
        }
      }

      /// Messages.
      [class*="messages-"] {
        c: 0 0 t;
        /// Compact -> Message timestamps.
        [class *= 'messageCompact-'] {
          /[class *= 'timestampCompact-'],
          [class *= 'timestamp']:not([class *= 'VisibleOnHover-']),
          &:hover [class *= 'VisibleOnHover-'] {
            c: cm;
          }
        }
        /// Message elements.
        [class*="edited-"],
        [class *= 'timestamp-'] > span {
          opacity: 0.5;
          c: cm;
        }
        [class^="markup-"] {
          c: fg;

          &[class *= 'isFailed-'] { c: red }
          a { c: ac }

          // Quotes.
          [class*="blockquoteContainer-"] {
            [class*="Divider-"] { c: 0 0 cm }
            blockquote { c: cm }
          }

          // Spoilers.
          [class*="spoilerText-"] {
            position: relative;
            rad: r;
            c: 0 0 t;
            &::before {
              z-index: -1;
              content: '';
              pos: 0 0 0 0;
              rad: r;
              position: absolute;
              c: 0 0 hl;
              opacity: 0.5;
            }
            &[class*="hidden-"] {
              rad: r;
              transition: 0.15s ease;
              c: 0 0 bd;
              &:hover { opacity: 0.8 }
            }
          }
        }

        /// Options.
        [class *= 'buttons-'] [class *= 'wrapper-'] {
          c: fg bd hl;
          box-shadow: bsh, inner;
          &:hover, &:focus-within {
            box-shadow: 0 4px 8px sh, inner i;
          }
          [class *= 'button-']:hover { c: 0 0 #88888810 }
          [class *= 'selected-'] { c: fg 0 bd }
        }

        // Attachments.
        [class*="attachment-"] {
          rad: r;
          c: 0 bd hl;
          box-shadow: bsh;
          [class*="fileNameLink-"] { c: ac }
          [class*="metadata-"] { c: fg }
          [class*="filenameWrapper-"] * { c: cm }
          [class*="progress-"] { c: 0 0 bd }
          [class*="progressBar-"] { c: 0 0 ac }
        }

        /// Reactions.
        [class *= 'reaction-'] {
          /[class *= 'reactions'] { padding: 0.25rem 0 }
          c: cm 0 bd;
          [class *= 'Count-'] { color: inherit }
          &:hover { c: fg }
          &[class *= 'Me-'] {
            c: ac;
            background: linear-gradient(90deg, ac -800%, t 400%);
          }
        }
        /// Message.
        [class *= 'message-']:not([class *= 'mentioned-']) {
          &[class *= 'selected-'],
          &:not([class *= 'zalgo-']),
          /.mouse-mode ^[-1..-3]:hover {
            c: 0 0 t;
            &::before {
              content: '';
              z-index: -1;
              opacity: 0.5;
              position: absolute;
              pos: 0 0 0 0;
              c: 0 0 hl;
              if ( chat_shorter == 1 ) { rad: r }
            }
          }
        }
      }

      /// Mention bar.
      [class *= 'mentioned-'] {
        c: 0 0 t;
        /// Bar.
        &::before {
          z-index: -1;
          content: '';
          pos: 0 0 0 0;
          position: absolute;
          overflow: hidden;
          c: 0 t ac;
          if ( chat_shorter == 1 ) { rad: 3px 0 0 3px }
        }
        /// Background.
        &::after {
          z-index: -1;
          content: '';
          pos: 0 0 0 0;
          opacity: 0.1;
          position: absolute;
          c: 0 ac ac;
          if ( chat_shorter == 1 ) { rad: 3px }
        }
        &:hover::after { opacity: 0.13 }
      }

      /// Message dividers.
      [class *= 'hasContent-'] > [class *= 'content-'] {
        c: cm hl bg;
        &::before, &::after { c: 0 0 bd }
      }
      /// New messages.
      [class *= 'isUnread-'] {
        c: 0 blue;
        > [class *= 'unreadPill-'] {
          c: white 0 blue;
          svg path { v: blue blue }
        }
      }

      // * Invite embed.
      [class*="wrapper-"][class*="userSelectNone"] {
        margin-top: 0.5rem;
        rad: r;
        c: 0 bd hl;
        box-shadow: inner;
        [class*="title-"], [class*="guildDetail-"] { c: cm }
        [class*="guildName-"], [class*="count-"] { c: fg }
        [class*="guildNameExpired-"] { c: red }
        [class*="Outlined-"] {
          c: 0 bd bd;
          &:hover { opacity: 0.8 }
        }
      }

      // * Spotify party invite.
      [class*="invite-"][class*="container-"] {
        rad: r;
        c: 0 bd hl;
        [class*="coverImaageWrapper-"] { rad: 0 r r 0 }
        [class*="helpIcon-"] { c: 0 0 bd }
        [class*="header-"] { c: cm }
        [class*="partyStatus-"], [class*="textLink-"] { c: fg }
      }

      // * Typing section.
      [class^="typing"] {
        c: fg 0 t;
        [class^="text"], [class^="cooldownWrapper"] { c: cm }
        [class^="text"] strong { c: fg }
      }

      /// Announcements 'follow' bar or 'you must be a member'.
      [class *= 'form-'] {
        > [class *= 'wrapper-'] {
          c: 0 0 bd;
          box-shadow: bsh;
          [class *= 'content-'], h3 { c: $fg }
          span { c: cm }
        }
      }
    }
  }

  /// Inputbar.
  [class *= 'channelTextArea-'] {
    c: 0 bd hl;
    /// Fix rounded corners.
    &, > div { rad: r i }
    /// Visible message content while editing/writing a message.
    [class *= 'scrollableContainer-'] {
        max-height: var(--textarea) i;
        border: 1px solid bd i;
        c: 0 0 bd;
    }
    // Input container.
    [class *= 'inner-'] {
      c: 0 0 hl;
      [class *= 'buttons-'] { align-self: center }
      /// Line height of inputbar.
      [class *= 'textArea-'] > div { line-height: 1.375 i }
    }
    [class *= 'attachWrapper-'] { c: 0 bd }
    // Input text color.
    [class *= 'placeholder-'], textarea { c: cm }
    [class *= 'slateTextArea-'] { caret-color: fg; c: fg }
    // Dividers.
    [class*="divider"], [class*="Divider"] { c: 0 0 bd }
    /// Rounded corner tweaks.
    &[class *= 'hasAutocomplete-'] {
      > div { rad: 0 0 r r i }
      > [class *= 'autocomplete-'] { rad: r r 0 0 i }
    }
    // ? Emojis, mentions, commands popout.
    [class*="autocomplete-"][class*="autocomplete-"] {
      margin-bottom: -10px i;
      rad: r r 0 0 i;
      c: 0 0 hl;
      border: 1px solid bd;
      box-shadow: none i;
      [class*="header-"] {
        box-shadow: 0 1px bd;
        [class*="backButton-"], [class*="title-"] { c: fg }
        [class*="searchBar-"] {
          c: 0 0 bg;
          box-shadow: inner;
          input[class] { c: fg bd bg }
        }
      }
      [class*="content-"] {
        [class*="result-"] {
          &::after { rad: r }
          &:hover::after {
            box-shadow: inset 0 0 0 2px ac, inset 0 0 0 3px bg;
          }
          [class*="gif-"] { rad: r }
        }
        [class*="Fade-"] {
          opacity: 0.8;
          rad: r;
          c: 0 0 bd;
        }
        [class*="FadeBlurple-"] {
          opacity: 0.8;
          rad: r;
          c: 0 0 ac;
        }
        [class*="emptyHintCard-"] {
          rad: r;
          c: fg 0 bd;
        }
        [class*="Text-"] { c: cm }
        [class *= 'colorStandard-'] { c: fg }
      }
      [class*="autocompleteInner-"] {
        border: none i;
        // Command mode icons.
        [class*="iconForeground"] { v: fg }
        // Title/description selectors.
        [class*="Title"], [class*="description"] { c: cm }
        [class*="contentTitle"] strong { c: fg }
        // Main content.
        [class*="content-"] { c: fg }
        [class*="selectorSelected-"] { c: 0 0 bd }
      }
    }
    /// Rich markdown.
    [class *= 'fakeLink-'] { c: ac }
    [class *= 'codeBlockLang-'] { c: green }
    [class *= 'Syntax-'], [class *= 'After-'], [class *= 'Before-'] { c: cm }
    pre, [class *= 'inlineCode-'] {
      font-family: var(--codearea);
      c: 0 0 bd;
    }
    /// Operations in editing mode.
    + [class *= 'operations-'] {
      c: cm;
      a { c: fg }
    }
    /// Hide scrollbar.
    ::-webkit-scrollbar {
      background: hl i;
      &-track { &, &-piece, &-thumb { visibility: hidden i }}
    }
  }

  /// Embeds.
  [class *= 'embedWrapper-'] {
    c: fg 0 hl;
    box-shadow: inner;
    /// Base text.
    [class *= 'Provider-'], [class *= 'Description-'] {
      c: cm;
      a { c: ac }
    }
    /// Fields.
    [class *= 'FieldName-'] { c: fg }
    [class *= 'FieldValue-'] { c: cm }
    /// Titles.
    [class *= 'Title-'], [class *= 'AuthorName-'] { c: fg }
    /// Links.
    [class *= 'anchor-'], [class *= 'Link-'] { c: ac }
    /// Footer.
    [class *= 'FooterText-'] { c: cm }
    /// GitHub repository.
    &[style *= 'rgb(30\, 35\, 39)'] { c: 0 bd }
    /// Do not override color bars if a color is already applied.
    &:not([style *= 'border-color']) { c: 0 bd }
  }

  // * Emote menu.
  [class*="emojiPicker-"] {
    rad: r;
    c: cm bd bg;
    box-shadow: outer, bsh;
    // Header.
    [class*="header-"] {
      box-shadow: 0 1px bd;
      input { c: fg }
      [class*="searchBar-"] { c: 0 0 hl }
    }
    // Frequently used.
    [class*="stickyHeader-"] { c: 0 0 bg }
    [class*="category-"], [class*="sadImage-"] + div { c: cm }
    // Selected emote.
    [class*="row-"] [class*="selected-"] { c: 0 0 ac }
    // Selected category.
    [class*="categories-"] {
      c: 0 0 bd;
      [class*="item-"] {
        &[class*="selected-"] { c: 0 ac }
        &:hover { c: 0 bd }
      }
    }
    // Dimmed overlay.
    [class*="visible-"]:not([class*="icon-"] ) {
      opacity: 0.8;
      c: 0 0 bg;
    }
    // Diversity selector.
    [class*="popout-"] {
      padding: 2px;
      c: 0 bd bg;
      box-shadow: 0 2px 4px -1px shadow;
      [class*="item-"]:hover { c: 0 0 bd }
    }
    /// Scrollbars -> Fix thumb height.
    [class *= 'thumb-'] { min-height: 14px }
    // ? Fix 'no matching emoji' image.
    [class*="sadImage-"] {
      filter: invert(calc((var(--icinvert)) + 0.8)) i;
    }
    [class *= 'infoBar-'] {
      c: 0 0 hl;
      box-shadow: inset 0 1px bd;
      [class *= 'EmojiName-'] { c: fg }
      [class *= 'GuildName-'] { c: cm }
    }
  }

  // Sidebar -> Private channels.
  [class^="privateChannels-"] {
    c: 0 0 t;
    /// Headers.
    [class *= 'header'] {
      c: cm;
      box-shadow: none i;
    }
    /// Invite button.
    svg[class *= 'InviteButton'] { c: cm }
    /// Channels.
    [class^="channel-"] {
      c: fg;
      /// Text.
      [class^="name-"] { c: fg }
      [class^="activity-"] { c: cm }
      /// Different states.
      &:hover, &:active, &[class*="selected-"] {
        > * {
          c: 0 0 bd;
          [class*="name-"] { c: fg }
          [class*="status-"] { c: 0 bd }
        }
      }
      /// Fade similarly to guild channels.
      &:not(:hover):not([class*="selected-"]) {
        [class *= 'name-'], [class *= 'activity-'] { opacity: 0.6 }
      }
    }
    [class *= 'systemPad-'] { padding-right: 8px }
  }

  // Chat -> Search results.
  [class *= 'searchResultsWrap-'] {
    border-left: 1px solid bd;
    c: 0 0 bg;
    [class *= 'searchHeader-'] {
      c: 0 0 hl;
      box-shadow: inset 0 -1px bd i;
      /// Text.
      [class *= 'totalResults-'] {
        opacity: 1;
        c: cm;
      }
      /// Tabs.
      [class *= 'tab-'] {
        opacity: 1;
        c: cm;
        border-width: 1px i;
        &:hover { c: fg t }
        &[class *= 'selected-'] { c: fg ac }
      }
    }
    [class *= 'scrollerWrap-'] {
      /// Name and separator.
      [class *= 'channelSeparator-'] {
        &::before { c: 0 bd }
        [class *= 'channelName-'] { c: fg 0 bg }
      }
      /// Single result.
      [class *= 'searchResult-'] {
        overflow: unset i;
        &[class *= 'expanded-'] {
          rad: r;
          border-width: 1px;
          c: 0 bd hl;
          > div:last-of-type {
            border-top-width: 1px;
            rad: 0 0 r r i;
          }
          [class *= 'hit-'] { c: 0 0 bd; box-shadow: none }
          [class *= 'before-'], [class *= 'after-'] { c: 0 0 hl }
        }
        /// Remove msg gradients.
        &::before, &::after { content: none i }
        /// Matching message.
        [class *= 'hit'] {
          border-width: 1px i;
          c: 0 bd hl;
          box-shadow: bsh;
          ../:not([class *= 'expanded-']) [class *= 'hit'] { rad: r }
        }
        [class *= 'jumpButton-'] { c: fg 0 bd }
        [class *= 'timestamp'] { c: cm }
        [class *= 'markup-'] {
          c: fg;
          [class *= 'anchor-'] { c: ac }
          &[class *= 'embed-'] { c: 0 0 bg }
        }
      }
      /// Pages.
      [class *= 'pagination-'] {
        padding-bottom: 10px;
        c: cm;
        > div[class] {
          c: fg;
          background: none;
          transform: unset;
          &::before { padding: 4px 8px }
          &:not([class *= 'disabled-']) { opacity: 1 }
          &[class *= 'Next-']::before { content: '→' }
          &[class *= 'Previous-']::before { content: '←' }
        }
      }
    }
  }

  // * Gifted Nitro wrapper.
  [class*="applicationTile-"] {
    c: 0 0 bd;
    box-shadow: outer;
    [class*="description-"] {
      c: cm;
      [class*="gameTitle-"] { c: fg }
      [class*="tagline-"], [class*="metadata-"] { c: cm }
    }
  }

  /// Chat -> General styles.
  [class *= 'markup-'] {
    /// Code.
    code {
      font-family: var(--codearea) i;
      &.inline {
        padding: 2px 4px;
        c: 0 0 hl;
        box-shadow: inner;
      }
    }
    pre {
      rad: r;
      c: 0 bd hl;
      border-width: 1px i;
      code {
        rad: r;
        c: fg bd t;
        // Feat -> Code line numbers.
        if ( code_ln == 1 ) {
          position: relative;
          padding-left: 2.75em i;
          &::before {
            width: 2ch;
            opacity: 0.3;
            overflow-y: hidden;
            position: absolute;
            pos: 0.5em 0 0.5em 0;
            padding: 0 0.5em 0 1em;
            white-space: pre-line;
            text-align: right;
            c: fg;
            content: '1 2 3 4 5 6 7 8 9 10'  \
             '11 12 13 14 15 16 17 18 19 20' \
             '21 22 23 24 25 26 27 28 29 30' \
             '31 32 33 34 35 36 37 38 39 40' \
             '41 42 43 44 45 46 47 48 49 50' \
             '51 52 53 54 55 56 57 58 59 60' \
             '61 62 63 64 65 66 67 68 69 70' \
             '71 72 73 74 75 76 77 78 79 80' \
             '81 82 83 84 85 86 87 88 89 90' \
             '91 92 93 94 95 96 97 98 99';
          }
        }
      }
    }
    /// Syntax highlighting.
    .hljs {
      &-name, &-title, &-section { c: blue }
      &-selector-class, &-selector-id { c: blue }
      &-attr, &-attribute, &-type { c: orange }
      &-class, &-template-variable, &-variable { c: orange }
      &-built_in, &-deletion { c: red }
      &-doctag, &-literal, &-meta &-meta-string { c: cyan }
      &-number, &-regexp, &-string { c: cyan }
      &-addition, &-keyword, &-selector-tag { c: green }
      &-comment, &-quote { c: cm }
    }
    /// Mentions.
    .mention {
      padding: 0 0.125rem;
      position: relative;
      text-decoration: none;
      rad: 3px;
      c: 0 0 t;
      &:not([style ^= 'color']) { c: ac }
      &::before {
        content: '';
        pos: 0 0 0 0;
        opacity: 0.2;
        position: absolute;
        rad: 3px;
        c: 0 0 ac;
        transition: 0.2s ease;
      }
      &:hover, &[class *= '-open'] {
        &::before { opacity: 0.4 }
      }
    }
    /// Chat -> Code block defaults.
    /[class *= 'codeLine-'], /[class *= 'codeBlockText-'] {
      c: fg;
      font-family: var(--codearea) i;
    }
  }

  // Global -> QuickSwitcher.
  [class *= 'quickswitcher-'] {
    [class *= 'scroller-'] { c: 0 0 t }
    &:not([class *= 'channelNotice-']) {
      border: 1px solid bd;
      c: fg 0 bg;
      box-shadow: 0 4px 8px shadow;
    }
    /// Inputbox.
    [class *= 'input'] {
      padding: 12px 8px;
      height: unset;
      line-height: unset;
      border: 1px solid bd;
      c: fg 0 hl;
      box-shadow: bsh;
      &:focus { c: 0 ac }
    }
    /// Results.
    [class *= 'result-'] {
      &[class *= 'Focused-'] {
        rad: r;
        c: 0 0 hl;
      }
      /// Unread messages badge.
      [class *= 'badge-'] {
        c: white 0 ac;
        box-shadow: 2px 2px bd;
      }
      /// Text.
      [class *= 'misc-'], [class *= 'note-'] { c: cm }
      [class *= 'Unread-'] [class *= 'match-'] { c: fg }
      [class *= 'Default-'] [class *= 'match-'] { c: cm }
    }
    /// Footer.
    [class *= 'tipsWithResults-'] {
      c: 0 bd;
      [class *= 'tips'] { c: cm }
    }
    /// Keybinds.
    [class *= 'keybindShortcut-'] {
      &::before { c: 0 0 bd }
      span {
        c: cm bd hl;
        box-shadow: inset 0 -4px bd;
        [class *= 'bindArrow-'] > g { v: cm }
      }
    }
  }

  // Global -> Context menu.
  [class*="contextMenu-"] {
    rad: r;
    c: 0 0 bg;
    box-shadow: 0 2px 4px -1px shadow, outer i;
    [class *= 'caret-'] path { v: cm }
    [class *= 'clickable-']:hover, [class *= 'selected-'] { c: fg 0 hl }
    [class *= 'checkbox-'] {
        c: 0 0 hl;
        [class *= 'Element-']:checked + span { c: 0 ac ac }
        [class *= 'Inner-'] span { c: 0 bd }
    }
    [class *= 'itemBase-'] {
      c: 0 bd;
      [class *= 'item-'] {
        rad: 0;
        c: cm;
        &:hover { c: fg 0 hl }
      }
      [class *= 'label-'] { c: cm }
    }
    // Fix scrolllbars.
    [class*="firefoxFixScrollFlex-"] {
      overflow-x: hidden;
      rad: r;
      // ! Ugh... Native scrollbars. )=
      [class*="scroller-"] + [class*="scrollbar-"] {
        // top: 1px; right: 1px; bottom: 1px;
        rad: 0 r r 0;
      }
    }
  }

  // * ReactSelect dropdown.
  .Select {
    &-control { c: cm bd bg }
    &-value-label { c: cm }
  }
  // Modals -> Notifications overrides.
  div[class*="select-"] > [class*="-container"] {
    > [class*="-control"] {
      c: 0 bd hl;
      transition: 0.15s ease;
      [class*="-placeholder"] {
        opacity: 1;
        c: cm;
      }
      &:hover { box-shadow: 0 2px 4px 0 shadow }
    }
    > [class*="-menu"] {
      c: 0 bd bg;
      box-shadow: 0 2px 4px 0 shadow;
      > * { c: 0 0 hl }
      // Selected item.
      [class*="-1gnr91b-"], [class*="-option"]:hover { c: 0 0 bd }
    }
  }

  // Global -> Select dropdown component.
  [class *= 'select-'][role] {
    c: $fg bd bg;
    /// Custom status popout.
    /[class *= 'popouts-'] .popout-2sKjHu {
      c: 0 bd bg;
      [class *= 'option-'] {
        c: fg;
        &:hover, &[class *= 'optionActive-'] { c: 0 0 hl }
      }
    }
  }

  // Popouts -> Recent mentions.
  [class *= 'messagesPopoutWrap-'] {
    border: 1px solid;
    rad: r;
    c: fg bd bg;
    box-shadow: 0 4px 8px shadow i;
    [class *= 'messagesPopout-'] { c: 0 0 t }
    /// Header.
    > [class *= 'header-'] {
      c: 0 0 hl;
      box-shadow: inset 0 -1px bd;
      h3, [class *= 'title-'] { c: fg }
      /// Tabs.
      [class *= 'tabBarItem-'] {
        border-bottom-width: 1px;
        &[style *= 'tr']:not(#z) { c: cm }
        &:not([style *= 'tr']):not(#z) { c: fg ac }
      }
      /// Filters.
      [class *= 'mentionFilter-'] {
        [class *= 'label-'] { c: cm }
        [class *= 'value-'] { c: fg }
      }
    }
    [class*="channelSeparator-"] {
      [class*="channel"] { c: fg }
      [class*="guild"] { c: cm }
    }
    [class^="messageGroupWrapper-"] {
      rad: r;
      c: fg bd hl;
      box-shadow: 0 2px 8px shadow;
      [class*="Meta-"] *:not([class*="username-"]) { c: cm }
      [class *= 'markup-'] > a[class *= 'anchor-'] { c: ac }
      [class *= 'embedWrapper-'] { c: 0 0 bd }
      [class*="markup-"], [class*="embed"] {
        c: fg;
        &::before, &::after { display: none }
        .mention {
          rad: 3px;
          c: white 0 ac;
        }
      }
    }
    [class^="jumpButton"] { c: fg t bd }
    [class^="actionButtons"] {
      transition: none i;
      c: fg t t;
      box-shadow: none i;
    }
    /// No mentions.
    [class*="emptyPlaceholder-"] {
      [class*="body-"] { c: cm }
      [class *= 'image-'] { filter: brightness(220%) }
    }
    [class*="footer-"][class*="footer-"] {
      c: 0 0 hl;
      box-shadow: inset 0 1px bd;
      [class *= 'statusGreen-'] { c: green }
      [class*="tip-"] { c: fg }
    }
  }

  // * Settings.
  [class*="standardSidebarView-"] {
    c: 0 0 bg;
    // * Sidebar.
    [class*="sidebarRegionScroller-"] {
      c: cm 0 t;
      [class*="separator-"] { c: 0 0 bd }
      [class*="header-"] { c: cm }
      // Menu items!
      [class*="item-"] {
        rad: r;
        transition: 0.15s ease;
        c: cm;
        &[class*="selected-"] { c: white 0 ac }
        &:hover:not([class*="selected-"]) { c: fg 0 bd }
        // Nitro.
        &[style*="rgb(114"] {
          c: blue 0 t;
          &:hover { c: white 0 blue }
        }
        // Logout.
        &[style*="rgb(240"] {
          c: red;
          &:hover { c: white 0 red }
        }
      }
    }
    // * Main content.
    [class*="contentRegion-"] {
      c: 0 0 bg;
      box-shadow: inset 1px 0 bd;
    }
    [class*="contentRegionScroller-"] {
      c: fg 0 bg;
      box-shadow: inset 1px 0 bd;
      // Text colors.
      [class*="titleDefault-"], [class*="title-"] { c: cm }
      [class*="description-"] {
        c: fg;
        [class*="anchor-"] { c: ac }
      }
      [class*="divider-"] { c: 0 bd t }
      [class*="value-label-"] { c: fg }
      // Buttons.
      [class*="removeButton-"] {
        c: cm;
        &:hover { c: red }
      }
      // ? User info.
      [class*="userInfo"][class*="cardPrimary-"] {
        rad: r;
        c: 0 bd hl;
        small { c: cm }
        [class*="viewBody-"] {
          c: fg;
          span[style*="opacity"] { opacity: 1 i }
        }
        [class*="faded-"] { c: cm }
        [class*="avatarUploaderInner-"] {
          c: 0 0 bd;
          &:hover { box-shadow: none }
          // Avatar container.
          > div:first-child {
            opacity: 0;
            rad: 50%;
            visibility: visible;
            c: white 0 bd;
            transition: 0.15s ease-in;
            ../:hover > div:first-child { opacity: 0.9 }
          }
        }
      }
      [class*="avatarUploaderIndicator-"] {
        c: 0 0 bd;
        box-shadow: bsh;
      }
      // ? Consent element.
      [class*="consent-"] {
        rad: r;
        c: 0 bd bg;
        box-shadow: inner;
        [class*="title-" i] { c: fg }
        [class*="body-" i] { c: cm }
      }
      // ? Select component.
      [class*="-control"] {
        c: cm bd bg;
        div { color: inherit }
        + [class*="-menu"] {
          c: 0 bd bg;
          box-shadow: bsh;
          span { c: cm }
          [class*="-option"]:hover, [class*="12o7ek3"] {
            c: 0 0 bd;
            span { c: fg }
          }
        }
      }
      // Add role button.
      [class*="actionButton-"] {
        transition: 0.15s ease;
        c: cm bd bg;
        &:hover { c: 0 0 bd }
        svg path { v: cm }
      }
    }
    [class *= 'sidebarScrollable-'] [class *= 'scroller-'] { c: 0 0 t }
    // * Close button.
    [class*="closeButton-"] {
      c: 0 bd;
      transition: 0.2s ease;
      &:hover { c: 0 0 bd }
      path[fill*="#dcddde"] { v: cm }
      + [class*="keybind"] { c: cm }
    }
    // * Audit log.
    [class*="auditLog-"] {
      c: cm bd 0;
      [class *= 'divider-'] { c: 0 0 bd }
      // Different headers.
      [class*="headerClickable"] { c: cm 0 hl }
      [class*="headerExpanded"] { c: cm 0 bd }
      [class *= 'changeDetails-'] { c: 0 0 hl }
      // Text colors.
      [class*="userHook-"] {
        strong, > span:first-child, { c: fg }
      }
      // Metadata.
      [class*="changeStr-"], [class*="timeWrap-"] {
        &, strong { c: fg }
      }
      // Discriminators and secondary text.
      [class*="discrim-"], [class*="timestamp-"] {
        opacity: 1;
        c: cm
      }
      // Colors.
      [class*="typeUpdate-"] { c: yellow }
      [class*="typeCreate-"] { c: green }
      [class*="typeDelete-"] { c: red }
    }
    // Change server region.
    [class*="container-"][role="button"] {
      c: 0 bd hl;
      [class*="name-"] { c: fg }
      [class*="button-"] {
        rad: r;
        &[class*="colorGrey-"] { c: cm 0 bd }
        ../ [class*="button-"] { c: fg 0 bd }
        /[class *= 'regionSelectModalOption-'] {
          c: 0 bd hl;
          div { transition: transform 0.2s ease; c: fg }
          &:hover div { transform: scale(1.2) }
        }
      }
    }
    // Connected accounts.
    [class*="connectedAccounts-"] button[class] {
      rad: r;
      c: 0 bd bd;
      &:hover { transform: translateY(4px) }
    }
    // Confirm/reset the settings.
    [class*="elevationHigh-"] {
      &[style*="rgba(32"] {
        c: 0 0 bd;
        box-shadow: 0 2px 8px shadow;
        [style*="rgb(255"] { c: fg }
      }
      &[style*="rgba(24"], &[style*="rgb(29"] {
        c: 0 0 red;
        box-shadow: 0 2px 8px shadow;
        [style*="rgb(255"] { c: white }
      }
    }
    // Connected accounts.
    [class*="elevationLow-"] {
      box-shadow: 0 2px 8px shadow;
      &[style*="background-color: rgb(0\, 154"] { c: 0 0 cyan }
      &[style*="background-color: rgb(203\, 33"] { c: 0 0 red }
      &[style*="background-color: rgb(29\, 161"] { c: 0 0 blue }
      &[style*="background-color: rgb(29\, 185"] { c: 0 0 green }
      &[style*="background-color: rgb(89\, 54"] { c: 0 0 violet }
      &[style*="background-color: rgb(24\, 35"] { c: 0 0 magenta }
      > [class*="Header-"] {
        rad: r r 0 0;
        c: 0 shadow #00000010;
      }
      [class*="titleDefault-"], [class*="description-"] { c: white }
    }
  }

  // * Emoji section.
  [class*="emojiRow-"] {
    &::before { c: 0 shadow bg }
    // Text color.
    [class*="emojiAliasPlaceholder-"] {
      c: cm;
      &::before, &::after { c: fg }
    }
    [class*="emojiRowText-"] { c: fg }
    // Input fields.
    input {
      transition: 0.2s ease i;
      c: cm bd bg;
      &:hover, &:focus { c: fg 0 bd }
    }
  }

  // * Cards.
  [class *= 'card-'] {
    c: 0 bd bd;
    [class*="title-"], [class*="primary-"] { c: fg }
    [class*="desc-"] { c: cm }
    [class*="anchor-"] { c: ac }
    [class*="checkbox-"] {
      c: 0 bd bg;
      &[class*="checked-"] { c: 0 0 bg }
    }
    &[class *= 'codeRedemptionRedirect-'] { c: fg 0 hl }
    // Main cards.
    &[class*="cardPrimary"] {
      rad: r;
      c: 0 bd hl;
      &[style*="114\, 137\, 218"] { c: 0 ac }
    }
    // Colorized cards.
    &[style*="rgb(67"] { c: 0 green green }
    &[style*="rgb(114"] { c: 0 ac ac }
    &[style*="rgb(250"] { c: 0 yellow yellow }
    &[style*="rgb(245"] { c: 0 orange orange }
    &[style*="rgb(240"] { c: 0 red red }
    &[style*="rgb("] [class *= 'descChecked-'] { c: white }
    // Colorized cards text.
    [class*="title-"][style*="rgb(67"] { c: green }
    [class*="title-"][style*="rgb(250"] { c: yellow }
    [class*="title-"][style*="rgb(245"] { c: orange }
    [class*="title-"][style*="rgb(240"] { c: red }
    &[style*="rgb("] > [class*="info-"] > * { c: white }
    // Various table elements.
    &[class*="member-"],
    &[class*="emojiRow-"],
    &[class*="sInviteRow-"],
    &[class*="bannedUser-"] {
      c: 0 0 t;
      box-shadow: 0 1px bd;
      [class*="code-" i], [class*="name-" i] { c: fg }
      [class*="tag-"], [class*="roleName-"] { c: cm }
      &::before {
        rad: r;
        c: 0 bd hl;
        box-shadow: bsh;
      }
    }
  }

  // Global -> Buttons.
  [class *= 'button-'] {
    &[class *= 'Link-'] {
      &[class *= 'Grey-'] { c: cm }
      &[class *= 'Brand-'] { c: ac }
      &[class *= 'White-'] { c: cm }
      &[class *= 'Primary-'] { c: fg }
      &:hover > div {
        background-image: none i;
        opacity: 0.8 i;
      }
    }
    &[class *= 'Inverted-'] {
      &[class *= 'Brand-'] { c: white 0 ac }
      &[class *= 'Green-'] { c: white 0 green }
      &[class *= 'Purple-'] { c: white 0 violet }
      &:hover { opacity: 0.8 i }
    }
    &[class *= 'Outlined-'] {
      &[class *= 'Red-'] { c: red red }
      &[class *= 'Brand-'] { c: ac ac }
      &[class *= 'White-'] { c: cm bd bg }
      &[class *= 'Primary-'] { c: fg cm hl }
      &:hover { opacity: 0.8 i }
    }
    &[class *= 'Filled-'] {
      transition: all 0.15s ease;
      &[disabled] { c: fg hl hl }
      &[class *= 'Primary-'] { c: fg 0 hl }
      &[class *= 'Brand-'] { c: white 0 ac }
      &[class *= 'Green-'] { c: white 0 green }
      &[class *= 'White-'] { c: cm bd hl }
      &[class *= 'Grey-'] { c: fg 0 bd }
      &:not([disabled]):hover { opacity: 0.8 i }
    }
  }

  // * Deprecated elements.
  .form.deprecated {
    .header {
      c: 0 0 bg;
      h1 { c: fg }
      input[type=text] {
        c: cm bd bd;
        box-shadow: 0 2px 1px shadow i;
      }
    }
    .form-inner { c: 0 0 bd }
    .footer { c: cm shadow bd }
    a { c: ac }
  }
  // * Create/join another server.
  [class *= 'measurement-'] {
    [class*="slide-"][class*="size-"] {
      c: 0 0 bd;
      box-shadow: 0 2px 8px -1px shadow i;
      [class*="action-"] {
        background: none i;
        c: 0 shadow bg;
        box-shadow: 0 2px 8px shadow;
      }
      [class*="actionBody-"] { c: cm }
      [class*="or-"] { background-image: none i }
    }
  }

  // Settings -> Billing.
  [class *= 'paymentPane-'] {
    border: 1px solid bd;
    c: fg 0 hl;
    [class *= 'bottomDivider-'] { c: 0 bd }
    [class *= 'paginator-'] {
      c: cm 0 t;
      [class *= 'anchor-'] { c: ac }
      [class *= 'date-'], [class *= 'amount-'] { c: cm }
      [class *= 'expand-'] path { stroke: cm }
      [class *= 'payment-'] { c: fg 0 t }
      [class *= 'expandedInfo-'] {
        c: fg 0 bd;
        [class *= 'Header-'], [class *= 'Text-'] { c: fg hl }
      }
    }
    [class *= 'scrollbar-'] {
      &, [class *= 'pad-'] { c: 0 0 hl }
    }
  }

  // Global -> Pagination.
  [class *= 'pageActions-'] {
    [class *= 'pageButton'] {
      c: 0 bd;
      &:hover { c: 0 0 bd }
    }
    [class *= 'pageIndicator-'] { c: fg bd }
  }

  // Global -> Indicators.
  [class *= 'indicator-'] {
    &[class *= 'defaultIndicator-'] { c: fg 0 bd }
    &[class *= 'premiumIndicator-'] { c: white 0 ac }
  }

  // Global -> Placeholders.
  [class *= 'membersWrap-'] {
    [class *= 'Placeholder-'],
    [class *= 'placeholderAvatar-'],
    [class *= 'placeholderUsername-'] {
      c: 0 0 bd;
    }
  }

  // Feat -> Smaller guild icons.
  if ( mid_guilds == 1 ) {
    $size = guild_size;
    // ? Set the width of guilds wrapper.
    [class *= 'guilds-'] {
      width: ($size + 20px);
      // ? Increase width to account for scrollbar polyfill.
      > [class*="wrap-" i] { width: ($size + 40px); }
      // Separators.
      [class*="separator-" i] { width: $size; }
      // Mentions bar.
      [class*="unreadMentionsIndicator"] {
        padding: 4px i;
        [class*="bar-"] {
          width: ($size + 12px) i;
        }
      }
      // Folders!
      > div > div > div > [class *= 'wrapper-'] {
        c: 0 0 t;
        [class*="FolderBackground-"] {
          left: 10px;
          width: $size;
          rad: 16px;
          // Folder wrapper reset.
          &[class*="collapsed-"] { c: 0 0 bg }
          &:not([class*="collapsed"]) {
            bottom: 0px i;
            c: 0 0 bg;
            box-shadow: 0 0 0 2px bg, 0 0 0 4px hl;
            // Remove folder background when expanded.
            + [class*="listItem-"] foreignObject {
              rad: 16px;
              [class*="folder-"]:not(#zz) { c: 0 0 t }
            }
          }
        }
        [class*="listItem-"] {
          > [draggable] {
            // Folder size.
            [class*="wrapper-"], svg {
              width: $size;
              height: $size;
            }
            // Folder/badge resets.
            [class*="folder-"] { c: 0 0 hl }
            [class*="badgeWrapper-"] [class*="lowerBadge-"] {
              right: 0 i;
              top: ($size - 16px) i;
            }
            // Avatar-less servers in folders.
            [class*="noIcon-"] { c: fg 0 hl }
          }
        }
        /// Reset servers within folders.
        > [style *= 'height:'] {
          height: unset i;
          [class*="pill-"] { top: 6px i }
          [class*="blobContainer-"] [class*="wrapper-"] {
            width: unset;
            height: unset;
          }
        }
      }
      /// Fix base.
      + [class *= 'base-'] { left: ($size + 20px) }
    }
    // Guilds!
    [class*="listItem-"] {
      justify-content: flex-start;
      padding-left: 10px;
      [class *= 'listItemWrapper-'] > [class *= 'wrapper-'] {
        width: $size;
        height: $size;
      }
      /// Unread indicators.
      [class*="pill-"] {
        top: ($size / 6);
        [class*="item-"] {
          margin-left: -4px;
          // HACK: Center the pill vertically.
          ../, &:not([style *= 'height: 8px']) { height: ($size / 1.5) i }
        }
      }
      // Home icon.
      &:first-child svg {
        width: $size;
        height: $size;
        &[class*="homeIcon-"] {
          max-width: ($size / 2 + 16px);
          max-height: @max-width;
        }
      }
      // Guild icons.
      [class*="blobContainer-"] {
        // margin-left: ($size / 18) i;
        [class*="wrapper-"] {
          height: unset;
          width: unset;
        }
        &, [class*="wrapper"] > svg {
          width: $size;
          height: $size;
        }
      }
      // Circle/Error icons.
      [class*="circleButtonMask-"], [class*="guildsError-"] {
        &, [class*="svg-"] {
          width: $size;
          height: $size;
        }
      }
      [class*="guildsError-"] {
        c: fg red bg;
        &:hover { c: white 0 red }
      }
      /// Badges.
      [class *= 'upperBadge-'] { c: 0 0 bg }
      [class *= 'lowerBadge-'] { top: ($size - 16px) i }
      /// Unread messages.
      [class *= 'numberBadge-'],  {
        height: 14px i;
        box-shadow: 0 0 0 3px bd;
      }
      /// Voice chat.
      [class *= 'iconBadge-'] {
        c: 0 0 green;
        box-shadow: 0 0 0 3px bd;
        [class *= 'icon-'] path[fill] { v: white }
      }
      /// Fix for dragging guilds.
      > [class *= 'pill-'] + [draggable = 'false'] svg {
        width: $size i;
        height: $size i;
        div { c: 0 0 hl }
      }
    }
    /// DM icons.
    [class *= 'alContainer-'] ~ div[style *= 'height: 56px'] {
      margin-bottom: 8px;
      height: $size i;
      [class*="pill-"] { top: 0 }
      [class*="svg-"] , div[class*="wrapper-"] {
        height: $size i;
        width: $size i;
      }
    }
  }

  // Feat -> Disable avatar context menu.
  if ( disable_acm == 1 ) {
    [class*="avatar-"] {
      img { text-indent: unset }
      * { pointer-events: unset }
    }
  }

  .emoji {
    /// Feat -> Smaller jumbo emotes!
    &.jumboable {
      width: 2.0rem;
      height: 2.0rem;
      min-height: 2.0rem;
    }
    /// Feat -> Larger reaction emotes.
    /[class *= 'reaction-'] & {
      height: 1.5rem;
      width: @height;
    }
  }

  // Feat -> Old font systems.
  if ( fix_fonts == 1 ) {
    [class *= 'messages'] {
      [class *= 'username-'] {
        font-weight: 500 i;
      }
      [class *= 'markup-'] {
        font-size: 0.9375rem i;
        font-weight: 400 i;
        line-height: 1.3 i;
        code.inline { font-size: 85% }
      }
    }
    input[class *= 'input-'],
    textarea[class *= 'textArea-'] {
      font-size: 0.9375rem i;
    }
    ::placeholder { font-weight: 400 i }
  }
  // Feat -> Sub-pixel rendering.
  if ( fix_pixels == 1 ) {
    * {
      text-rendering: optimizeLegibility i;
      -webkit-font-smoothing: auto i;
    }
  }

  // Feat -> Shorter chat area.
  if ( chat_shorter == 1 ) {
    [class *= 'messagesWrapper-'] {
      padding-left: 12px;
      [class *= 'messages-'] {
        /// Messages.
        > div {
          width: 100%;
          max-width: 80rem;
          margin-left: auto;
          margin-right: auto;
          box-sizing: border-box;
        }
      }
      /// Bars.
      > [class *= 'barBase-'] {
        margin-left: auto;
        margin-right: auto;
        max-width: 80rem;
      }
      /// Inputbar.
      + form {
        margin-top: 0 i;
        box-sizing: border-box;
        &::before { content: unset i }
        * { scrollbar-width: none i }
        > div {
          max-width: 80rem;
          margin-left: auto;
          margin-right: auto;
        }
      }
    }
  }
}
}
